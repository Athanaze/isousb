{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9","program":"/home/sacha/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","--edition=2018","/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"dds\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"farbfeld\"","--cfg","feature=\"gif\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=67bda5e554f24c97","-C","extra-filename=-67bda5e554f24c97","--out-dir","/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps","-L","dependency=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps","--extern","bytemuck=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libbytemuck-39d619c3858e469a.rmeta","--extern","byteorder=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libbyteorder-04c49ba599f3e26e.rmeta","--extern","gif=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libgif-21ca8e685e4d43f9.rmeta","--extern","jpeg=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libjpeg_decoder-bfd0173bddbe7268.rmeta","--extern","num_iter=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libnum_iter-dafb19034706155f.rmeta","--extern","num_rational=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libnum_rational-878a20199c5ffe36.rmeta","--extern","num_traits=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libnum_traits-737a98de31ebbd6c.rmeta","--extern","png=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libpng-ce7f7e99eccab081.rmeta","--extern","scoped_threadpool=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libscoped_threadpool-3483b62ace6b926e.rmeta","--extern","tiff=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libtiff-ebd95058504446e3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/sacha/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libimage-67bda5e554f24c97.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[12157238894476704721,9394395134742053592]},"crate_root":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src","external_crates":[{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13178520346727407053,4792203799537005979]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2148882322900320828,10090971091157684155]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9350415023647295219,11539366983612416085]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16918508776218136521,7301222204984185594]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8592614505596521046,3603009779144947114]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[11473471278279687867,9173974428352637418]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6623483043773045031,8238845143598726372]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[16610075776745393193,18271409537166901206]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13539701924899711295,15639608856686263496]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5500391874567785391,134362444564425396]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[16527680682914559102,12860669916872835133]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","num":15,"id":{"name":"tiff","disambiguator":[1889073855114575616,16507679594893166312]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","num":16,"id":{"name":"byteorder","disambiguator":[13746826150927488642,12364726778209526539]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","num":17,"id":{"name":"lzw","disambiguator":[4781465522541750426,16426083581013642997]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","num":18,"id":{"name":"miniz_oxide","disambiguator":[1040450196608485785,14435032321694897184]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","num":19,"id":{"name":"adler32","disambiguator":[17482420400765873877,8055315869088706057]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","num":20,"id":{"name":"num_traits","disambiguator":[11349809253923321824,4793857002261824218]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","num":21,"id":{"name":"gif","disambiguator":[1962040483545508635,7441538344076196574]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","num":22,"id":{"name":"color_quant","disambiguator":[13579467545277025763,10852399128232417369]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","num":23,"id":{"name":"num_rational","disambiguator":[10075604469728976352,15488720715648967453]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","num":24,"id":{"name":"num_integer","disambiguator":[13734313263583192478,12631689348899399497]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","num":25,"id":{"name":"scoped_threadpool","disambiguator":[16682725194295873549,12365587096586901773]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":26,"id":{"name":"jpeg_decoder","disambiguator":[885911520639046831,6220422488642984103]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":27,"id":{"name":"rayon","disambiguator":[11333435268391355357,11819764648146788293]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":28,"id":{"name":"either","disambiguator":[11094623047395335705,14772774501402512045]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":29,"id":{"name":"rayon_core","disambiguator":[17035784860556510490,171279559253588324]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":30,"id":{"name":"crossbeam_channel","disambiguator":[13337470154377600940,2667638139951281962]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":31,"id":{"name":"crossbeam_utils","disambiguator":[10313032977341112434,17608953452688643614]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":32,"id":{"name":"cfg_if","disambiguator":[12920119951859301864,12307716623577920868]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":33,"id":{"name":"lazy_static","disambiguator":[7275722476801455040,9577365497050954252]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":34,"id":{"name":"maybe_uninit","disambiguator":[3912860377233138808,10631918864511778643]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":35,"id":{"name":"crossbeam_deque","disambiguator":[5132166135325065888,10086510349060340071]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":36,"id":{"name":"crossbeam_epoch","disambiguator":[2557042324949880747,3719453592818006059]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":37,"id":{"name":"memoffset","disambiguator":[7115679044828725929,11127088084791459883]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":38,"id":{"name":"scopeguard","disambiguator":[1776616840644237540,17503143598705319490]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":39,"id":{"name":"num_cpus","disambiguator":[16607659309908402517,12649812274950671405]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":40,"id":{"name":"libc","disambiguator":[5203869634156297331,6526592599972629508]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","num":41,"id":{"name":"num_iter","disambiguator":[14524753178500720670,718856723032627085]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":42,"id":{"name":"png","disambiguator":[3933719482531518819,8217289455264042955]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":43,"id":{"name":"bitflags","disambiguator":[6196079888791578331,5958756966964124101]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":44,"id":{"name":"deflate","disambiguator":[6794344865497854739,16156597168364385311]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":45,"id":{"name":"crc32fast","disambiguator":[16508975255132075159,3933680942867058650]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","num":46,"id":{"name":"bytemuck","disambiguator":[2424493467838941828,14921789939086747759]}}],"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":0,"byte_end":10148,"line_start":1,"line_end":274,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":5424},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7029,"byte_end":7038,"line_start":139,"line_end":139,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5463},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7040,"byte_end":7057,"line_start":139,"line_end":139,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5887},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5888},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":5974},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5975},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":5829},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5830},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":5916},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5917},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":5858},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5859},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":5945},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5946},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":3969},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7144,"byte_end":7154,"line_start":143,"line_end":143,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7156,"byte_end":7167,"line_start":143,"line_end":143,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3786},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7194,"byte_end":7210,"line_start":145,"line_end":145,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3812},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7228,"byte_end":7240,"line_start":146,"line_end":146,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3799},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7258,"byte_end":7274,"line_start":147,"line_end":147,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3767},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7292,"byte_end":7304,"line_start":148,"line_end":148,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3780},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7322,"byte_end":7337,"line_start":149,"line_end":149,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3789},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7355,"byte_end":7367,"line_start":150,"line_end":150,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6087},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7385,"byte_end":7396,"line_start":151,"line_end":151,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6130},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7414,"byte_end":7431,"line_start":152,"line_end":152,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6166},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7449,"byte_end":7457,"line_start":153,"line_end":153,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6181},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7504,"byte_end":7510,"line_start":155,"line_end":155,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3824},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7528,"byte_end":7536,"line_start":156,"line_end":156,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3350},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7583,"byte_end":7597,"line_start":159,"line_end":159,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3349},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7616,"byte_end":7625,"line_start":160,"line_end":160,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5393},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7676,"byte_end":7687,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3347},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7706,"byte_end":7714,"line_start":163,"line_end":163,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3348},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7733,"byte_end":7742,"line_start":164,"line_end":164,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4165},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7767,"byte_end":7778,"line_start":166,"line_end":166,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3872},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7815,"byte_end":7830,"line_start":169,"line_end":169,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3878},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7832,"byte_end":7841,"line_start":169,"line_end":169,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3909},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7843,"byte_end":7848,"line_start":169,"line_end":169,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7918,"byte_end":7930,"line_start":172,"line_end":172,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":533},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7932,"byte_end":7936,"line_start":172,"line_end":172,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3708},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7965,"byte_end":7981,"line_start":173,"line_end":173,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3709},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7983,"byte_end":8011,"line_start":173,"line_end":173,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3700},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8013,"byte_end":8017,"line_start":173,"line_end":173,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3704},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8038,"byte_end":8049,"line_start":174,"line_end":174,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3706},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8051,"byte_end":8074,"line_start":174,"line_end":174,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3702},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8076,"byte_end":8092,"line_start":174,"line_end":174,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6054},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8121,"byte_end":8133,"line_start":176,"line_end":176,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5373},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8163,"byte_end":8168,"line_start":178,"line_end":178,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5366},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8170,"byte_end":8175,"line_start":178,"line_end":178,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2983},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8177,"byte_end":8183,"line_start":178,"line_end":178,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3334},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8406,"byte_end":8419,"line_start":187,"line_end":187,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3153},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8429,"byte_end":8444,"line_start":188,"line_end":188,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3198},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8454,"byte_end":8472,"line_start":189,"line_end":189,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3176},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8482,"byte_end":8495,"line_start":190,"line_end":190,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3218},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8505,"byte_end":8521,"line_start":191,"line_end":191,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3055},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8531,"byte_end":8537,"line_start":192,"line_end":192,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3080},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8547,"byte_end":8556,"line_start":193,"line_end":193,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3102},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8566,"byte_end":8570,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3129},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8580,"byte_end":8587,"line_start":195,"line_end":195,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":4121},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27938,"byte_end":27942,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":4146},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45088,"byte_end":45098,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4151},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45136,"byte_end":45146,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4152},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45136,"byte_end":45146,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":189}},{"kind":"Use","ref_id":{"krate":0,"index":4153},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45148,"byte_end":45156,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4154},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45148,"byte_end":45156,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":190}},{"kind":"Use","ref_id":{"krate":0,"index":4155},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45158,"byte_end":45166,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4156},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45158,"byte_end":45166,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":191}},{"kind":"Use","ref_id":{"krate":0,"index":4147},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45168,"byte_end":45175,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4148},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45168,"byte_end":45175,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":192}},{"kind":"Use","ref_id":{"krate":0,"index":4149},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45177,"byte_end":45185,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4150},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45177,"byte_end":45185,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":193}},{"kind":"Use","ref_id":{"krate":0,"index":249},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45244,"byte_end":45259,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45261,"byte_end":45285,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45287,"byte_end":45300,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45302,"byte_end":45324,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45326,"byte_end":45335,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45341,"byte_end":45359,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45361,"byte_end":45370,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45372,"byte_end":45380,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45382,"byte_end":45394,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45396,"byte_end":45407,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45409,"byte_end":45421,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45423,"byte_end":45441,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45443,"byte_end":45459,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45506,"byte_end":45510,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45512,"byte_end":45521,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45523,"byte_end":45529,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45531,"byte_end":45540,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45542,"byte_end":45551,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45601,"byte_end":45609,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45611,"byte_end":45619,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45621,"byte_end":45627,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45629,"byte_end":45638,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45640,"byte_end":45649,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45651,"byte_end":45663,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45665,"byte_end":45671,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4141},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45698,"byte_end":45705,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4142},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45698,"byte_end":45705,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":222}},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45707,"byte_end":45715,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":468},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","byte_start":108730,"byte_end":108736,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":841},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191765,"byte_end":191775,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":730}},{"kind":"Use","ref_id":{"krate":0,"index":960},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191878,"byte_end":191888,"line_start":12,"line_end":12,"column_start":25,"column_end":35},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":730}},{"kind":"Use","ref_id":{"krate":0,"index":964},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191890,"byte_end":191900,"line_start":12,"line_end":12,"column_start":37,"column_end":47},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":730}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310851,"byte_end":310852,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"rgbe8, SIGNATURE, HdrAdapter, Rgbe8Pixel","parent":{"krate":0,"index":1264}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310851,"byte_end":310852,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1264}},{"kind":"Use","ref_id":{"krate":0,"index":1542},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362981,"byte_end":362991,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"IcoDecoder","value":"","parent":{"krate":0,"index":1496}},{"kind":"Use","ref_id":{"krate":0,"index":1606},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":363038,"byte_end":363048,"line_start":11,"line_end":11,"column_start":25,"column_end":35},"alias_span":null,"name":"IcoEncoder","value":"","parent":{"krate":0,"index":1496}},{"kind":"Use","ref_id":{"krate":0,"index":1609},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":363050,"byte_end":363060,"line_start":11,"line_end":11,"column_start":37,"column_end":47},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1496}},{"kind":"Use","ref_id":{"krate":0,"index":1649},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380151,"byte_end":380162,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380265,"byte_end":380276,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":4824},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380278,"byte_end":380290,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":4806},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380292,"byte_end":380308,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":1773},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380310,"byte_end":380321,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":2090},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":471896,"byte_end":471906,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PnmDecoder","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2226},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472009,"byte_end":472019,"line_start":9,"line_end":9,"column_start":25,"column_end":35},"alias_span":null,"name":"PnmEncoder","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2230},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472021,"byte_end":472031,"line_start":9,"line_end":9,"column_start":37,"column_end":47},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5104},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472089,"byte_end":472104,"line_start":11,"line_end":11,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5114},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472106,"byte_end":472123,"line_start":11,"line_end":11,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5075},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472125,"byte_end":472137,"line_start":11,"line_end":11,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5084},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472139,"byte_end":472152,"line_start":11,"line_end":11,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5094},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472177,"byte_end":472189,"line_start":12,"line_end":12,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2328},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472309,"byte_end":472318,"line_start":14,"line_end":14,"column_start":24,"column_end":33},"alias_span":null,"name":"PnmHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2331},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472320,"byte_end":472329,"line_start":14,"line_end":14,"column_start":35,"column_end":44},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5051},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472331,"byte_end":472341,"line_start":14,"line_end":14,"column_start":46,"column_end":56},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2327},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472343,"byte_end":472353,"line_start":14,"line_end":14,"column_start":58,"column_end":68},"alias_span":null,"name":"PnmSubtype","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5035},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":472355,"byte_end":472369,"line_start":14,"line_end":14,"column_start":70,"column_end":84},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2412},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":560633,"byte_end":560643,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaDecoder","value":"","parent":{"krate":0,"index":2376}},{"kind":"Use","ref_id":{"krate":0,"index":2478},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":560709,"byte_end":560719,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaEncoder","value":"","parent":{"krate":0,"index":2376}},{"kind":"Use","ref_id":{"krate":0,"index":2652},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/mod.rs","byte_start":597091,"byte_end":597102,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebPDecoder","value":"","parent":{"krate":0,"index":2612}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":0,"byte_end":10148,"line_start":1,"line_end":274,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":6244},{"krate":0,"index":9},{"krate":0,"index":6246},{"krate":0,"index":10},{"krate":0,"index":6248},{"krate":0,"index":11},{"krate":0,"index":6250},{"krate":0,"index":12},{"krate":0,"index":6252},{"krate":0,"index":13},{"krate":0,"index":6254},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":175},{"krate":0,"index":446},{"krate":0,"index":551},{"krate":0,"index":730},{"krate":0,"index":985},{"krate":0,"index":1038},{"krate":0,"index":1160},{"krate":0,"index":1264},{"krate":0,"index":1496},{"krate":0,"index":1624},{"krate":0,"index":1845},{"krate":0,"index":1980},{"krate":0,"index":2376},{"krate":0,"index":2541},{"krate":0,"index":2612},{"krate":0,"index":2884},{"krate":0,"index":2977},{"krate":0,"index":3017},{"krate":0,"index":3357},{"krate":0,"index":3555},{"krate":0,"index":3711},{"krate":0,"index":3857},{"krate":0,"index":3955},{"krate":0,"index":6237},{"krate":0,"index":3968}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.","sig":null,"attributes":[{"value":"! This crate provides native rust implementations of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"! image encoders and decoders and basic image manipulation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"! functions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":131,"byte_end":134,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Additional documentation can currently also be found in the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":135,"byte_end":198,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"! [README.md file which is most easily viewed on github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":199,"byte_end":315,"line_start":6,"line_end":6,"column_start":1,"column_end":117}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":316,"byte_end":319,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [Jump forward to crate content](#reexports)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":320,"byte_end":367,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":368,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! # Overview","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":372,"byte_end":386,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":387,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":391,"byte_end":495,"line_start":12,"line_end":12,"column_start":1,"column_end":105}},{"value":"! encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":496,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"! without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":592,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"! supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":687,"byte_end":781,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"! dependencies.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":782,"byte_end":799,"line_start":16,"line_end":16,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":800,"byte_end":803,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! | Format | Decoding | Encoding |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":804,"byte_end":840,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"! | ------ | -------- | -------- |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":841,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"! | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":878,"byte_end":939,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":940,"byte_end":997,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"! | GIF    | Yes | Yes |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":998,"byte_end":1024,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"! | BMP    | Yes | RGB(8), RGBA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1025,"byte_end":1082,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"! | ICO    | Yes | Yes |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1083,"byte_end":1109,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"! | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB(8), RGBA(8), Gray(8) |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1110,"byte_end":1195,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"! | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1196,"byte_end":1242,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"! | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1243,"byte_end":1293,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"! | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1294,"byte_end":1332,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"! | TGA    | Yes | RGB(8), RGBA(8), BGR(8), BGRA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1333,"byte_end":1407,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"! | farbfeld | Yes | Yes |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1408,"byte_end":1436,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1437,"byte_end":1440,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! ## Using images decoders","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1441,"byte_end":1469,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! There exists a huge variety of image formats that are concerned with efficiently encoding image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1474,"byte_end":1573,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"! pixel data and auxiliary meta data for many different purposes. The `image` library provides","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1574,"byte_end":1670,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! decoders for many common formats, depending on the active features. The best way to use them","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1671,"byte_end":1767,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! depends on your use case.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1768,"byte_end":1797,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`open`] is a very simple way to load images from the file system, automatically deducing the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1802,"byte_end":1901,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"!   format but offering little customization.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1902,"byte_end":1949,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"! * [`load_from_memory`], [`load_from_memory_with_format`] present a similar interface for images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1950,"byte_end":2049,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"!   whose encoded data is already present in memory.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2050,"byte_end":2104,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"! * [`io::Reader`] is a builder providing a superset of the functions. It offers both","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2105,"byte_end":2192,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"!   customization and auto-deduction but is slightly more involved. The main benefit is that the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2193,"byte_end":2291,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"!   interface is easier to evolve.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2292,"byte_end":2328,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"! * [`ImageDecoder`] is a trait for querying meta data and reading image pixels into a generic","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2329,"byte_end":2425,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"!   byte buffer. It also contains a `Read` adaptor for stream reading the pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2426,"byte_end":2509,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::from_decoder`] can be used for creating a buffer from a single specific or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2510,"byte_end":2606,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"!   any custom decoder implementing the [`ImageDecoder`] trait.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2607,"byte_end":2672,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2673,"byte_end":2676,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! [`open`]: fn.open.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2677,"byte_end":2703,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"! [`load_from_memory`]: fn.load_from_memory.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2704,"byte_end":2754,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"! [`load_from_memory_with_format`]: fn.load_from_memory_with_format.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2755,"byte_end":2829,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"! [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2830,"byte_end":2871,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"! [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2872,"byte_end":2950,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"! [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2951,"byte_end":2996,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2997,"byte_end":3000,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! ## Using image encoders","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3001,"byte_end":3028,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3029,"byte_end":3032,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! Encoding pixel data is supported for the majority of formats but not quite as broadly.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3033,"byte_end":3123,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3124,"byte_end":3127,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! * [`DynamicImage::save`] is the converse of `open` and stores a `DynamicImage`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3128,"byte_end":3211,"line_start":62,"line_end":62,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::write_to`] can be used to encode an image into any writer, for example into a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3212,"byte_end":3311,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"!   vector of bytes in memory.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3312,"byte_end":3344,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"! * [`save_buffer`], [`save_buffer_with_format`] provide a low-level interface for saving an image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3345,"byte_end":3445,"line_start":65,"line_end":65,"column_start":1,"column_end":101}},{"value":"!   in the file system, where the library initializes the chosen encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3446,"byte_end":3521,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"! * [`ImageEncoder`] is a trait for encoding a byte buffer of image data and the inverse of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3522,"byte_end":3619,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"!   `ImageDecoder` interface.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3620,"byte_end":3651,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3652,"byte_end":3655,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! [`save_buffer`]: #fn.save_buffer.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3656,"byte_end":3697,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"! [`save_buffer_with_format`]: #fn.save_buffer_with_format.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3698,"byte_end":3763,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! [`DynamicImage::save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3764,"byte_end":3826,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"! [`DynamicImage::write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3827,"byte_end":3897,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"! [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3898,"byte_end":3943,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3944,"byte_end":3947,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ## Image buffers","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3948,"byte_end":3968,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3969,"byte_end":3972,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! The library adds containers for channel data which together form some representation of a 2D","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3973,"byte_end":4069,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"! matrix of pixels. These are all statically typed to avoid misinterpretation of byte data (and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4070,"byte_end":4167,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"! since Rust has no standard safe encapsulation for reinterpreting byte slices as another type).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4168,"byte_end":4266,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"! The main traits [`GenericImageView`] and [`GenericImage`] model a view on a 2D-matrix of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4267,"byte_end":4359,"line_start":81,"line_end":81,"column_start":1,"column_end":93}},{"value":"! addressable pixels and a buffer of independently accessible pixels respectively.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4360,"byte_end":4444,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4445,"byte_end":4448,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! The two main types for owning pixel data are [`ImageBuffer`] and [`DynamicImage`]. Note that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4449,"byte_end":4545,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"! the latter is an enum over well-supported pixel types that also offers conversion","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4546,"byte_end":4631,"line_start":85,"line_end":85,"column_start":1,"column_end":86}},{"value":"! functionality.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4632,"byte_end":4650,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4651,"byte_end":4654,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! Additionally, the [`flat`] module contains items for interoperability with generic channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4655,"byte_end":4749,"line_start":88,"line_end":88,"column_start":1,"column_end":95}},{"value":"! matrices and foreign interface. While still strictly typed, these dynamically validate length and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4750,"byte_end":4851,"line_start":89,"line_end":89,"column_start":1,"column_end":102}},{"value":"! other layout assumptions required to provide the trait interface. While they are quite generic, you","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4852,"byte_end":4955,"line_start":90,"line_end":90,"column_start":1,"column_end":104}},{"value":"! should be prepared for a bit of boilerplate when using these types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4956,"byte_end":5027,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5028,"byte_end":5031,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5032,"byte_end":5085,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"! [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5086,"byte_end":5131,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"! [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5132,"byte_end":5176,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"! [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5177,"byte_end":5221,"line_start":96,"line_end":96,"column_start":1,"column_end":45}},{"value":"! [`flat`]: flat/index.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5222,"byte_end":5251,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5252,"byte_end":5255,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! ## A note on format specific features","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5256,"byte_end":5297,"line_start":99,"line_end":99,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5298,"byte_end":5301,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"! One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5302,"byte_end":5394,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"! ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5395,"byte_end":5493,"line_start":102,"line_end":102,"column_start":1,"column_end":99}},{"value":"! effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5494,"byte_end":5587,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"! linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5588,"byte_end":5687,"line_start":104,"line_end":104,"column_start":1,"column_end":100}},{"value":"! many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5688,"byte_end":5784,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5785,"byte_end":5788,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5789,"byte_end":5880,"line_start":107,"line_end":107,"column_start":1,"column_end":92}},{"value":"! _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5881,"byte_end":5953,"line_start":108,"line_end":108,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5954,"byte_end":5957,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5958,"byte_end":6052,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"!    exists an essentially canonical way to control it.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6053,"byte_end":6110,"line_start":111,"line_end":111,"column_start":1,"column_end":58}},{"value":"! 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6111,"byte_end":6205,"line_start":112,"line_end":112,"column_start":1,"column_end":95}},{"value":"! 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6206,"byte_end":6305,"line_start":113,"line_end":113,"column_start":1,"column_end":100}},{"value":"!    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6306,"byte_end":6404,"line_start":114,"line_end":114,"column_start":1,"column_end":99}},{"value":"!    breaking changes.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6405,"byte_end":6429,"line_start":115,"line_end":115,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6430,"byte_end":6433,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! Features that fulfill two or more criteria are preferred.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6434,"byte_end":6495,"line_start":117,"line_end":117,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6496,"byte_end":6499,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"! Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6500,"byte_end":6588,"line_start":119,"line_end":119,"column_start":1,"column_end":89}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6590,"byte_end":6612,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6613,"byte_end":6644,"line_start":122,"line_end":122,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6645,"byte_end":6670,"line_start":123,"line_end":123,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6671,"byte_end":6691,"line_start":124,"line_end":124,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6692,"byte_end":6730,"line_start":125,"line_end":125,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6828,"byte_end":6869,"line_start":128,"line_end":128,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":3969},{"krate":0,"index":3988},{"krate":0,"index":3990},{"krate":0,"index":3993},{"krate":0,"index":3995},{"krate":0,"index":4017},{"krate":0,"index":4015},{"krate":0,"index":4012},{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4019},{"krate":0,"index":4022},{"krate":0,"index":4024},{"krate":0,"index":4027},{"krate":0,"index":4029},{"krate":0,"index":4051},{"krate":0,"index":4049},{"krate":0,"index":4046},{"krate":0,"index":4042},{"krate":0,"index":4043},{"krate":0,"index":4053},{"krate":0,"index":4056},{"krate":0,"index":4058},{"krate":0,"index":4060},{"krate":0,"index":4062},{"krate":0,"index":4082},{"krate":0,"index":4080},{"krate":0,"index":4077},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4070},{"krate":0,"index":4071},{"krate":0,"index":4084},{"krate":0,"index":4108},{"krate":0,"index":4106},{"krate":0,"index":4103},{"krate":0,"index":4099},{"krate":0,"index":4100},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"! Contains detailed error representation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10150,"byte_end":10193,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10194,"byte_end":10197,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10198,"byte_end":10291,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"! subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10292,"byte_end":10391,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"! respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10392,"byte_end":10467,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10468,"byte_end":10471,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10472,"byte_end":10571,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"! through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10572,"byte_end":10670,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"! may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10671,"byte_end":10766,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"! `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10767,"byte_end":10863,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"! you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10864,"byte_end":10960,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"! external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10961,"byte_end":11042,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11043,"byte_end":11046,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [`ImageError`]: enum.ImageError.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11047,"byte_end":11087,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3970},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11799,"byte_end":11807,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":3969},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11516,"byte_end":11560,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11565,"byte_end":11568,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11573,"byte_end":11666,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11671,"byte_end":11754,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11759,"byte_end":11794,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3973},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12193,"byte_end":12201,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":3969},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11829,"byte_end":11873,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11878,"byte_end":11881,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11886,"byte_end":11972,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11977,"byte_end":12070,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12075,"byte_end":12168,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12173,"byte_end":12188,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3976},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12441,"byte_end":12450,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":3969},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12223,"byte_end":12271,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12276,"byte_end":12279,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12284,"byte_end":12375,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12380,"byte_end":12436,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3979},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12710,"byte_end":12716,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":3969},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12473,"byte_end":12550,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12555,"byte_end":12558,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12563,"byte_end":12658,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12663,"byte_end":12705,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3982},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13054,"byte_end":13065,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":3969},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12735,"byte_end":12799,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12804,"byte_end":12807,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12812,"byte_end":12896,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12901,"byte_end":12938,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12943,"byte_end":12990,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12995,"byte_end":13049,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3985},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13156,"byte_end":13163,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":3969},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13090,"byte_end":13151,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":3969},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11499,"byte_end":11509,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"ImageError::{Decoding, Encoding, Parameter, Limits, Unsupported, IoError}","parent":null,"children":[{"krate":0,"index":3970},{"krate":0,"index":3973},{"krate":0,"index":3976},{"krate":0,"index":3979},{"krate":0,"index":3982},{"krate":0,"index":3985}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11241,"byte_end":11289,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11290,"byte_end":11293,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11294,"byte_end":11386,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11387,"byte_end":11472,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":3990},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13395,"byte_end":13411,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":3991},{"krate":0,"index":3992}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13179,"byte_end":13236,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13237,"byte_end":13240,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13241,"byte_end":13300,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13301,"byte_end":13304,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13305,"byte_end":13366,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3996},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13650,"byte_end":13655,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":3995},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13598,"byte_end":13645,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3999},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13722,"byte_end":13728,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":3995},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13680,"byte_end":13717,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4002},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13872,"byte_end":13886,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":3995},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13751,"byte_end":13788,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13793,"byte_end":13867,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4005},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13919,"byte_end":13934,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":3995},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3995},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13571,"byte_end":13591,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"UnsupportedErrorKind::{Color, Format, GenericFeature, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":3996},{"krate":0,"index":3999},{"krate":0,"index":4002},{"krate":0,"index":4005}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13478,"byte_end":13520,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":4019},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14253,"byte_end":14266,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":4020},{"krate":0,"index":4021}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13960,"byte_end":14013,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14014,"byte_end":14017,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14018,"byte_end":14112,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14113,"byte_end":14152,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14153,"byte_end":14156,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14157,"byte_end":14224,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4024},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14648,"byte_end":14662,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":4025},{"krate":0,"index":4026}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14356,"byte_end":14405,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14406,"byte_end":14409,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14410,"byte_end":14505,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14506,"byte_end":14545,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14546,"byte_end":14549,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14550,"byte_end":14619,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4030},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14910,"byte_end":14927,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":4029},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14869,"byte_end":14905,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4032},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15025,"byte_end":15038,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":4029},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14933,"byte_end":15020,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4034},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15166,"byte_end":15173,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":4029},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15044,"byte_end":15082,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15087,"byte_end":15161,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4037},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15234,"byte_end":15244,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":4029},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15187,"byte_end":15229,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4039},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15328,"byte_end":15343,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4029},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15269,"byte_end":15323,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4029},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14844,"byte_end":14862,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"ParameterErrorKind::{DimensionMismatch, FailedAlready, Generic, NoMoreData, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4030},{"krate":0,"index":4032},{"krate":0,"index":4034},{"krate":0,"index":4037},{"krate":0,"index":4039}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14752,"byte_end":14793,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4053},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15662,"byte_end":15675,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":4054},{"krate":0,"index":4055}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15369,"byte_end":15422,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15423,"byte_end":15426,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15427,"byte_end":15521,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15522,"byte_end":15561,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15562,"byte_end":15565,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15566,"byte_end":15633,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4058},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16075,"byte_end":16085,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":4059}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15764,"byte_end":15841,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15842,"byte_end":15845,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15846,"byte_end":15938,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15939,"byte_end":15978,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15979,"byte_end":15982,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15983,"byte_end":16046,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4063},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16617,"byte_end":16631,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":4062},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16544,"byte_end":16612,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4065},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16715,"byte_end":16733,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":4062},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16637,"byte_end":16710,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4067},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16817,"byte_end":16832,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4062},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16758,"byte_end":16812,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4062},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16523,"byte_end":16537,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"LimitErrorKind::{DimensionError, InsufficientMemory, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4063},{"krate":0,"index":4065},{"krate":0,"index":4067}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16156,"byte_end":16224,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16225,"byte_end":16228,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16229,"byte_end":16327,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16328,"byte_end":16393,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16439,"byte_end":16477,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4085},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17019,"byte_end":17024,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16982,"byte_end":17014,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4088},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17092,"byte_end":17096,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17044,"byte_end":17087,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4091},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17168,"byte_end":17181,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17111,"byte_end":17163,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4094},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17268,"byte_end":17275,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17208,"byte_end":17263,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4096},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17301,"byte_end":17316,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4084},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16960,"byte_end":16975,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"ImageFormatHint::{Exact, Name, PathExtension, Unknown, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4085},{"krate":0,"index":4088},{"krate":0,"index":4091},{"krate":0,"index":4094},{"krate":0,"index":4096}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16858,"byte_end":16909,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17588,"byte_end":17608,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"fn (ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17370,"byte_end":17456,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17461,"byte_end":17464,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17469,"byte_end":17557,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17562,"byte_end":17576,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17836,"byte_end":17840,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"fn (&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17758,"byte_end":17824,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17979,"byte_end":17990,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"fn (&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17911,"byte_end":17967,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18182,"byte_end":18185,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"fn <impl Into<Box<dyn Error + Send + Sync>>> (ImageFormatHint, impl Into<Box<dyn Error + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18081,"byte_end":18170,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18553,"byte_end":18569,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"fn (ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18397,"byte_end":18446,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18451,"byte_end":18454,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18459,"byte_end":18541,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18768,"byte_end":18779,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"fn (&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18700,"byte_end":18756,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18972,"byte_end":18975,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"fn <impl Into<Box<dyn Error + Send + Sync>>> (ImageFormatHint, impl Into<Box<dyn Error + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18870,"byte_end":18960,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19344,"byte_end":19360,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"fn (ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19187,"byte_end":19237,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19242,"byte_end":19245,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19250,"byte_end":19332,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19558,"byte_end":19569,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"fn (&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19491,"byte_end":19546,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19741,"byte_end":19750,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"fn (ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19661,"byte_end":19729,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19957,"byte_end":19961,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"fn (&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19881,"byte_end":19945,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20134,"byte_end":20143,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"fn (LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20050,"byte_end":20122,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20308,"byte_end":20312,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"fn (&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20236,"byte_end":20296,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21191,"byte_end":21202,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21133,"byte_end":21181,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8311,"byte_end":8317,"line_start":184,"line_end":184,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8231,"byte_end":8302,"line_start":183,"line_end":183,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"! Mathematical helper functions and types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27835,"byte_end":27879,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":4110},{"krate":0,"index":4118},{"krate":0,"index":4116},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":153}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"! NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":27945,"byte_end":28016,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"! See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28017,"byte_end":28082,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"! in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28083,"byte_end":28156,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"! for a discussion of the algorithm.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28157,"byte_end":28195,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"! See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28196,"byte_end":28300,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31835,"byte_end":31843,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30138,"byte_end":30172,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30173,"byte_end":30176,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30177,"byte_end":30191,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30192,"byte_end":30199,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30200,"byte_end":30260,"line_start":66,"line_end":66,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30261,"byte_end":30295,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30296,"byte_end":30342,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30343,"byte_end":30346,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30347,"byte_end":30397,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30398,"byte_end":30422,"line_start":71,"line_end":71,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30423,"byte_end":30471,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30472,"byte_end":30522,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30523,"byte_end":30572,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30573,"byte_end":30627,"line_start":75,"line_end":75,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30628,"byte_end":30675,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30676,"byte_end":30713,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30714,"byte_end":30753,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30754,"byte_end":30792,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30793,"byte_end":30832,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30833,"byte_end":30836,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30837,"byte_end":30935,"line_start":82,"line_end":82,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30936,"byte_end":30962,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30963,"byte_end":31056,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31057,"byte_end":31110,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31111,"byte_end":31159,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31160,"byte_end":31206,"line_start":87,"line_end":87,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31207,"byte_end":31297,"line_start":88,"line_end":88,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31298,"byte_end":31317,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31318,"byte_end":31373,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31374,"byte_end":31473,"line_start":91,"line_end":91,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31474,"byte_end":31570,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31571,"byte_end":31591,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31592,"byte_end":31656,"line_start":94,"line_end":94,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31657,"byte_end":31700,"line_start":95,"line_end":95,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31701,"byte_end":31737,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31738,"byte_end":31787,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31788,"byte_end":31807,"line_start":98,"line_end":98,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31808,"byte_end":31815,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31816,"byte_end":31823,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32145,"byte_end":32148,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"fn (i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neural network and trains it with the supplied data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32064,"byte_end":32133,"line_start":112,"line_end":112,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32689,"byte_end":32693,"line_start":129,"line_end":129,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"fn (&mut Self, &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neural network and trains it with the supplied data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32606,"byte_end":32677,"line_start":128,"line_end":128,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":33683,"byte_end":33692,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"fn (&Self, &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":33578,"byte_end":33649,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":33654,"byte_end":33671,"line_start":160,"line_end":160,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34162,"byte_end":34170,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"fn (&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34066,"byte_end":34128,"line_start":171,"line_end":171,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34133,"byte_end":34150,"line_start":172,"line_end":172,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34431,"byte_end":34437,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"fn (&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":" Lookup pixel values for color at `idx` in the colormap.\n","sig":null,"attributes":[{"value":"/ Lookup pixel values for color at `idx` in the colormap.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34360,"byte_end":34419,"line_start":179,"line_end":179,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":171}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"! Shared mathematical utility functions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44067,"byte_end":44109,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44354,"byte_end":44359,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"fn <N> (N, N, N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44111,"byte_end":44149,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44150,"byte_end":44153,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44154,"byte_end":44161,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44162,"byte_end":44189,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44190,"byte_end":44193,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44194,"byte_end":44238,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44239,"byte_end":44283,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44284,"byte_end":44328,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44329,"byte_end":44336,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44337,"byte_end":44346,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":4121},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44640,"byte_end":44644,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":4122},{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4125}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44512,"byte_end":44577,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4122},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44704,"byte_end":44705,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":4121},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44651,"byte_end":44695,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4123},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44769,"byte_end":44770,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":4121},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44716,"byte_end":44760,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4124},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44816,"byte_end":44821,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":4121},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44781,"byte_end":44807,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":4125},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44868,"byte_end":44874,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":4121},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44832,"byte_end":44859,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":175},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":6382},{"krate":0,"index":190},{"krate":0,"index":6384},{"krate":0,"index":191},{"krate":0,"index":6386},{"krate":0,"index":192},{"krate":0,"index":6388},{"krate":0,"index":193},{"krate":0,"index":6390},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":6442},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":265},{"krate":0,"index":335},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":438},{"krate":0,"index":443}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"! Image Processing Functions","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":44884,"byte_end":44914,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57057,"byte_end":57065,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn <I> (&I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57008,"byte_end":57049,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57397,"byte_end":57406,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn <I> (&I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57347,"byte_end":57389,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57739,"byte_end":57748,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn <I> (&I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57689,"byte_end":57731,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58136,"byte_end":58147,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"fn <I, Container> (&I, &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58031,"byte_end":58128,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58921,"byte_end":58933,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"fn <I, Container> (&I, &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58815,"byte_end":58913,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":59716,"byte_end":59728,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"fn <I, Container> (&I, &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":59610,"byte_end":59708,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60434,"byte_end":60449,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn <I> (&I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60396,"byte_end":60426,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60774,"byte_end":60787,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn <I> (&I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60738,"byte_end":60766,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61169,"byte_end":61187,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"fn <I, Container> (&I, &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61074,"byte_end":61161,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61948,"byte_end":61964,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"fn <I, Container> (&I, &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61855,"byte_end":61940,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":62691,"byte_end":62709,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"fn <I> (&mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":62632,"byte_end":62683,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63489,"byte_end":63513,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"fn <I> (&mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63441,"byte_end":63481,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63919,"byte_end":63941,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"fn <I> (&mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63873,"byte_end":63911,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":6466},{"krate":0,"index":272},{"krate":0,"index":6468},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":304},{"krate":0,"index":4141},{"krate":0,"index":4144},{"krate":0,"index":4143},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":332}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"! Functions for altering and converting the color of pixelbufs","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":68894,"byte_end":68958,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69343,"byte_end":69352,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn <I> (&I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69292,"byte_end":69335,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69884,"byte_end":69890,"line_start":36,"line_end":36,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn <I> (&mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69791,"byte_end":69839,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69840,"byte_end":69876,"line_start":35,"line_end":35,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70353,"byte_end":70361,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn <I, P, S> (&I, f32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70154,"byte_end":70200,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70201,"byte_end":70260,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70261,"byte_end":70345,"line_start":51,"line_end":51,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71336,"byte_end":71344,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn <I, P, S> (&I, i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71162,"byte_end":71194,"line_start":84,"line_end":84,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71195,"byte_end":71251,"line_start":85,"line_end":85,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71252,"byte_end":71328,"line_start":86,"line_end":86,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72330,"byte_end":72339,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn <I, P, S> (&I, i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72114,"byte_end":72148,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72149,"byte_end":72200,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72201,"byte_end":72270,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72271,"byte_end":72322,"line_start":121,"line_end":121,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":304},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74253,"byte_end":74261,"line_start":179,"line_end":179,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74227,"byte_end":74242,"line_start":178,"line_end":178,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":305},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74325,"byte_end":74330,"line_start":181,"line_end":181,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74268,"byte_end":74315,"line_start":180,"line_end":180,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74423,"byte_end":74431,"line_start":184,"line_end":184,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn (&Self, &Self::Color) -> usize","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74336,"byte_end":74389,"line_start":182,"line_end":182,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74394,"byte_end":74415,"line_start":183,"line_end":183,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74639,"byte_end":74645,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"fn (&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74474,"byte_end":74567,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74572,"byte_end":74631,"line_start":186,"line_end":186,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74826,"byte_end":74836,"line_start":192,"line_end":192,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"fn (&Self) -> bool","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74738,"byte_end":74818,"line_start":191,"line_end":191,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74941,"byte_end":74950,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn (&Self, &mut Self::Color) -> ()","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74878,"byte_end":74933,"line_start":195,"line_end":195,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4141},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76095,"byte_end":76102,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74987,"byte_end":75011,"line_start":199,"line_end":199,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75012,"byte_end":75015,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75016,"byte_end":75030,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75031,"byte_end":75038,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75039,"byte_end":75108,"line_start":203,"line_end":203,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75109,"byte_end":75144,"line_start":204,"line_end":204,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75145,"byte_end":75148,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75149,"byte_end":75175,"line_start":206,"line_end":206,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75176,"byte_end":75263,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75264,"byte_end":75359,"line_start":208,"line_end":208,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75360,"byte_end":75456,"line_start":209,"line_end":209,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75457,"byte_end":75530,"line_start":210,"line_end":210,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75531,"byte_end":75554,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75555,"byte_end":75603,"line_start":212,"line_end":212,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75604,"byte_end":75656,"line_start":213,"line_end":213,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75657,"byte_end":75700,"line_start":214,"line_end":214,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75701,"byte_end":75737,"line_start":215,"line_end":215,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75738,"byte_end":75787,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75788,"byte_end":75795,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75796,"byte_end":75854,"line_start":218,"line_end":218,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75855,"byte_end":75915,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75916,"byte_end":75941,"line_start":220,"line_end":220,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75942,"byte_end":75964,"line_start":221,"line_end":221,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75965,"byte_end":75981,"line_start":222,"line_end":222,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75982,"byte_end":76006,"line_start":223,"line_end":223,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76007,"byte_end":76016,"line_start":224,"line_end":224,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76017,"byte_end":76024,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76025,"byte_end":76052,"line_start":226,"line_end":226,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76053,"byte_end":76060,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":78507,"byte_end":78513,"line_start":319,"line_end":319,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn <Pix, Map> (&mut ImageBuffer<Pix, Vec<u8>>, &Map) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":78355,"byte_end":78436,"line_start":317,"line_end":317,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":78437,"byte_end":78499,"line_start":318,"line_end":318,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":80067,"byte_end":80079,"line_start":357,"line_end":357,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn <Pix, Map> (&ImageBuffer<Pix, Vec<u8>>, &Map) -> ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":79970,"byte_end":80059,"line_start":356,"line_end":356,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4147},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83771,"byte_end":83778,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":4146},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83746,"byte_end":83766,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4149},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83807,"byte_end":83815,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":4146},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83785,"byte_end":83802,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4151},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83843,"byte_end":83853,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":4146},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83822,"byte_end":83838,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4153},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83884,"byte_end":83892,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":4146},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83860,"byte_end":83879,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4155},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83929,"byte_end":83937,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":4146},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83899,"byte_end":83924,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4146},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83729,"byte_end":83739,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"FilterType::{Nearest, Triangle, CatmullRom, Gaussian, Lanczos3}","parent":null,"children":[{"krate":0,"index":4147},{"krate":0,"index":4149},{"krate":0,"index":4151},{"krate":0,"index":4153},{"krate":0,"index":4155}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81287,"byte_end":81318,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81319,"byte_end":81322,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81323,"byte_end":81338,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81339,"byte_end":81342,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81343,"byte_end":81421,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81422,"byte_end":81441,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81442,"byte_end":81525,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81526,"byte_end":81533,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81534,"byte_end":81613,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81614,"byte_end":81671,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81672,"byte_end":81675,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81676,"byte_end":81698,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81699,"byte_end":81790,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81791,"byte_end":81835,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81836,"byte_end":81839,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81840,"byte_end":81937,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81938,"byte_end":82012,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82013,"byte_end":82053,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82054,"byte_end":82192,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82193,"byte_end":82217,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82218,"byte_end":82230,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82231,"byte_end":82271,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82272,"byte_end":82410,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82411,"byte_end":82435,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82436,"byte_end":82448,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82449,"byte_end":82489,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82490,"byte_end":82630,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82631,"byte_end":82657,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82658,"byte_end":82670,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82671,"byte_end":82711,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82712,"byte_end":82852,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82853,"byte_end":82869,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82870,"byte_end":82882,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82883,"byte_end":82923,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82924,"byte_end":83063,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83064,"byte_end":83093,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83094,"byte_end":83106,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83107,"byte_end":83117,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83118,"byte_end":83121,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83122,"byte_end":83134,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83135,"byte_end":83138,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83139,"byte_end":83213,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83214,"byte_end":83261,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83262,"byte_end":83265,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83266,"byte_end":83298,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83299,"byte_end":83309,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83310,"byte_end":83334,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83335,"byte_end":83357,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83358,"byte_end":83369,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83370,"byte_end":83380,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83381,"byte_end":83406,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83407,"byte_end":83430,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83431,"byte_end":83442,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83443,"byte_end":83453,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83454,"byte_end":83481,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83482,"byte_end":83505,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83506,"byte_end":83517,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83518,"byte_end":83528,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83529,"byte_end":83554,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83555,"byte_end":83579,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83580,"byte_end":83591,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83592,"byte_end":83602,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83603,"byte_end":83628,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83629,"byte_end":83653,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83654,"byte_end":83665,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83666,"byte_end":83678,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":382},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93399,"byte_end":93408,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn <I, P, S> (&I, u32, u32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92653,"byte_end":92710,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92711,"byte_end":92714,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92715,"byte_end":92813,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92814,"byte_end":92909,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92910,"byte_end":92913,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92914,"byte_end":93008,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93009,"byte_end":93106,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93107,"byte_end":93203,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93204,"byte_end":93240,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93241,"byte_end":93244,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93245,"byte_end":93344,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93345,"byte_end":93391,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":101267,"byte_end":101276,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn <I, P, S> (&I, &[f32]) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":101144,"byte_end":101195,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":101196,"byte_end":101259,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103703,"byte_end":103709,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn <I> (&I, u32, u32, FilterType) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103530,"byte_end":103588,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103589,"byte_end":103647,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103648,"byte_end":103695,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":104835,"byte_end":104839,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn <I> (&I, f32) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":104723,"byte_end":104774,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":104775,"byte_end":104827,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105662,"byte_end":105671,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn <I, P, S> (&I, f32, i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105401,"byte_end":105454,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105455,"byte_end":105506,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105507,"byte_end":105570,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105571,"byte_end":105574,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105575,"byte_end":105654,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45895,"byte_end":45899,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn <I> (&mut I, u32, u32, u32, u32) -> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45848,"byte_end":45887,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46193,"byte_end":46201,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"fn <I> (&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46143,"byte_end":46185,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48985,"byte_end":48999,"line_start":129,"line_end":129,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn ((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46813,"byte_end":46876,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46877,"byte_end":46880,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46881,"byte_end":46978,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46979,"byte_end":47064,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47065,"byte_end":47102,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47103,"byte_end":47137,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47138,"byte_end":47189,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47190,"byte_end":47193,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47194,"byte_end":47287,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47288,"byte_end":47387,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47388,"byte_end":47408,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47409,"byte_end":47412,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47413,"byte_end":47469,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47470,"byte_end":47531,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47532,"byte_end":47582,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47583,"byte_end":47586,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47587,"byte_end":47686,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47687,"byte_end":47780,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47781,"byte_end":47854,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47855,"byte_end":47858,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47859,"byte_end":47870,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47871,"byte_end":47901,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47902,"byte_end":47957,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47958,"byte_end":48017,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48018,"byte_end":48086,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48087,"byte_end":48090,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48091,"byte_end":48193,"line_start":100,"line_end":100,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48194,"byte_end":48197,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48198,"byte_end":48209,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48210,"byte_end":48282,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48283,"byte_end":48320,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48321,"byte_end":48324,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48325,"byte_end":48346,"line_start":106,"line_end":106,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48347,"byte_end":48377,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48378,"byte_end":48421,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48422,"byte_end":48443,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48444,"byte_end":48465,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48466,"byte_end":48469,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48470,"byte_end":48533,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48534,"byte_end":48537,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48538,"byte_end":48553,"line_start":114,"line_end":114,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48554,"byte_end":48595,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48596,"byte_end":48625,"line_start":116,"line_end":116,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48626,"byte_end":48645,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48646,"byte_end":48649,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48650,"byte_end":48692,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48693,"byte_end":48696,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48697,"byte_end":48708,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48709,"byte_end":48781,"line_start":122,"line_end":122,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48782,"byte_end":48834,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48835,"byte_end":48875,"line_start":124,"line_end":124,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48876,"byte_end":48931,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48932,"byte_end":48939,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48940,"byte_end":48943,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48944,"byte_end":48977,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":49513,"byte_end":49520,"line_start":147,"line_end":147,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn <I, J> (&mut I, &J, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":49456,"byte_end":49505,"line_start":146,"line_end":146,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50539,"byte_end":50543,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"fn <I, J> (&mut I, &J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50179,"byte_end":50227,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50228,"byte_end":50231,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50232,"byte_end":50246,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50247,"byte_end":50260,"line_start":172,"line_end":172,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50261,"byte_end":50288,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50289,"byte_end":50292,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50293,"byte_end":50308,"line_start":175,"line_end":175,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50309,"byte_end":50359,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50360,"byte_end":50413,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50414,"byte_end":50417,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50418,"byte_end":50466,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50467,"byte_end":50517,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50518,"byte_end":50523,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50524,"byte_end":50531,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51340,"byte_end":51357,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"fn <S, P, I> (&mut I, &P, &P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50842,"byte_end":50892,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50893,"byte_end":50897,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50898,"byte_end":50945,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50946,"byte_end":50950,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50951,"byte_end":50965,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50966,"byte_end":50979,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50980,"byte_end":51020,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51021,"byte_end":51025,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51026,"byte_end":51041,"line_start":203,"line_end":203,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51042,"byte_end":51089,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51090,"byte_end":51144,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51145,"byte_end":51203,"line_start":206,"line_end":206,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51204,"byte_end":51208,"line_start":207,"line_end":207,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51209,"byte_end":51274,"line_start":208,"line_end":208,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51275,"byte_end":51326,"line_start":209,"line_end":209,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51327,"byte_end":51332,"line_start":210,"line_end":210,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52387,"byte_end":52406,"line_start":246,"line_end":246,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"fn <S, P, I> (&mut I, &P, &P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51884,"byte_end":51936,"line_start":230,"line_end":230,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51937,"byte_end":51941,"line_start":231,"line_end":231,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51942,"byte_end":51989,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51990,"byte_end":51993,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51994,"byte_end":52008,"line_start":234,"line_end":234,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52009,"byte_end":52022,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52023,"byte_end":52063,"line_start":236,"line_end":236,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52064,"byte_end":52068,"line_start":237,"line_end":237,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52069,"byte_end":52084,"line_start":238,"line_end":238,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52085,"byte_end":52132,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52133,"byte_end":52187,"line_start":240,"line_end":240,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52188,"byte_end":52246,"line_start":241,"line_end":241,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52247,"byte_end":52251,"line_start":242,"line_end":242,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52252,"byte_end":52319,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52320,"byte_end":52373,"line_start":244,"line_end":244,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52374,"byte_end":52379,"line_start":245,"line_end":245,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":53003,"byte_end":53010,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn <I, J> (&mut I, &J, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52930,"byte_end":52995,"line_start":265,"line_end":265,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":493},{"krate":0,"index":550}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"! Input and output of images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","byte_start":108632,"byte_end":108663,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110860,"byte_end":110866,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109061,"byte_end":109093,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109094,"byte_end":109097,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109098,"byte_end":109191,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109192,"byte_end":109287,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109288,"byte_end":109291,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109292,"byte_end":109304,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109305,"byte_end":109308,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109309,"byte_end":109407,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109408,"byte_end":109505,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109506,"byte_end":109509,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109510,"byte_end":109523,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109524,"byte_end":109552,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109553,"byte_end":109581,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109582,"byte_end":109625,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109626,"byte_end":109676,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109677,"byte_end":109696,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109697,"byte_end":109711,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109712,"byte_end":109719,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109720,"byte_end":109723,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109724,"byte_end":109817,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109818,"byte_end":109914,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109915,"byte_end":110014,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110015,"byte_end":110018,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110114,"byte_end":110142,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110143,"byte_end":110171,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110172,"byte_end":110215,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110216,"byte_end":110240,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110241,"byte_end":110268,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110269,"byte_end":110272,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110273,"byte_end":110303,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110304,"byte_end":110318,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110319,"byte_end":110334,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110335,"byte_end":110338,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110339,"byte_end":110394,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110395,"byte_end":110425,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110426,"byte_end":110467,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110468,"byte_end":110524,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110525,"byte_end":110528,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110529,"byte_end":110562,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110563,"byte_end":110577,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110578,"byte_end":110585,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110586,"byte_end":110589,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110590,"byte_end":110688,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110689,"byte_end":110756,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110757,"byte_end":110760,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110761,"byte_end":110799,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110800,"byte_end":110848,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111387,"byte_end":111390,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"fn (R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111030,"byte_end":111084,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111089,"byte_end":111092,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111097,"byte_end":111180,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111185,"byte_end":111264,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111269,"byte_end":111272,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111277,"byte_end":111333,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111338,"byte_end":111375,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111560,"byte_end":111571,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"fn (R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111503,"byte_end":111548,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111765,"byte_end":111771,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"fn (&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111713,"byte_end":111753,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111906,"byte_end":111916,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"fn (&mut Self, ImageFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111835,"byte_end":111894,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112246,"byte_end":112258,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"fn (&mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111998,"byte_end":112053,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112058,"byte_end":112061,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112066,"byte_end":112160,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112165,"byte_end":112234,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112345,"byte_end":112355,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112311,"byte_end":112333,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112838,"byte_end":112842,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"fn <P> (P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112432,"byte_end":112490,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112495,"byte_end":112498,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112503,"byte_end":112565,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112570,"byte_end":112573,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112578,"byte_end":112672,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112677,"byte_end":112757,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112762,"byte_end":112765,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112770,"byte_end":112826,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114484,"byte_end":114503,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"fn (Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113210,"byte_end":113280,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113285,"byte_end":113288,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113293,"byte_end":113382,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113387,"byte_end":113477,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113482,"byte_end":113532,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113537,"byte_end":113540,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113545,"byte_end":113637,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113642,"byte_end":113730,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113735,"byte_end":113763,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113768,"byte_end":113771,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113776,"byte_end":113867,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113872,"byte_end":113911,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113916,"byte_end":113919,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113924,"byte_end":113936,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113941,"byte_end":113944,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113949,"byte_end":114057,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114062,"byte_end":114154,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114159,"byte_end":114190,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114195,"byte_end":114198,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114203,"byte_end":114216,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114221,"byte_end":114249,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114254,"byte_end":114282,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114287,"byte_end":114330,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114335,"byte_end":114381,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114386,"byte_end":114417,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114422,"byte_end":114441,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114446,"byte_end":114460,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114465,"byte_end":114472,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115461,"byte_end":115476,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"fn (Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115248,"byte_end":115278,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115283,"byte_end":115286,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115291,"byte_end":115366,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115371,"byte_end":115374,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115379,"byte_end":115449,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115870,"byte_end":115876,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"fn (Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115650,"byte_end":115687,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115692,"byte_end":115695,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115700,"byte_end":115775,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115780,"byte_end":115783,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115788,"byte_end":115858,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117947,"byte_end":117951,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"fn <R> (R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117734,"byte_end":117770,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117771,"byte_end":117774,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117775,"byte_end":117821,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117822,"byte_end":117825,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117826,"byte_end":117867,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117868,"byte_end":117894,"line_start":63,"line_end":63,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127730,"byte_end":127742,"line_start":285,"line_end":285,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"fn (&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127469,"byte_end":127509,"line_start":280,"line_end":280,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127510,"byte_end":127513,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127514,"byte_end":127607,"line_start":282,"line_end":282,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127608,"byte_end":127650,"line_start":283,"line_end":283,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127651,"byte_end":127722,"line_start":284,"line_end":284,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":551},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":6610},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":4165},{"krate":0,"index":4173},{"krate":0,"index":4170},{"krate":0,"index":4176},{"krate":0,"index":4196},{"krate":0,"index":4195},{"krate":0,"index":4193},{"krate":0,"index":4189},{"krate":0,"index":4190},{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4183},{"krate":0,"index":4198},{"krate":0,"index":4224},{"krate":0,"index":4223},{"krate":0,"index":4221},{"krate":0,"index":4217},{"krate":0,"index":4218},{"krate":0,"index":4214},{"krate":0,"index":4215},{"krate":0,"index":4204},{"krate":0,"index":4202},{"krate":0,"index":578},{"krate":0,"index":601},{"krate":0,"index":605},{"krate":0,"index":647},{"krate":0,"index":4226},{"krate":0,"index":4235},{"krate":0,"index":4231},{"krate":0,"index":4239},{"krate":0,"index":4248},{"krate":0,"index":4244},{"krate":0,"index":4252},{"krate":0,"index":4274},{"krate":0,"index":4273},{"krate":0,"index":4271},{"krate":0,"index":4267},{"krate":0,"index":4268},{"krate":0,"index":4264},{"krate":0,"index":4265},{"krate":0,"index":4261},{"krate":0,"index":4276},{"krate":0,"index":4299},{"krate":0,"index":4298},{"krate":0,"index":4296},{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4290},{"krate":0,"index":4291},{"krate":0,"index":4287},{"krate":0,"index":652},{"krate":0,"index":665},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":684},{"krate":0,"index":688},{"krate":0,"index":700},{"krate":0,"index":712},{"krate":0,"index":720},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"! Image representations for ffi.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128518,"byte_end":128552,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128553,"byte_end":128556,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128557,"byte_end":128568,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128569,"byte_end":128572,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128573,"byte_end":128671,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"! your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128672,"byte_end":128771,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"! to help you transition from raw memory data to Rust representation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128772,"byte_end":128843,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128844,"byte_end":128847,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128848,"byte_end":128861,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"! use std::ptr;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128862,"byte_end":128879,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"! use std::slice;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128880,"byte_end":128899,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"! use image::Rgb;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128900,"byte_end":128919,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"! use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128920,"byte_end":128969,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! use image::imageops::thumbnail;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128970,"byte_end":129005,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129006,"byte_end":129009,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129010,"byte_end":129026,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129027,"byte_end":129071,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"!     data: *const u8, len: usize,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129072,"byte_end":129108,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"!     layout: *const SampleLayout","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129109,"byte_end":129144,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"! )","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129145,"byte_end":129150,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"!     -> bool","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129151,"byte_end":129166,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"! {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129167,"byte_end":129172,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"!     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129173,"byte_end":129239,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"!     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129240,"byte_end":129290,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129291,"byte_end":129294,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"!     let buffer = FlatSamples {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129295,"byte_end":129329,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!         samples,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129330,"byte_end":129350,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!         layout,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129351,"byte_end":129370,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"!         color_hint: None,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129371,"byte_end":129400,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129401,"byte_end":129411,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129412,"byte_end":129415,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"!     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129416,"byte_end":129470,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"!         Err(_) => return false, // Invalid layout.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129471,"byte_end":129525,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"!         Ok(view) => view,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129526,"byte_end":129555,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129556,"byte_end":129566,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129567,"byte_end":129570,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"!     thumbnail(&view, 64, 64)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129571,"byte_end":129603,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"!         .save(\"output.png\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129604,"byte_end":129635,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"!         .map(|_| true)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129636,"byte_end":129662,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"!         .unwrap_or_else(|_| false)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129663,"byte_end":129701,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"! }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129702,"byte_end":129707,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129708,"byte_end":129715,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129716,"byte_end":129719,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4165},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131710,"byte_end":131721,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4169}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130127,"byte_end":130174,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130175,"byte_end":130178,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130179,"byte_end":130276,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130277,"byte_end":130374,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130375,"byte_end":130471,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130472,"byte_end":130560,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130561,"byte_end":130660,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130661,"byte_end":130759,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130760,"byte_end":130809,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130810,"byte_end":130813,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130814,"byte_end":130905,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130906,"byte_end":131003,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131004,"byte_end":131101,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131102,"byte_end":131199,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131200,"byte_end":131261,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131262,"byte_end":131265,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131266,"byte_end":131314,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131315,"byte_end":131371,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131372,"byte_end":131459,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131460,"byte_end":131496,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131497,"byte_end":131553,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131554,"byte_end":131586,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131587,"byte_end":131627,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131628,"byte_end":131674,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4167},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131799,"byte_end":131806,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":4165},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131736,"byte_end":131790,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4168},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131890,"byte_end":131896,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":4165},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131821,"byte_end":131881,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":4169},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132351,"byte_end":132361,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":4165},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131917,"byte_end":131953,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131958,"byte_end":131961,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131966,"byte_end":132051,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132056,"byte_end":132148,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132153,"byte_end":132242,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132247,"byte_end":132342,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":4176},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132511,"byte_end":132523,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":4177},{"krate":0,"index":4178},{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4181},{"krate":0,"index":4182}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132385,"byte_end":132437,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132438,"byte_end":132448,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4177},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132607,"byte_end":132615,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":4176},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132530,"byte_end":132598,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4178},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132701,"byte_end":132715,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":4176},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132626,"byte_end":132692,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4179},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132777,"byte_end":132782,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":4176},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132729,"byte_end":132768,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4180},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132869,"byte_end":132881,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":4176},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132794,"byte_end":132860,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4181},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132944,"byte_end":132950,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":4176},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132895,"byte_end":132935,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":4182},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133037,"byte_end":133050,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":4176},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132962,"byte_end":133028,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134025,"byte_end":134041,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn (u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133231,"byte_end":133287,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133292,"byte_end":133295,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133300,"byte_end":133395,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133400,"byte_end":133469,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133474,"byte_end":133477,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133482,"byte_end":133489,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133494,"byte_end":133544,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133549,"byte_end":133610,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133615,"byte_end":133673,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133678,"byte_end":133685,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133690,"byte_end":133693,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133698,"byte_end":133710,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133715,"byte_end":133718,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133723,"byte_end":133818,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133823,"byte_end":133914,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133919,"byte_end":134013,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135292,"byte_end":135311,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn (u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134479,"byte_end":134538,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134543,"byte_end":134546,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134551,"byte_end":134641,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134646,"byte_end":134731,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134736,"byte_end":134739,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134744,"byte_end":134751,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134756,"byte_end":134806,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134811,"byte_end":134875,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134880,"byte_end":134941,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134946,"byte_end":134953,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134958,"byte_end":134961,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134966,"byte_end":134978,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134983,"byte_end":134986,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134991,"byte_end":135086,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135091,"byte_end":135181,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135186,"byte_end":135280,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135927,"byte_end":135938,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn (&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135752,"byte_end":135811,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135816,"byte_end":135819,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135824,"byte_end":135895,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135900,"byte_end":135915,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136255,"byte_end":136262,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn (&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136053,"byte_end":136104,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136109,"byte_end":136112,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136117,"byte_end":136210,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136215,"byte_end":136243,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136636,"byte_end":136642,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn (&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136384,"byte_end":136438,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136443,"byte_end":136446,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136451,"byte_end":136541,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136546,"byte_end":136624,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138795,"byte_end":138805,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn (&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136730,"byte_end":136820,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136825,"byte_end":136828,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136833,"byte_end":136928,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136933,"byte_end":137023,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137028,"byte_end":137119,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137124,"byte_end":137181,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137186,"byte_end":137189,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137194,"byte_end":137211,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137216,"byte_end":137219,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137224,"byte_end":137308,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137313,"byte_end":137404,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137409,"byte_end":137412,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137417,"byte_end":137442,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137447,"byte_end":137450,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137455,"byte_end":137509,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137514,"byte_end":137538,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137543,"byte_end":137560,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137565,"byte_end":137590,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137595,"byte_end":137613,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137618,"byte_end":137621,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137626,"byte_end":137637,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137642,"byte_end":137665,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137670,"byte_end":137689,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137694,"byte_end":137736,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137741,"byte_end":137748,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137753,"byte_end":137756,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137761,"byte_end":137853,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137858,"byte_end":137948,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137953,"byte_end":137956,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137961,"byte_end":137989,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137994,"byte_end":137997,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138002,"byte_end":138094,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138099,"byte_end":138193,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138198,"byte_end":138253,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138258,"byte_end":138261,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138266,"byte_end":138290,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138295,"byte_end":138312,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138317,"byte_end":138342,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138347,"byte_end":138365,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138370,"byte_end":138373,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138378,"byte_end":138389,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138394,"byte_end":138410,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138415,"byte_end":138434,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138439,"byte_end":138462,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138467,"byte_end":138496,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138501,"byte_end":138536,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138541,"byte_end":138548,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138553,"byte_end":138556,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138561,"byte_end":138655,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138660,"byte_end":138753,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138758,"byte_end":138783,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139137,"byte_end":139141,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn (&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139071,"byte_end":139125,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":140251,"byte_end":140270,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn (&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139901,"byte_end":139950,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139955,"byte_end":139958,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139963,"byte_end":140056,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":140061,"byte_end":140155,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":140160,"byte_end":140239,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141515,"byte_end":141524,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn (&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141005,"byte_end":141070,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141075,"byte_end":141078,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141083,"byte_end":141176,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141181,"byte_end":141276,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141281,"byte_end":141373,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141378,"byte_end":141472,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141477,"byte_end":141503,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143222,"byte_end":143231,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn (&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":142880,"byte_end":142941,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":142946,"byte_end":142949,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":142954,"byte_end":143043,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143048,"byte_end":143142,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143147,"byte_end":143210,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143505,"byte_end":143510,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn (&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143358,"byte_end":143403,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143408,"byte_end":143411,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143416,"byte_end":143493,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144104,"byte_end":144125,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn (&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143733,"byte_end":143792,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143797,"byte_end":143800,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143805,"byte_end":143894,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143899,"byte_end":143993,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143998,"byte_end":144092,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145056,"byte_end":145071,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn (&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144755,"byte_end":144795,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144800,"byte_end":144803,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144808,"byte_end":144900,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144905,"byte_end":145000,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145005,"byte_end":145044,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145599,"byte_end":145608,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn (&mut Self, u8, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145274,"byte_end":145339,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145344,"byte_end":145347,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145352,"byte_end":145440,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145445,"byte_end":145540,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145545,"byte_end":145587,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146281,"byte_end":146292,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn (&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146106,"byte_end":146165,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146170,"byte_end":146173,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146178,"byte_end":146249,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146254,"byte_end":146269,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146574,"byte_end":146581,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn (&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146372,"byte_end":146423,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146428,"byte_end":146431,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146436,"byte_end":146529,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146534,"byte_end":146562,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146909,"byte_end":146915,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn (&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146657,"byte_end":146711,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146716,"byte_end":146719,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146724,"byte_end":146814,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146819,"byte_end":146897,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147029,"byte_end":147035,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn <T> (&Self) -> FlatSamples<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146983,"byte_end":147017,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147309,"byte_end":147315,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn <T> (&mut Self) -> FlatSamples<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147255,"byte_end":147297,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147594,"byte_end":147600,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn <T> (&Self) -> FlatSamples<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147543,"byte_end":147582,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148873,"byte_end":148883,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn <T> (&Self, u8, u32, u32) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147853,"byte_end":147892,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147897,"byte_end":147900,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147905,"byte_end":148000,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148005,"byte_end":148083,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148088,"byte_end":148091,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148096,"byte_end":148103,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148108,"byte_end":148136,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148141,"byte_end":148200,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148205,"byte_end":148208,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148213,"byte_end":148253,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148258,"byte_end":148308,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148313,"byte_end":148316,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148321,"byte_end":148354,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148359,"byte_end":148409,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148414,"byte_end":148421,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148426,"byte_end":148429,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148434,"byte_end":148524,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148529,"byte_end":148610,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148615,"byte_end":148710,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148715,"byte_end":148802,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148807,"byte_end":148861,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150480,"byte_end":150494,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn <T> (&mut Self, u8, u32, u32) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149070,"byte_end":149117,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149122,"byte_end":149125,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149130,"byte_end":149219,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149224,"byte_end":149311,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149316,"byte_end":149411,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149416,"byte_end":149479,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149484,"byte_end":149487,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149492,"byte_end":149586,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149591,"byte_end":149660,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149665,"byte_end":149668,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149673,"byte_end":149680,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149685,"byte_end":149713,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149718,"byte_end":149781,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149786,"byte_end":149789,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149794,"byte_end":149855,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149860,"byte_end":149911,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149916,"byte_end":149919,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149924,"byte_end":149957,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149962,"byte_end":150016,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150021,"byte_end":150028,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150033,"byte_end":150036,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150041,"byte_end":150131,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150136,"byte_end":150217,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150222,"byte_end":150317,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150322,"byte_end":150409,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150414,"byte_end":150468,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151158,"byte_end":151165,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn <P> (&Self) -> Result<View<&[P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150746,"byte_end":150803,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150808,"byte_end":150811,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150816,"byte_end":150906,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150911,"byte_end":151005,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151010,"byte_end":151104,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151109,"byte_end":151146,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152742,"byte_end":152766,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn <P> (&mut Self) -> Result<View<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151777,"byte_end":151836,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151841,"byte_end":151844,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151849,"byte_end":151941,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151946,"byte_end":152037,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152042,"byte_end":152135,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152140,"byte_end":152171,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152176,"byte_end":152179,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152184,"byte_end":152274,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152279,"byte_end":152373,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152378,"byte_end":152472,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152477,"byte_end":152514,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152519,"byte_end":152522,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152527,"byte_end":152621,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152626,"byte_end":152712,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152717,"byte_end":152730,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154129,"byte_end":154140,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn <P> (&mut Self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153386,"byte_end":153431,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153436,"byte_end":153439,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153444,"byte_end":153534,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153539,"byte_end":153626,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153631,"byte_end":153698,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153703,"byte_end":153706,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153711,"byte_end":153806,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153811,"byte_end":153904,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153909,"byte_end":154004,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154009,"byte_end":154084,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154089,"byte_end":154117,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155137,"byte_end":155145,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn <T> (&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154913,"byte_end":154945,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154950,"byte_end":154953,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154958,"byte_end":155050,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155055,"byte_end":155125,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155456,"byte_end":155468,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn <T> (&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155232,"byte_end":155264,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155269,"byte_end":155272,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155277,"byte_end":155369,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155374,"byte_end":155444,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155899,"byte_end":155910,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn <T> (&Self) -> Option<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155563,"byte_end":155625,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155630,"byte_end":155633,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155638,"byte_end":155733,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155738,"byte_end":155833,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155838,"byte_end":155887,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156327,"byte_end":156342,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn <T> (&mut Self) -> Option<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156256,"byte_end":156315,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156996,"byte_end":157011,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn <P> (Self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156700,"byte_end":156739,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156744,"byte_end":156747,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156752,"byte_end":156848,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156853,"byte_end":156948,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156953,"byte_end":156984,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159847,"byte_end":159857,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn (&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157782,"byte_end":157872,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157877,"byte_end":157880,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157885,"byte_end":157980,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157985,"byte_end":158075,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158080,"byte_end":158171,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158176,"byte_end":158233,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158238,"byte_end":158241,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158246,"byte_end":158263,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158268,"byte_end":158271,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158276,"byte_end":158360,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158365,"byte_end":158456,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158461,"byte_end":158464,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158469,"byte_end":158494,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158499,"byte_end":158502,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158507,"byte_end":158561,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158566,"byte_end":158590,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158595,"byte_end":158612,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158617,"byte_end":158642,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158647,"byte_end":158665,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158670,"byte_end":158673,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158678,"byte_end":158689,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158694,"byte_end":158717,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158722,"byte_end":158741,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158746,"byte_end":158788,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158793,"byte_end":158800,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158805,"byte_end":158808,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158813,"byte_end":158905,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158910,"byte_end":159000,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159005,"byte_end":159008,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159013,"byte_end":159041,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159046,"byte_end":159049,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159054,"byte_end":159146,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159151,"byte_end":159245,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159250,"byte_end":159305,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159310,"byte_end":159313,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159318,"byte_end":159342,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159347,"byte_end":159364,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159369,"byte_end":159394,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159399,"byte_end":159417,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159422,"byte_end":159425,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159430,"byte_end":159441,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159446,"byte_end":159462,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159467,"byte_end":159486,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159491,"byte_end":159514,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159519,"byte_end":159548,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159553,"byte_end":159588,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159593,"byte_end":159600,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159605,"byte_end":159608,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159613,"byte_end":159707,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159712,"byte_end":159805,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159810,"byte_end":159835,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159994,"byte_end":159998,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn (&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159928,"byte_end":159982,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160419,"byte_end":160438,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn (&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160069,"byte_end":160118,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160123,"byte_end":160126,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160131,"byte_end":160224,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160229,"byte_end":160323,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160328,"byte_end":160407,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161019,"byte_end":161028,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn (&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160509,"byte_end":160574,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160579,"byte_end":160582,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160587,"byte_end":160680,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160685,"byte_end":160780,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160785,"byte_end":160877,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160882,"byte_end":160976,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160981,"byte_end":161007,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161453,"byte_end":161462,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn (&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161111,"byte_end":161172,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161177,"byte_end":161180,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161185,"byte_end":161274,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161279,"byte_end":161373,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161378,"byte_end":161441,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161712,"byte_end":161717,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn (&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161565,"byte_end":161610,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161615,"byte_end":161618,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161623,"byte_end":161700,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162196,"byte_end":162217,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn (&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161825,"byte_end":161884,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161889,"byte_end":161892,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161897,"byte_end":161986,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161991,"byte_end":162085,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162090,"byte_end":162184,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162649,"byte_end":162664,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn (&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162348,"byte_end":162388,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162393,"byte_end":162396,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162401,"byte_end":162493,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162498,"byte_end":162593,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162598,"byte_end":162637,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163099,"byte_end":163108,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn (&mut Self, u8, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162774,"byte_end":162839,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162844,"byte_end":162847,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162852,"byte_end":162940,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162945,"byte_end":163040,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163045,"byte_end":163087,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163994,"byte_end":164008,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"fn <P> (&'buf P, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163282,"byte_end":163331,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163336,"byte_end":163339,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163344,"byte_end":163439,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163444,"byte_end":163505,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163510,"byte_end":163513,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163518,"byte_end":163533,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163538,"byte_end":163541,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163546,"byte_end":163553,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163558,"byte_end":163594,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163599,"byte_end":163663,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163668,"byte_end":163671,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163676,"byte_end":163715,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163720,"byte_end":163785,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163790,"byte_end":163793,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163798,"byte_end":163842,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163847,"byte_end":163879,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163884,"byte_end":163887,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163892,"byte_end":163915,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163920,"byte_end":163970,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163975,"byte_end":163982,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4226},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165213,"byte_end":165217,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":4229},{"krate":0,"index":4230}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164511,"byte_end":164563,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164564,"byte_end":164567,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164568,"byte_end":164666,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164667,"byte_end":164716,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164717,"byte_end":164720,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164721,"byte_end":164819,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164820,"byte_end":164919,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164920,"byte_end":164990,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164991,"byte_end":164994,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164995,"byte_end":165017,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165018,"byte_end":165021,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165022,"byte_end":165105,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165106,"byte_end":165173,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165174,"byte_end":165177,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4239},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166063,"byte_end":166070,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":4242},{"krate":0,"index":4243}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165341,"byte_end":165387,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165388,"byte_end":165391,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165392,"byte_end":165489,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165490,"byte_end":165588,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165589,"byte_end":165686,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165687,"byte_end":165728,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165729,"byte_end":165732,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165733,"byte_end":165755,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165756,"byte_end":165759,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165760,"byte_end":165843,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165844,"byte_end":165881,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165882,"byte_end":165955,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165956,"byte_end":166023,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166024,"byte_end":166027,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4253},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166778,"byte_end":166786,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":4252},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166655,"byte_end":166695,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166700,"byte_end":166703,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166708,"byte_end":166773,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4255},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166943,"byte_end":166961,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":4252},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166793,"byte_end":166851,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166856,"byte_end":166859,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166864,"byte_end":166938,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4258},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167570,"byte_end":167580,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":4252},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166980,"byte_end":167033,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167038,"byte_end":167041,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167046,"byte_end":167137,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167142,"byte_end":167182,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167187,"byte_end":167190,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167195,"byte_end":167290,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167295,"byte_end":167386,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167391,"byte_end":167486,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167491,"byte_end":167565,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":4252},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166643,"byte_end":166648,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"Error::{TooLarge, NormalFormRequired, WrongColor}","parent":null,"children":[{"krate":0,"index":4253},{"krate":0,"index":4255},{"krate":0,"index":4258}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166194,"byte_end":166275,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166276,"byte_end":166279,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166280,"byte_end":166353,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166354,"byte_end":166430,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166431,"byte_end":166508,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166509,"byte_end":166582,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4277},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168079,"byte_end":168088,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":4276},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167856,"byte_end":167885,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167890,"byte_end":167893,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167898,"byte_end":167981,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167986,"byte_end":168074,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4279},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168318,"byte_end":168329,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":4276},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168095,"byte_end":168126,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168131,"byte_end":168134,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168139,"byte_end":168227,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168232,"byte_end":168313,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4281},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168613,"byte_end":168624,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":4276},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168336,"byte_end":168363,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168368,"byte_end":168371,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168376,"byte_end":168469,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168474,"byte_end":168564,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168569,"byte_end":168608,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4283},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168834,"byte_end":168848,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":4276},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168631,"byte_end":168696,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168701,"byte_end":168704,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168709,"byte_end":168802,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168807,"byte_end":168829,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4285},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169064,"byte_end":169081,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":4276},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168855,"byte_end":168923,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168928,"byte_end":168931,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168936,"byte_end":169029,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169034,"byte_end":169059,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4276},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167839,"byte_end":167849,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"NormalForm::{Unaliased, PixelPacked, ImagePacked, RowMajorPacked, ColumnMajorPacked}","parent":null,"children":[{"krate":0,"index":4277},{"krate":0,"index":4279},{"krate":0,"index":4281},{"krate":0,"index":4283},{"krate":0,"index":4285}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167596,"byte_end":167634,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167635,"byte_end":167638,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167639,"byte_end":167738,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167739,"byte_end":167778,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169289,"byte_end":169299,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn (Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169170,"byte_end":169201,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169206,"byte_end":169209,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169214,"byte_end":169277,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169782,"byte_end":169786,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn (&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169361,"byte_end":169412,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169417,"byte_end":169420,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169425,"byte_end":169514,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169519,"byte_end":169612,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169617,"byte_end":169704,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169709,"byte_end":169770,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170065,"byte_end":170072,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn (&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169851,"byte_end":169891,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169896,"byte_end":169899,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169904,"byte_end":169994,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169999,"byte_end":170053,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170391,"byte_end":170401,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn (&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170132,"byte_end":170194,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170199,"byte_end":170202,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170207,"byte_end":170297,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170302,"byte_end":170379,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171275,"byte_end":171289,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn (&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170733,"byte_end":170803,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170808,"byte_end":170811,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170816,"byte_end":170910,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170915,"byte_end":171010,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171015,"byte_end":171082,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171087,"byte_end":171090,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171095,"byte_end":171189,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171194,"byte_end":171263,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171866,"byte_end":171876,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn (&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171684,"byte_end":171774,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171779,"byte_end":171782,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171787,"byte_end":171854,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172210,"byte_end":172221,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn (&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171947,"byte_end":172009,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172014,"byte_end":172017,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172022,"byte_end":172113,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172118,"byte_end":172198,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172678,"byte_end":172693,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn (&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172314,"byte_end":172384,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172389,"byte_end":172392,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172397,"byte_end":172491,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172496,"byte_end":172592,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172597,"byte_end":172666,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173216,"byte_end":173225,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn (&mut Self, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172886,"byte_end":172913,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172918,"byte_end":172921,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172926,"byte_end":173013,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173018,"byte_end":173111,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173116,"byte_end":173204,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174229,"byte_end":174240,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn (Self) -> Result<ViewMut<Buffer, P>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173380,"byte_end":173438,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173443,"byte_end":173446,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173451,"byte_end":173546,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173551,"byte_end":173641,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173646,"byte_end":173734,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173739,"byte_end":173815,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173820,"byte_end":173823,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173828,"byte_end":173835,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173840,"byte_end":173866,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173871,"byte_end":173892,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173897,"byte_end":173962,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173967,"byte_end":174036,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174041,"byte_end":174044,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174049,"byte_end":174080,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174085,"byte_end":174088,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174093,"byte_end":174153,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174158,"byte_end":174205,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174210,"byte_end":174217,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174881,"byte_end":174891,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn (Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174762,"byte_end":174793,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174798,"byte_end":174801,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174806,"byte_end":174869,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175375,"byte_end":175379,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn (&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174953,"byte_end":175005,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175010,"byte_end":175013,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175018,"byte_end":175107,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175112,"byte_end":175205,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175210,"byte_end":175297,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175302,"byte_end":175363,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175752,"byte_end":175759,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn (&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175444,"byte_end":175484,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175489,"byte_end":175492,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175497,"byte_end":175587,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175592,"byte_end":175684,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175689,"byte_end":175740,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176001,"byte_end":176011,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn (&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175819,"byte_end":175909,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175914,"byte_end":175917,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175922,"byte_end":175989,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176322,"byte_end":176332,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn (&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176082,"byte_end":176125,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176130,"byte_end":176133,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176138,"byte_end":176228,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176233,"byte_end":176310,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176957,"byte_end":176971,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn (&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176711,"byte_end":176760,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176765,"byte_end":176768,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176773,"byte_end":176863,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176868,"byte_end":176945,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177582,"byte_end":177593,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn (&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177319,"byte_end":177381,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177386,"byte_end":177389,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177394,"byte_end":177485,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177490,"byte_end":177570,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177792,"byte_end":177807,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn (&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177725,"byte_end":177780,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":178275,"byte_end":178284,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn (&mut Self, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177945,"byte_end":177972,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177977,"byte_end":177980,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177985,"byte_end":178072,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":178077,"byte_end":178170,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":178175,"byte_end":178263,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":730},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":943}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8771,"byte_end":8794,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of BMP Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191460,"byte_end":191500,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191501,"byte_end":191504,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191505,"byte_end":191563,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191564,"byte_end":191567,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191568,"byte_end":191588,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191589,"byte_end":191681,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"!  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191682,"byte_end":191736,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191737,"byte_end":191740,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":841},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209877,"byte_end":209887,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209848,"byte_end":209865,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212455,"byte_end":212458,"line_start":632,"line_end":632,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"fn (R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212382,"byte_end":212443,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":224256,"byte_end":224283,"line_start":945,"line_end":945,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BmpDecoder<R>>::read_metadata_in_ico_format","value":"fn (&mut Self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":224202,"byte_end":224225,"line_start":943,"line_end":943,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":919},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244212,"byte_end":244221,"line_start":1419,"line_end":1419,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244155,"byte_end":244200,"line_start":1418,"line_end":1418,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246847,"byte_end":246857,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":963}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246795,"byte_end":246835,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":964},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247095,"byte_end":247105,"line_start":26,"line_end":26,"column_start":10,"column_end":20},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BmpEncoder","parent":null,"children":[],"decl_id":null,"docs":" BMP Encoder","sig":null,"attributes":[{"value":"/ BMP Encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246897,"byte_end":246912,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246913,"byte_end":246916,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ An alias of [`BmpEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246917,"byte_end":246948,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246949,"byte_end":246952,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246953,"byte_end":246969,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246970,"byte_end":246973,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [`BmpEncoder`]: struct.BmpEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246974,"byte_end":247016,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247017,"byte_end":247036,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `BmpEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247037,"byte_end":247085,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247254,"byte_end":247257,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"fn (&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247183,"byte_end":247242,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247465,"byte_end":247471,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"fn (&mut Self, &[u8], u32, u32, color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247326,"byte_end":247359,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247364,"byte_end":247416,"line_start":35,"line_end":35,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247421,"byte_end":247453,"line_start":36,"line_end":36,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":985},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dds","qualname":"::dds","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":4489},{"krate":0,"index":4522},{"krate":0,"index":4521},{"krate":0,"index":4519},{"krate":0,"index":4516},{"krate":0,"index":4512},{"krate":0,"index":4513},{"krate":0,"index":4509},{"krate":0,"index":4510},{"krate":0,"index":4503},{"krate":0,"index":4501},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":4524},{"krate":0,"index":4534},{"krate":0,"index":4536},{"krate":0,"index":4545},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1029}],"decl_id":null,"docs":"  Decoding of DDS images","sig":null,"attributes":[{"value":"cfg(feature = \"dds\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8808,"byte_end":8831,"line_start":214,"line_end":214,"column_start":1,"column_end":24}},{"value":"!  Decoding of DDS images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":258423,"byte_end":258450,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":258451,"byte_end":258454,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  DDS (DirectDraw Surface) is a container format for storing DXT (S3TC) compressed images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":258455,"byte_end":258548,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":258549,"byte_end":258552,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":258553,"byte_end":258573,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide> - Description of the DDS format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":258574,"byte_end":258697,"line_start":6,"line_end":6,"column_start":1,"column_end":124}}]},{"kind":"Struct","id":{"krate":0,"index":1022},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":263129,"byte_end":263139,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"DdsDecoder","qualname":"::dds::DdsDecoder","value":"DdsDecoder {  }","parent":null,"children":[{"krate":0,"index":1024}],"decl_id":null,"docs":" The representation of a DDS decoder\n","sig":null,"attributes":[{"value":"/ The representation of a DDS decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":263078,"byte_end":263117,"line_start":154,"line_end":154,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":263283,"byte_end":263286,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<DdsDecoder<R>>::new","value":"fn (R) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":263214,"byte_end":263271,"line_start":160,"line_end":160,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":1038},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":4547},{"krate":0,"index":4563},{"krate":0,"index":4562},{"krate":0,"index":4560},{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1063},{"krate":0,"index":1070},{"krate":0,"index":1074},{"krate":0,"index":1083},{"krate":0,"index":1091},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1133},{"krate":0,"index":1144},{"krate":0,"index":1148},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8845,"byte_end":8868,"line_start":216,"line_end":216,"column_start":1,"column_end":24}},{"value":"!  Decoding of DXT (S3TC) compression","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265187,"byte_end":265226,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265227,"byte_end":265230,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  DXT is an image format that supports lossy compression","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265231,"byte_end":265290,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265291,"byte_end":265294,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265295,"byte_end":265315,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265316,"byte_end":265468,"line_start":6,"line_end":6,"column_start":1,"column_end":153}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265469,"byte_end":265472,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"!  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265473,"byte_end":265602,"line_start":8,"line_end":8,"column_start":1,"column_end":130}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4548},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266384,"byte_end":266388,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":4547},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[{"value":"/ The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266260,"byte_end":266326,"line_start":28,"line_end":28,"column_start":5,"column_end":71}},{"value":"/ compressed into an 8 byte block of DXT1 data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266331,"byte_end":266379,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4550},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266519,"byte_end":266523,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":4547},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[{"value":"/ The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266394,"byte_end":266461,"line_start":31,"line_end":31,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT3 data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266466,"byte_end":266514,"line_start":32,"line_end":32,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4552},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266654,"byte_end":266658,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":4547},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[{"value":"/ The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266529,"byte_end":266596,"line_start":34,"line_end":34,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT5 data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266601,"byte_end":266649,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":4547},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266243,"byte_end":266253,"line_start":27,"line_end":27,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"DXTVariant::{DXT1, DXT3, DXT5}","parent":null,"children":[{"krate":0,"index":4548},{"krate":0,"index":4550},{"krate":0,"index":4552}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha","sig":null,"attributes":[{"value":"/ What version of DXT compression are we using?","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265877,"byte_end":265926,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ Note that DXT2 and DXT4 are left away as they're","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265927,"byte_end":265979,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/ just DXT3 and DXT5 with premultiplied alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":265980,"byte_end":266027,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266028,"byte_end":266031,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: The name of this enum will be changed to [`DxtVariant`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266032,"byte_end":266104,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266105,"byte_end":266108,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ TODO: rename to [`DxtVariant`]","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266109,"byte_end":266143,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266144,"byte_end":266147,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`DxtVariant`]: type.DxtVariant.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266148,"byte_end":266188,"line_start":25,"line_end":25,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1058},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266855,"byte_end":266865,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"DxtVariant","qualname":"::dxt::DxtVariant","value":"DXTVariant","parent":null,"children":[],"decl_id":null,"docs":" DXT compression version.","sig":null,"attributes":[{"value":"/ DXT compression version.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266663,"byte_end":266691,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266692,"byte_end":266695,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DXTVariant`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266696,"byte_end":266727,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266728,"byte_end":266731,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ TODO: remove when [`DXTVariant`] is renamed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266732,"byte_end":266780,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266781,"byte_end":266784,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`DXTVariant`]: enum.DXTVariant.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266785,"byte_end":266825,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266826,"byte_end":266845,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267497,"byte_end":267507,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"color_type","qualname":"<DXTVariant>::color_type","value":"fn (Self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the color type that is stored in this DXT variant\n","sig":null,"attributes":[{"value":"/ Returns the color type that is stored in this DXT variant","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267424,"byte_end":267485,"line_start":67,"line_end":67,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1063},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267714,"byte_end":267724,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"DxtDecoder","qualname":"::dxt::DxtDecoder","value":"DxtDecoder {  }","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[{"value":"/ DXT decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267687,"byte_end":267702,"line_start":76,"line_end":76,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":268304,"byte_end":268307,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtDecoder<R>>::new","value":"fn (R, u32, u32, DXTVariant) -> Result<DxtDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[{"value":"/ Create a new DXT decoder that decodes from the stream ```r```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267873,"byte_end":267939,"line_start":86,"line_end":86,"column_start":5,"column_end":71}},{"value":"/ As DXT is often stored as raw buffers with the width/height","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267944,"byte_end":268007,"line_start":87,"line_end":87,"column_start":5,"column_end":68}},{"value":"/ somewhere else the width and height of the image need","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":268012,"byte_end":268069,"line_start":88,"line_end":88,"column_start":5,"column_end":62}},{"value":"/ to be passed in ```width``` and ```height```, as well as the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":268074,"byte_end":268138,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ DXT variant in ```variant```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":268143,"byte_end":268176,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/ width and height are required to be powers of 2 and at least 4.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":268181,"byte_end":268248,"line_start":91,"line_end":91,"column_start":5,"column_end":72}},{"value":"/ otherwise an error will be returned","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":268253,"byte_end":268292,"line_start":92,"line_end":92,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1091},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271677,"byte_end":271686,"line_start":194,"line_end":194,"column_start":12,"column_end":21},"name":"DxtReader","qualname":"::dxt::DxtReader","value":"DxtReader {  }","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271651,"byte_end":271665,"line_start":193,"line_end":193,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1095},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271951,"byte_end":271960,"line_start":208,"line_end":208,"column_start":10,"column_end":19},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DxtReader<R>","parent":null,"children":[],"decl_id":null,"docs":" DXT reader","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271758,"byte_end":271772,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271773,"byte_end":271776,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DxtReader`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271777,"byte_end":271807,"line_start":201,"line_end":201,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271808,"byte_end":271811,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271812,"byte_end":271828,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271829,"byte_end":271832,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ [`DxtReader`]: struct.DxtReader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271833,"byte_end":271873,"line_start":205,"line_end":205,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271874,"byte_end":271893,"line_start":206,"line_end":206,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `DxtReader` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":271894,"byte_end":271941,"line_start":207,"line_end":207,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1101},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272222,"byte_end":272232,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"DxtEncoder","qualname":"::dxt::DxtEncoder","value":"DxtEncoder {  }","parent":null,"children":[{"krate":0,"index":1103}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272195,"byte_end":272210,"line_start":217,"line_end":217,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1104},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272456,"byte_end":272466,"line_start":231,"line_end":231,"column_start":10,"column_end":20},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" DXT encoder","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272258,"byte_end":272273,"line_start":222,"line_end":222,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272274,"byte_end":272277,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DxtEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272278,"byte_end":272309,"line_start":224,"line_end":224,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272310,"byte_end":272313,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272314,"byte_end":272330,"line_start":226,"line_end":226,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272331,"byte_end":272334,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ [`DxtEncoder`]: struct.DxtEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272335,"byte_end":272377,"line_start":228,"line_end":228,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272378,"byte_end":272397,"line_start":229,"line_end":229,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `DxtEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272398,"byte_end":272446,"line_start":230,"line_end":230,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272593,"byte_end":272596,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtEncoder<W>>::new","value":"fn (W) -> DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272523,"byte_end":272581,"line_start":234,"line_end":234,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272860,"byte_end":272866,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"encode","qualname":"<DxtEncoder<W>>::encode","value":"fn (Self, &[u8], u32, u32, DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.color_type()\n","sig":null,"attributes":[{"value":"/ Encodes the image data ```data```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272658,"byte_end":272695,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272700,"byte_end":272752,"line_start":240,"line_end":240,"column_start":5,"column_end":57}},{"value":"/ in ```DXTVariant``` ```variant```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272757,"byte_end":272794,"line_start":241,"line_end":241,"column_start":5,"column_end":42}},{"value":"/ data is assumed to be in variant.color_type()","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272799,"byte_end":272848,"line_start":242,"line_end":242,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1160},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":6804},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":6824},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1202},{"krate":0,"index":1207},{"krate":0,"index":1211},{"krate":0,"index":1221},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1236},{"krate":0,"index":1240},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1261}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8882,"byte_end":8905,"line_start":218,"line_end":218,"column_start":1,"column_end":24}},{"value":"!  Decoding of GIF Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":294872,"byte_end":294899,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":294900,"byte_end":294903,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":294904,"byte_end":294997,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":294998,"byte_end":295001,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295002,"byte_end":295022,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295023,"byte_end":295102,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295103,"byte_end":295106,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295107,"byte_end":295121,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"! ```rust,no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295122,"byte_end":295140,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"! use image::gif::{GifDecoder, GifEncoder};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295141,"byte_end":295186,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"! use image::{ImageDecoder, AnimationDecoder};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295187,"byte_end":295235,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"! use std::fs::File;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295236,"byte_end":295258,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"! # fn main() -> std::io::Result<()> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295259,"byte_end":295299,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! // Decode a gif into frames","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295300,"byte_end":295331,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"! let file_in = File::open(\"foo.gif\")?;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295332,"byte_end":295373,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"! let mut decoder = GifDecoder::new(file_in).unwrap();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295374,"byte_end":295430,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"! let frames = decoder.into_frames();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295431,"byte_end":295470,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"! let frames = frames.collect_frames().expect(\"error decoding gif\");","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295471,"byte_end":295541,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295542,"byte_end":295545,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! // Encode frames into a gif and save to a file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295546,"byte_end":295596,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"! let mut file_out = File::open(\"out.gif\")?;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295597,"byte_end":295643,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"! let mut encoder = GifEncoder::new(file_out);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295644,"byte_end":295692,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"! encoder.encode_frames(frames.into_iter());","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295693,"byte_end":295739,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"! # Ok(())","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295740,"byte_end":295752,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"! # }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295753,"byte_end":295760,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295761,"byte_end":295768,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":295769,"byte_end":295802,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1196},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296387,"byte_end":296397,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"GifDecoder","qualname":"::gif::GifDecoder","value":"GifDecoder {  }","parent":null,"children":[{"krate":0,"index":1198}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296360,"byte_end":296375,"line_start":46,"line_end":46,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296548,"byte_end":296551,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<GifDecoder<R>>::new","value":"fn (R) -> ImageResult<GifDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296474,"byte_end":296536,"line_start":52,"line_end":52,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1202},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296852,"byte_end":296861,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296795,"byte_end":296840,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1240},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305816,"byte_end":305826,"line_start":293,"line_end":293,"column_start":12,"column_end":22},"name":"GifEncoder","qualname":"::gif::GifEncoder","value":"GifEncoder {  }","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305788,"byte_end":305804,"line_start":292,"line_end":292,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1244},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306100,"byte_end":306107,"line_start":307,"line_end":307,"column_start":10,"column_end":17},"name":"Encoder","qualname":"::gif::Encoder","value":"GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" GIF encoder","sig":null,"attributes":[{"value":"/ GIF encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305902,"byte_end":305917,"line_start":298,"line_end":298,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305918,"byte_end":305921,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ An alias of [`GifEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305922,"byte_end":305953,"line_start":300,"line_end":300,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305954,"byte_end":305957,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305958,"byte_end":305974,"line_start":302,"line_end":302,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305975,"byte_end":305978,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ [`GifEncoder`]: struct.GifEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305979,"byte_end":306021,"line_start":304,"line_end":304,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306022,"byte_end":306041,"line_start":305,"line_end":305,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `GifEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306042,"byte_end":306090,"line_start":306,"line_end":306,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306206,"byte_end":306209,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<GifEncoder<W>>::new","value":"fn (W) -> GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306164,"byte_end":306194,"line_start":310,"line_end":310,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306370,"byte_end":306376,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"encode","qualname":"<GifEncoder<W>>::encode","value":"fn (&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode a single image.\n","sig":null,"attributes":[{"value":"/ Encode a single image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306332,"byte_end":306358,"line_start":318,"line_end":318,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307091,"byte_end":307103,"line_start":340,"line_end":340,"column_start":12,"column_end":24},"name":"encode_frame","qualname":"<GifEncoder<W>>::encode_frame","value":"fn (&mut Self, animation::Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode one frame of animation.\n","sig":null,"attributes":[{"value":"/ Encode one frame of animation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307045,"byte_end":307079,"line_start":339,"line_end":339,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307389,"byte_end":307402,"line_start":347,"line_end":347,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<GifEncoder<W>>::encode_frames","value":"fn <F> (&mut Self, F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[{"value":"/ Encodes Frames.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307259,"byte_end":307278,"line_start":345,"line_end":345,"column_start":5,"column_end":24}},{"value":"/ Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307283,"byte_end":307377,"line_start":346,"line_end":346,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307880,"byte_end":307897,"line_start":360,"line_end":360,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<GifEncoder<W>>::try_encode_frames","value":"fn <F> (&mut Self, F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[{"value":"/ Try to encode a collection of `ImageResult<animation::Frame>` objects.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307625,"byte_end":307699,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ Use this function to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307704,"byte_end":307773,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/ Whenever an `Err` item is encountered, that value is returned without further actions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":307778,"byte_end":307868,"line_start":359,"line_end":359,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1264},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::hdr","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1441},{"krate":0,"index":1494},{"krate":0,"index":1495}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8919,"byte_end":8942,"line_start":220,"line_end":220,"column_start":1,"column_end":24}},{"value":"!  Decoding of Radiance HDR Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310569,"byte_end":310605,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310606,"byte_end":310609,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder for Radiance HDR images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310610,"byte_end":310648,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310649,"byte_end":310652,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310653,"byte_end":310673,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310674,"byte_end":310677,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"!  * <http://radsite.lbl.gov/radiance/refer/filefmts.pdf>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310678,"byte_end":310737,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"!  * <http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310738,"byte_end":310795,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/mod.rs","byte_start":310796,"byte_end":310799,"line_start":9,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4638},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315358,"byte_end":315368,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"HdrAdapter","qualname":"::hdr::decoder::HdrAdapter","value":"HdrAdapter {  }","parent":null,"children":[{"krate":0,"index":4640},{"krate":0,"index":4641}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[{"value":"/ Adapter to conform to ```ImageDecoder``` trait","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315279,"byte_end":315329,"line_start":116,"line_end":116,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1312},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315671,"byte_end":315681,"line_start":133,"line_end":133,"column_start":10,"column_end":20},"name":"HDRAdapter","qualname":"::hdr::decoder::HDRAdapter","value":"HdrAdapter<R>","parent":null,"children":[],"decl_id":null,"docs":" HDR Adapter","sig":null,"attributes":[{"value":"/ HDR Adapter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315473,"byte_end":315488,"line_start":124,"line_end":124,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315489,"byte_end":315492,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrAdapter`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315493,"byte_end":315524,"line_start":126,"line_end":126,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315525,"byte_end":315528,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315529,"byte_end":315545,"line_start":128,"line_end":128,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315546,"byte_end":315549,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ [`HdrAdapter`]: struct.HdrAdapter.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315550,"byte_end":315592,"line_start":130,"line_end":130,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315593,"byte_end":315612,"line_start":131,"line_end":131,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrAdapter` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315613,"byte_end":315661,"line_start":132,"line_end":132,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315771,"byte_end":315774,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrAdapter<R>>::new","value":"fn (R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[{"value":"/ Creates adapter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315740,"byte_end":315759,"line_start":136,"line_end":136,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":316047,"byte_end":316060,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HdrAdapter<R>>::new_nonstrict","value":"fn (R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[{"value":"/ Allows reading old Radiance HDR images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315993,"byte_end":316035,"line_start":146,"line_end":146,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1319},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":317037,"byte_end":317046,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":316980,"byte_end":317025,"line_start":175,"line_end":175,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1343},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318490,"byte_end":318499,"line_start":227,"line_end":227,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[{"value":"/ Radiance HDR file signature","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318448,"byte_end":318479,"line_start":226,"line_end":226,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4645},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318617,"byte_end":318627,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"HdrDecoder","qualname":"::hdr::decoder::HdrDecoder","value":"HdrDecoder {  }","parent":null,"children":[{"krate":0,"index":4647},{"krate":0,"index":4648},{"krate":0,"index":4649},{"krate":0,"index":4650}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[{"value":"/ An Radiance HDR decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318561,"byte_end":318588,"line_start":230,"line_end":230,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":4654},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318852,"byte_end":318862,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"Rgbe8Pixel","qualname":"::hdr::decoder::Rgbe8Pixel","value":"Rgbe8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":4655},{"krate":0,"index":4657}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318702,"byte_end":318775,"line_start":239,"line_end":239,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318776,"byte_end":318786,"line_start":240,"line_end":240,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4655},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318898,"byte_end":318899,"line_start":244,"line_end":244,"column_start":9,"column_end":10},"name":"c","qualname":"::hdr::decoder::Rgbe8Pixel::c","value":"[u8; 3]","parent":{"krate":0,"index":4654},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[{"value":"/ Color components","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318869,"byte_end":318889,"line_start":243,"line_end":243,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":4657},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318935,"byte_end":318936,"line_start":246,"line_end":246,"column_start":9,"column_end":10},"name":"e","qualname":"::hdr::decoder::Rgbe8Pixel::e","value":"u8","parent":{"krate":0,"index":4654},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[{"value":"/ Exponent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318914,"byte_end":318926,"line_start":245,"line_end":245,"column_start":5,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1345},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319201,"byte_end":319211,"line_start":258,"line_end":258,"column_start":10,"column_end":20},"name":"RGBE8Pixel","qualname":"::hdr::decoder::RGBE8Pixel","value":"Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318945,"byte_end":319018,"line_start":249,"line_end":249,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319019,"byte_end":319022,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ An alias of [`Rgbe8Pixel`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319023,"byte_end":319054,"line_start":251,"line_end":251,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319055,"byte_end":319058,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319059,"byte_end":319075,"line_start":253,"line_end":253,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319076,"byte_end":319079,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`Rgbe8Pixel`]: struct.Rgbe8Pixel.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319080,"byte_end":319122,"line_start":255,"line_end":255,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319123,"byte_end":319142,"line_start":256,"line_end":256,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `Rgbe8Pixel` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319143,"byte_end":319191,"line_start":257,"line_end":257,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1346},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319279,"byte_end":319284,"line_start":261,"line_end":261,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::hdr::decoder::rgbe8","value":"fn (u8, u8, u8, u8) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[{"value":"/ Creates ```RGBE8Pixel``` from components","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319227,"byte_end":319271,"line_start":260,"line_end":260,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319473,"byte_end":319479,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<Rgbe8Pixel>::to_hdr","value":"fn (Self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319389,"byte_end":319447,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319452,"byte_end":319461,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320239,"byte_end":320245,"line_start":290,"line_end":290,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<Rgbe8Pixel>::to_ldr","value":"fn <T> (Self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319974,"byte_end":320048,"line_start":282,"line_end":282,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320053,"byte_end":320056,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320061,"byte_end":320110,"line_start":284,"line_end":284,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320115,"byte_end":320118,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320123,"byte_end":320134,"line_start":286,"line_end":286,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320139,"byte_end":320142,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Panics when ```T::max_value()``` cannot be represented as f32.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320147,"byte_end":320213,"line_start":288,"line_end":288,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320218,"byte_end":320227,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320631,"byte_end":320649,"line_start":303,"line_end":303,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<Rgbe8Pixel>::to_ldr_scale_gamma","value":"fn <T> (Self, f32, f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"/ Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320338,"byte_end":320404,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320409,"byte_end":320412,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320417,"byte_end":320466,"line_start":296,"line_end":296,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320471,"byte_end":320474,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320479,"byte_end":320490,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320495,"byte_end":320498,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ Panics when T::max_value() cannot be represented as f32.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320503,"byte_end":320563,"line_start":300,"line_end":300,"column_start":5,"column_end":65}},{"value":"/ Panics when scale or gamma is NaN","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320568,"byte_end":320605,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":320610,"byte_end":320619,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321857,"byte_end":321860,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrDecoder<R>>::new","value":"fn (R) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HdrDecoder\n strict mode is enabled\n","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321708,"byte_end":321763,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/ if the header is valid, creates HdrDecoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321768,"byte_end":321814,"line_start":332,"line_end":332,"column_start":5,"column_end":51}},{"value":"/ strict mode is enabled","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321819,"byte_end":321845,"line_start":333,"line_end":333,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322268,"byte_end":322283,"line_start":345,"line_end":345,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HdrDecoder<R>>::with_strictness","value":"fn (R, bool) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HdrDecoder```.","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```reader```,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321965,"byte_end":322026,"line_start":338,"line_end":338,"column_start":5,"column_end":66}},{"value":"/ if the header is valid, creates ```HdrDecoder```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322031,"byte_end":322084,"line_start":339,"line_end":339,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322089,"byte_end":322092,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ strict enables strict mode","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322097,"byte_end":322127,"line_start":341,"line_end":341,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322132,"byte_end":322135,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Warning! Reading wrong file in non-strict mode","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322140,"byte_end":322190,"line_start":343,"line_end":343,"column_start":5,"column_end":55}},{"value":"/   could consume file size worth of memory in the process.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":322195,"byte_end":322256,"line_start":344,"line_end":344,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":324836,"byte_end":324844,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HdrDecoder<R>>::metadata","value":"fn (&Self) -> HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[{"value":"/ Returns file metadata. Refer to ```HDRMetadata``` for details.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":324758,"byte_end":324824,"line_start":411,"line_end":411,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":324975,"byte_end":324992,"line_start":417,"line_end":417,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HdrDecoder<R>>::read_image_native","value":"fn (Self) -> ImageResult<Vec<Rgbe8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of RGBE8 pixels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":324906,"byte_end":324963,"line_start":416,"line_end":416,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":325625,"byte_end":325645,"line_start":432,"line_end":432,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HdrDecoder<R>>::read_image_transform","value":"fn <T, F> (Self, F, &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of transformed pixels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":325550,"byte_end":325613,"line_start":431,"line_end":431,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":326784,"byte_end":326798,"line_start":468,"line_end":468,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HdrDecoder<R>>::read_image_ldr","value":"fn (Self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<u8> pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":326681,"byte_end":326741,"line_start":466,"line_end":466,"column_start":5,"column_end":65}},{"value":"/ scale = 1, gamma = 2.2","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":326746,"byte_end":326772,"line_start":467,"line_end":467,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327102,"byte_end":327116,"line_start":476,"line_end":476,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HdrDecoder<R>>::read_image_hdr","value":"fn (Self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<f32> pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327021,"byte_end":327082,"line_start":474,"line_end":474,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327087,"byte_end":327090,"line_start":475,"line_end":475,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1376},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327927,"byte_end":327950,"line_start":501,"line_end":501,"column_start":12,"column_end":35},"name":"HdrImageDecoderIterator","qualname":"::hdr::decoder::HdrImageDecoderIterator","value":"HdrImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327870,"byte_end":327915,"line_start":500,"line_end":500,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1385},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328551,"byte_end":328574,"line_start":520,"line_end":520,"column_start":10,"column_end":33},"name":"HDRImageDecoderIterator","qualname":"::hdr::decoder::HDRImageDecoderIterator","value":"HdrImageDecoderIterator<R>","parent":null,"children":[],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328271,"byte_end":328316,"line_start":511,"line_end":511,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328317,"byte_end":328320,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrImageDecoderIterator`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328321,"byte_end":328365,"line_start":513,"line_end":513,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328366,"byte_end":328369,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328370,"byte_end":328386,"line_start":515,"line_end":515,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328387,"byte_end":328390,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ [`HdrImageDecoderIterator`]: struct.HdrImageDecoderIterator.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328391,"byte_end":328459,"line_start":517,"line_end":517,"column_start":1,"column_end":69}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328460,"byte_end":328479,"line_start":518,"line_end":518,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrImageDecoderIterator` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328480,"byte_end":328541,"line_start":519,"line_end":519,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":4674},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":335853,"byte_end":335864,"line_start":734,"line_end":734,"column_start":12,"column_end":23},"name":"HdrMetadata","qualname":"::hdr::decoder::HdrMetadata","value":"HdrMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":4675},{"krate":0,"index":4676},{"krate":0,"index":4677},{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4681}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[{"value":"/ Metadata for Radiance HDR image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":335782,"byte_end":335817,"line_start":732,"line_end":732,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4675},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336002,"byte_end":336007,"line_start":737,"line_end":737,"column_start":9,"column_end":14},"name":"width","qualname":"::hdr::decoder::HdrMetadata::width","value":"u32","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[{"value":"/ Width of decoded image. It could be either scanline length,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":335871,"byte_end":335934,"line_start":735,"line_end":735,"column_start":5,"column_end":68}},{"value":"/ or scanline count, depending on image orientation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":335939,"byte_end":335993,"line_start":736,"line_end":736,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4676},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336086,"byte_end":336092,"line_start":739,"line_end":739,"column_start":9,"column_end":15},"name":"height","qualname":"::hdr::decoder::HdrMetadata::height","value":"u32","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[{"value":"/ Height of decoded image. It depends on orientation too.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336018,"byte_end":336077,"line_start":738,"line_end":738,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4677},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336367,"byte_end":336378,"line_start":743,"line_end":743,"column_start":9,"column_end":20},"name":"orientation","qualname":"::hdr::decoder::HdrMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[{"value":"/ Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336103,"byte_end":336203,"line_start":740,"line_end":740,"column_start":5,"column_end":105}},{"value":"/ First pair tells how resulting pixel coordinates change along a scanline.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336208,"byte_end":336285,"line_start":741,"line_end":741,"column_start":5,"column_end":82}},{"value":"/ Second pair tells how they change from one scanline to the next.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336290,"byte_end":336358,"line_start":742,"line_end":742,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4678},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336603,"byte_end":336611,"line_start":748,"line_end":748,"column_start":9,"column_end":17},"name":"exposure","qualname":"::hdr::decoder::HdrMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by exposure to get to get physical radiance in","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336406,"byte_end":336476,"line_start":744,"line_end":744,"column_start":5,"column_end":75}},{"value":"/ watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336481,"byte_end":336514,"line_start":745,"line_end":745,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336519,"byte_end":336522,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336527,"byte_end":336594,"line_start":747,"line_end":747,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4679},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336855,"byte_end":336871,"line_start":753,"line_end":753,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::hdr::decoder::HdrMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336630,"byte_end":336725,"line_start":749,"line_end":749,"column_start":5,"column_end":100}},{"value":"/ in watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336730,"byte_end":336766,"line_start":750,"line_end":750,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336771,"byte_end":336774,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336779,"byte_end":336846,"line_start":752,"line_end":752,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4680},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336950,"byte_end":336968,"line_start":755,"line_end":755,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::hdr::decoder::HdrMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[{"value":"/ Pixel height divided by pixel width","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336902,"byte_end":336941,"line_start":754,"line_end":754,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4681},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337197,"byte_end":337214,"line_start":759,"line_end":759,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::hdr::decoder::HdrMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":4674},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[{"value":"/ All lines contained in image header are put here. Ordering of lines is preserved.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":336987,"byte_end":337072,"line_start":756,"line_end":756,"column_start":5,"column_end":90}},{"value":"/ Lines in the form \"key=value\" are represented as (\"key\", \"value\").","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337077,"byte_end":337147,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ All other lines are (\"\", \"line\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337152,"byte_end":337188,"line_start":758,"line_end":758,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1415},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337445,"byte_end":337456,"line_start":771,"line_end":771,"column_start":10,"column_end":21},"name":"HDRMetadata","qualname":"::hdr::decoder::HDRMetadata","value":"HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" HDR MetaData","sig":null,"attributes":[{"value":"/ HDR MetaData","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337242,"byte_end":337258,"line_start":762,"line_end":762,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337259,"byte_end":337262,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrMetadata`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337263,"byte_end":337295,"line_start":764,"line_end":764,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337296,"byte_end":337299,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337300,"byte_end":337316,"line_start":766,"line_end":766,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337317,"byte_end":337320,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ [`HdrMetadata`]: struct.HdrMetadata.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337321,"byte_end":337365,"line_start":768,"line_end":768,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337366,"byte_end":337385,"line_start":769,"line_end":769,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrMetadata` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337386,"byte_end":337435,"line_start":770,"line_end":770,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1434},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":346537,"byte_end":346550,"line_start":991,"line_end":991,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::hdr::decoder::read_raw_file","value":"fn <P> (P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[{"value":"/ Helper function for reading raw 3-channel f32 images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":346473,"byte_end":346529,"line_start":990,"line_end":990,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347371,"byte_end":347381,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"HdrEncoder","qualname":"::hdr::encoder::HdrEncoder","value":"HdrEncoder {  }","parent":null,"children":[{"krate":0,"index":1454}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[{"value":"/ Radiance HDR encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347335,"byte_end":347359,"line_start":7,"line_end":7,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":1455},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347605,"byte_end":347615,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"HDREncoder","qualname":"::hdr::encoder::HDREncoder","value":"HdrEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" HDR Encoder","sig":null,"attributes":[{"value":"/ HDR Encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347407,"byte_end":347422,"line_start":12,"line_end":12,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347423,"byte_end":347426,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347427,"byte_end":347458,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347459,"byte_end":347462,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347463,"byte_end":347479,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347480,"byte_end":347483,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`HdrEncoder`]: struct.HdrEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347484,"byte_end":347526,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347527,"byte_end":347546,"line_start":19,"line_end":19,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347547,"byte_end":347595,"line_start":20,"line_end":20,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347703,"byte_end":347706,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrEncoder<W>>::new","value":"fn (W) -> HdrEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[{"value":"/ Creates encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347672,"byte_end":347691,"line_start":24,"line_end":24,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347869,"byte_end":347875,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"encode","qualname":"<HdrEncoder<W>>::encode","value":"fn (Self, &[Rgb<f32>], usize, usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347768,"byte_end":347800,"line_start":29,"line_end":29,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347805,"byte_end":347857,"line_start":30,"line_end":30,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1492},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":355305,"byte_end":355313,"line_start":239,"line_end":239,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::hdr::encoder::to_rgbe8","value":"fn (Rgb<f32>) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[{"value":"/ Converts ```Rgb<f32>``` into ```RGBE8Pixel```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":355248,"byte_end":355297,"line_start":238,"line_end":238,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1496},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1592}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8956,"byte_end":8979,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of ICO files","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362690,"byte_end":362729,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362730,"byte_end":362733,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for ICO (Windows Icon) image container files.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362734,"byte_end":362806,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362807,"byte_end":362810,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362811,"byte_end":362831,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362832,"byte_end":362895,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/mod.rs","byte_start":362896,"byte_end":362956,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1542},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":367153,"byte_end":367163,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"IcoDecoder","qualname":"::ico::decoder::IcoDecoder","value":"IcoDecoder {  }","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":367123,"byte_end":367141,"line_start":104,"line_end":104,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":367661,"byte_end":367664,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoDecoder<R>>::new","value":"fn (R) -> ImageResult<IcoDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":367588,"byte_end":367649,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1575},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":371132,"byte_end":371141,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":371075,"byte_end":371120,"line_start":247,"line_end":247,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1606},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376707,"byte_end":376717,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"IcoEncoder","qualname":"::ico::encoder::IcoEncoder","value":"IcoEncoder {  }","parent":null,"children":[{"krate":0,"index":1608}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376680,"byte_end":376695,"line_start":17,"line_end":17,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1609},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376941,"byte_end":376951,"line_start":31,"line_end":31,"column_start":10,"column_end":20},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" ICO encoder","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376743,"byte_end":376758,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376759,"byte_end":376762,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ An alias of [`IcoEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376763,"byte_end":376794,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376795,"byte_end":376798,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376799,"byte_end":376815,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376816,"byte_end":376819,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`IcoEncoder`]: struct.IcoEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376820,"byte_end":376862,"line_start":28,"line_end":28,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376863,"byte_end":376882,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `IcoEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376883,"byte_end":376931,"line_start":30,"line_end":30,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377079,"byte_end":377082,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoEncoder<W>>::new","value":"fn (W) -> IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377008,"byte_end":377067,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377380,"byte_end":377386,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"encode","qualname":"<IcoEncoder<W>>::encode","value":"fn (Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image``` that has dimensions ```width``` and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377144,"byte_end":377213,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/ ```height``` and ```ColorType``` ```c```.  The dimensions of the image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377218,"byte_end":377292,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"/ must be between 1 and 256 (inclusive) or an error will be returned.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377297,"byte_end":377368,"line_start":41,"line_end":41,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1624},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1680},{"krate":0,"index":1826},{"krate":0,"index":1829}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8993,"byte_end":9017,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of JPEG Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":379826,"byte_end":379866,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":379867,"byte_end":379870,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":379871,"byte_end":379966,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"! This module implements the Baseline JPEG standard.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":379967,"byte_end":380021,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380022,"byte_end":380025,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380026,"byte_end":380045,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380046,"byte_end":380122,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":380123,"byte_end":380126,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1649},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":380699,"byte_end":380710,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":380671,"byte_end":380687,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":380889,"byte_end":380892,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"fn (R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":380816,"byte_end":380877,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1656},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":381450,"byte_end":381460,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":381393,"byte_end":381438,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4807},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413128,"byte_end":413144,"line_start":280,"line_end":280,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":4806},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":412980,"byte_end":413044,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413049,"byte_end":413123,"line_start":279,"line_end":279,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4809},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413185,"byte_end":413191,"line_start":283,"line_end":283,"column_start":5,"column_end":11},"name":"Inches","qualname":"::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":4806},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413151,"byte_end":413180,"line_start":282,"line_end":282,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4811},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413228,"byte_end":413239,"line_start":286,"line_end":286,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":4806},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413198,"byte_end":413223,"line_start":285,"line_end":285,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4806},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":412957,"byte_end":412973,"line_start":277,"line_end":277,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::jpeg::encoder::PixelDensityUnit","value":"PixelDensityUnit::{PixelAspectRatio, Inches, Centimeters}","parent":null,"children":[{"krate":0,"index":4807},{"krate":0,"index":4809},{"krate":0,"index":4811}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":412836,"byte_end":412902,"line_start":275,"line_end":275,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4824},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413576,"byte_end":413588,"line_start":299,"line_end":299,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":4825},{"krate":0,"index":4826}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413244,"byte_end":413288,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413289,"byte_end":413292,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413293,"byte_end":413344,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413345,"byte_end":413348,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413349,"byte_end":413360,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413361,"byte_end":413384,"line_start":294,"line_end":294,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413385,"byte_end":413423,"line_start":295,"line_end":295,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413424,"byte_end":413511,"line_start":296,"line_end":296,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413512,"byte_end":413519,"line_start":297,"line_end":297,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":4825},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413651,"byte_end":413658,"line_start":301,"line_end":301,"column_start":9,"column_end":16},"name":"density","qualname":"::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":4824},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413595,"byte_end":413642,"line_start":300,"line_end":300,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4826},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413730,"byte_end":413734,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"unit","qualname":"::jpeg::encoder::PixelDensity::unit","value":"jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":4824},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413676,"byte_end":413721,"line_start":302,"line_end":302,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413940,"byte_end":413943,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"fn (u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413781,"byte_end":413828,"line_start":307,"line_end":307,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413833,"byte_end":413887,"line_start":308,"line_end":308,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413892,"byte_end":413928,"line_start":309,"line_end":309,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414394,"byte_end":414405,"line_start":329,"line_end":329,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414342,"byte_end":414382,"line_start":328,"line_end":328,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1773},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414884,"byte_end":414895,"line_start":352,"line_end":352,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JpegEncoder","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414681,"byte_end":414697,"line_start":343,"line_end":343,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414698,"byte_end":414701,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414702,"byte_end":414734,"line_start":345,"line_end":345,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414735,"byte_end":414738,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414739,"byte_end":414755,"line_start":347,"line_end":347,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414756,"byte_end":414759,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414760,"byte_end":414804,"line_start":349,"line_end":349,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414805,"byte_end":414824,"line_start":350,"line_end":350,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414825,"byte_end":414874,"line_start":351,"line_end":351,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":415040,"byte_end":415043,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"fn (&mut W) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414970,"byte_end":415028,"line_start":355,"line_end":355,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":415336,"byte_end":415352,"line_start":363,"line_end":363,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"fn (&mut W, u8) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":415131,"byte_end":415198,"line_start":360,"line_end":360,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":415203,"byte_end":415274,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":415279,"byte_end":415324,"line_start":362,"line_end":362,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417720,"byte_end":417737,"line_start":435,"line_end":435,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"fn (&mut Self, PixelDensity) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417488,"byte_end":417552,"line_start":432,"line_end":432,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417557,"byte_end":417648,"line_start":433,"line_end":433,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417653,"byte_end":417708,"line_start":434,"line_end":434,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":418069,"byte_end":418075,"line_start":444,"line_end":444,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"fn (&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417835,"byte_end":417898,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417903,"byte_end":417955,"line_start":440,"line_end":440,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417960,"byte_end":417991,"line_start":441,"line_end":441,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":417996,"byte_end":417999,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":418004,"byte_end":418057,"line_start":443,"line_end":443,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":420276,"byte_end":420288,"line_start":496,"line_end":496,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"fn <I> (&mut Self, &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":419748,"byte_end":419776,"line_start":487,"line_end":487,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":419781,"byte_end":419784,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":419789,"byte_end":419882,"line_start":489,"line_end":489,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":419887,"byte_end":419981,"line_start":490,"line_end":490,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":419986,"byte_end":420081,"line_start":491,"line_end":491,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":420086,"byte_end":420177,"line_start":492,"line_end":492,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":420182,"byte_end":420198,"line_start":493,"line_end":493,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":420203,"byte_end":420206,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":420211,"byte_end":420264,"line_start":495,"line_end":495,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1845},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":7128},{"krate":0,"index":1860},{"krate":0,"index":7130},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":7134},{"krate":0,"index":1863},{"krate":0,"index":7136},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1901},{"krate":0,"index":1905},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1925},{"krate":0,"index":1933},{"krate":0,"index":1939},{"krate":0,"index":1951},{"krate":0,"index":1956},{"krate":0,"index":4839},{"krate":0,"index":4863},{"krate":0,"index":4862},{"krate":0,"index":4860},{"krate":0,"index":4857},{"krate":0,"index":4858},{"krate":0,"index":4853},{"krate":0,"index":4854},{"krate":0,"index":4865},{"krate":0,"index":4889},{"krate":0,"index":4888},{"krate":0,"index":4886},{"krate":0,"index":4883},{"krate":0,"index":4884},{"krate":0,"index":4879},{"krate":0,"index":4880},{"krate":0,"index":1958},{"krate":0,"index":1965},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1978}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9032,"byte_end":9055,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"! Decoding and Encoding of PNG Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445609,"byte_end":445648,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445649,"byte_end":445652,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445653,"byte_end":445743,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445744,"byte_end":445747,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445748,"byte_end":445767,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445768,"byte_end":445825,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":445826,"byte_end":445829,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1887},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446582,"byte_end":446591,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446392,"byte_end":446406,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446407,"byte_end":446410,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446411,"byte_end":446470,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446471,"byte_end":446532,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446533,"byte_end":446570,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1892},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446866,"byte_end":446875,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446673,"byte_end":446687,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446688,"byte_end":446691,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446692,"byte_end":446722,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446723,"byte_end":446726,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446727,"byte_end":446743,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446744,"byte_end":446747,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446748,"byte_end":446788,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446789,"byte_end":446808,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446809,"byte_end":446856,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1901},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":448847,"byte_end":448857,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":448820,"byte_end":448835,"line_start":109,"line_end":109,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":449035,"byte_end":449038,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"fn (R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":448961,"byte_end":449023,"line_start":116,"line_end":116,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1908},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452791,"byte_end":452795,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"fn (Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452144,"byte_end":452201,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452206,"byte_end":452209,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452214,"byte_end":452305,"line_start":174,"line_end":174,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452310,"byte_end":452400,"line_start":175,"line_end":175,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452405,"byte_end":452495,"line_start":176,"line_end":176,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452500,"byte_end":452554,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452559,"byte_end":452562,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452567,"byte_end":452660,"line_start":179,"line_end":179,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452665,"byte_end":452758,"line_start":180,"line_end":180,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452763,"byte_end":452779,"line_start":181,"line_end":181,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":453218,"byte_end":453225,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"fn (&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452864,"byte_end":452911,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452916,"byte_end":452919,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":452924,"byte_end":453014,"line_start":188,"line_end":188,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":453019,"byte_end":453103,"line_start":189,"line_end":189,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":453108,"byte_end":453111,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":453116,"byte_end":453206,"line_start":191,"line_end":191,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1925},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455194,"byte_end":455205,"line_start":253,"line_end":253,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":454908,"byte_end":454962,"line_start":246,"line_end":246,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":454963,"byte_end":454966,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":454967,"byte_end":455017,"line_start":248,"line_end":248,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455018,"byte_end":455021,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455022,"byte_end":455078,"line_start":250,"line_end":250,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455079,"byte_end":455121,"line_start":251,"line_end":251,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455122,"byte_end":455182,"line_start":252,"line_end":252,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1951},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462398,"byte_end":462408,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462371,"byte_end":462386,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1956},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462690,"byte_end":462700,"line_start":455,"line_end":455,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462492,"byte_end":462507,"line_start":446,"line_end":446,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462508,"byte_end":462511,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462512,"byte_end":462543,"line_start":448,"line_end":448,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462544,"byte_end":462547,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462548,"byte_end":462564,"line_start":450,"line_end":450,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462565,"byte_end":462568,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462569,"byte_end":462611,"line_start":452,"line_end":452,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462612,"byte_end":462631,"line_start":453,"line_end":453,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462632,"byte_end":462680,"line_start":454,"line_end":454,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4840},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462903,"byte_end":462910,"line_start":461,"line_end":461,"column_start":5,"column_end":12},"name":"Default","qualname":"::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":4839},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462869,"byte_end":462898,"line_start":460,"line_end":460,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4842},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462950,"byte_end":462954,"line_start":463,"line_end":463,"column_start":5,"column_end":9},"name":"Fast","qualname":"::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":4839},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462916,"byte_end":462945,"line_start":462,"line_end":462,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4844},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462991,"byte_end":462995,"line_start":465,"line_end":465,"column_start":5,"column_end":9},"name":"Best","qualname":"::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":4839},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462960,"byte_end":462986,"line_start":464,"line_end":464,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4846},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463036,"byte_end":463043,"line_start":467,"line_end":467,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":4839},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463001,"byte_end":463031,"line_start":466,"line_end":466,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4848},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463089,"byte_end":463092,"line_start":469,"line_end":469,"column_start":5,"column_end":8},"name":"Rle","qualname":"::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":4839},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463049,"byte_end":463084,"line_start":468,"line_end":468,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4850},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463118,"byte_end":463133,"line_start":472,"line_end":472,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":4839},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4839},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462847,"byte_end":462862,"line_start":459,"line_end":459,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::png::CompressionType","value":"CompressionType::{Default, Fast, Best, Huffman, Rle, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4840},{"krate":0,"index":4842},{"krate":0,"index":4844},{"krate":0,"index":4846},{"krate":0,"index":4848},{"krate":0,"index":4850}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":462722,"byte_end":462792,"line_start":457,"line_end":457,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4866},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463568,"byte_end":463576,"line_start":483,"line_end":483,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":4865},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463463,"byte_end":463539,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463544,"byte_end":463563,"line_start":482,"line_end":482,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4868},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463643,"byte_end":463646,"line_start":485,"line_end":485,"column_start":5,"column_end":8},"name":"Sub","qualname":"::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":4865},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463582,"byte_end":463638,"line_start":484,"line_end":484,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4870},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463696,"byte_end":463698,"line_start":487,"line_end":487,"column_start":5,"column_end":7},"name":"Up","qualname":"::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":4865},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463652,"byte_end":463691,"line_start":486,"line_end":486,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4872},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463775,"byte_end":463778,"line_start":489,"line_end":489,"column_start":5,"column_end":8},"name":"Avg","qualname":"::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":4865},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463704,"byte_end":463770,"line_start":488,"line_end":488,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4874},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463865,"byte_end":463870,"line_start":491,"line_end":491,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":4865},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463784,"byte_end":463860,"line_start":490,"line_end":490,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4876},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463896,"byte_end":463911,"line_start":494,"line_end":494,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":4865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4865},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463446,"byte_end":463456,"line_start":480,"line_end":480,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::png::FilterType","value":"FilterType::{NoFilter, Sub, Up, Avg, Paeth, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4866},{"krate":0,"index":4868},{"krate":0,"index":4870},{"krate":0,"index":4872},{"krate":0,"index":4874},{"krate":0,"index":4876}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463173,"byte_end":463245,"line_start":475,"line_end":475,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463246,"byte_end":463249,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463250,"byte_end":463346,"line_start":477,"line_end":477,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463347,"byte_end":463391,"line_start":478,"line_end":478,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464056,"byte_end":464059,"line_start":499,"line_end":499,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"fn (W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463986,"byte_end":464044,"line_start":498,"line_end":498,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":465241,"byte_end":465257,"line_start":521,"line_end":521,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"fn (W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464227,"byte_end":464322,"line_start":507,"line_end":507,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464327,"byte_end":464353,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464358,"byte_end":464361,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464366,"byte_end":464461,"line_start":510,"line_end":510,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464466,"byte_end":464559,"line_start":511,"line_end":511,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464564,"byte_end":464656,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464661,"byte_end":464752,"line_start":513,"line_end":513,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464757,"byte_end":464805,"line_start":514,"line_end":514,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464810,"byte_end":464813,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464818,"byte_end":464913,"line_start":516,"line_end":516,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":464918,"byte_end":465009,"line_start":517,"line_end":517,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":465014,"byte_end":465105,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":465110,"byte_end":465204,"line_start":519,"line_end":519,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":465209,"byte_end":465229,"line_start":520,"line_end":520,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":465537,"byte_end":465543,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"fn (Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":465435,"byte_end":465525,"line_start":529,"line_end":529,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1980},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2019},{"krate":0,"index":2185},{"krate":0,"index":2323}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9069,"byte_end":9092,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"! Decoding of netpbm image formats (pbm, pgm, ppm and pam).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":471522,"byte_end":471583,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":471584,"byte_end":471587,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":471588,"byte_end":471684,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"! `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":471685,"byte_end":471781,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"! variants for now as alpha color types are unsupported.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/mod.rs","byte_start":471782,"byte_end":471840,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2090},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":489073,"byte_end":489083,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"PnmDecoder","qualname":"::pnm::decoder::PnmDecoder","value":"PnmDecoder {  }","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[{"value":"/ PNM decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":489046,"byte_end":489061,"line_start":219,"line_end":219,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":489273,"byte_end":489276,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmDecoder<R>>::new","value":"fn (R) -> ImageResult<PnmDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```read```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":489197,"byte_end":489261,"line_start":227,"line_end":227,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":490463,"byte_end":490473,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PnmDecoder<R>>::into_inner","value":"fn (Self) -> (R, PnmHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[{"value":"/ Extract the reader and header after an image has been read.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":490388,"byte_end":490451,"line_start":251,"line_end":251,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2125},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":499955,"byte_end":499964,"line_start":514,"line_end":514,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":499898,"byte_end":499943,"line_start":513,"line_end":513,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":503556,"byte_end":503563,"line_start":611,"line_end":611,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmDecoder<R>>::subtype","value":"fn (&Self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[{"value":"/ Get the pnm subtype, depending on the magic constant contained in the header","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":503464,"byte_end":503544,"line_start":610,"line_end":610,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5024},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526041,"byte_end":526043,"line_start":27,"line_end":27,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":5022},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5027},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526059,"byte_end":526062,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":5022},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5022},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526019,"byte_end":526030,"line_start":26,"line_end":26,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"FlatSamples::{U8, U16}","parent":null,"children":[{"krate":0,"index":5024},{"krate":0,"index":5027}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2226},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526143,"byte_end":526153,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"PnmEncoder","qualname":"::pnm::encoder::PnmEncoder","value":"PnmEncoder {  }","parent":null,"children":[{"krate":0,"index":2228},{"krate":0,"index":2229}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[{"value":"/ Encodes images to any of the `pnm` image formats.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526078,"byte_end":526131,"line_start":31,"line_end":31,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":2230},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526410,"byte_end":526420,"line_start":46,"line_end":46,"column_start":10,"column_end":20},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PnmEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNM Encoder","sig":null,"attributes":[{"value":"/ PNM Encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526212,"byte_end":526227,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526228,"byte_end":526231,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PnmEncoder`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526232,"byte_end":526263,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526264,"byte_end":526267,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526268,"byte_end":526284,"line_start":41,"line_end":41,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526285,"byte_end":526288,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`PnmEncoder`]: struct.PnmEncoder.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526289,"byte_end":526331,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526332,"byte_end":526351,"line_start":44,"line_end":44,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PnmEncoder` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":526352,"byte_end":526400,"line_start":45,"line_end":45,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527773,"byte_end":527776,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmEncoder<W>>::new","value":"fn (W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[{"value":"/ Create new PNMEncoder from the `writer`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527471,"byte_end":527515,"line_start":93,"line_end":93,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527520,"byte_end":527523,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The encoded images will have some `pnm` format. If more control over the image type is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527528,"byte_end":527618,"line_start":95,"line_end":95,"column_start":5,"column_end":95}},{"value":"/ required, use either one of `with_subtype` or `with_header`. For more information on the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527623,"byte_end":527715,"line_start":96,"line_end":96,"column_start":5,"column_end":97}},{"value":"/ behaviour, see `with_dynamic_header`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527720,"byte_end":527761,"line_start":97,"line_end":97,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528326,"byte_end":528338,"line_start":112,"line_end":112,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PnmEncoder<W>>::with_subtype","value":"fn (Self, PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[{"value":"/ Encode a specific pnm subtype image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527905,"byte_end":527945,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527950,"byte_end":527953,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ The magic number and encoding type will be chosen as provided while the rest of the header","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527958,"byte_end":528052,"line_start":107,"line_end":107,"column_start":5,"column_end":99}},{"value":"/ data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528057,"byte_end":528151,"line_start":108,"line_end":108,"column_start":5,"column_end":99}},{"value":"/ RGB image as Graymap) will result in an error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528156,"byte_end":528206,"line_start":109,"line_end":109,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528211,"byte_end":528214,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528219,"byte_end":528314,"line_start":111,"line_end":111,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529044,"byte_end":529055,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PnmEncoder<W>>::with_header","value":"fn (Self, PnmHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[{"value":"/ Enforce the use of a chosen header.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528505,"byte_end":528544,"line_start":119,"line_end":119,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528549,"byte_end":528552,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ While this option gives the most control over the actual written data, the encoding process","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528557,"byte_end":528652,"line_start":121,"line_end":121,"column_start":5,"column_end":100}},{"value":"/ will error in case the header data and image parameters do not agree. It is the users","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528657,"byte_end":528746,"line_start":122,"line_end":122,"column_start":5,"column_end":94}},{"value":"/ obligation to ensure that the width and height are set accordingly, for example.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528751,"byte_end":528835,"line_start":123,"line_end":123,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528840,"byte_end":528843,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Choose this option if you want a lossless decoding/encoding round trip.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528848,"byte_end":528923,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528928,"byte_end":528931,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":528936,"byte_end":529032,"line_start":127,"line_end":127,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529626,"byte_end":529645,"line_start":142,"line_end":142,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PnmEncoder<W>>::with_dynamic_header","value":"fn (Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[{"value":"/ Create the header dynamically for each image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529218,"byte_end":529267,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529272,"byte_end":529275,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This is the default option upon creation of the encoder. With this, most images should be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529280,"byte_end":529373,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/ encodable but the specific format chosen is out of the users control. The pnm subtype is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529378,"byte_end":529470,"line_start":138,"line_end":138,"column_start":5,"column_end":97}},{"value":"/ chosen arbitrarily by the library.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529475,"byte_end":529513,"line_start":139,"line_end":139,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529518,"byte_end":529521,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529526,"byte_end":529614,"line_start":141,"line_end":141,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":530021,"byte_end":530027,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"encode","qualname":"<PnmEncoder<W>>::encode","value":"fn <'s, S> (&mut Self, S, u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[{"value":"/ Encode an image whose samples are represented as `u8`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529782,"byte_end":529840,"line_start":149,"line_end":149,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529845,"byte_end":529848,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Some `pnm` subtypes are incompatible with some color options, a chosen header most","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529853,"byte_end":529939,"line_start":151,"line_end":151,"column_start":5,"column_end":91}},{"value":"/ certainly with any deviation from the original decoded image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":529944,"byte_end":530009,"line_start":152,"line_end":152,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5036},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549074,"byte_end":549080,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[{"value":"/ Samples are unsigned binary integers in big endian","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549015,"byte_end":549069,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5038},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549164,"byte_end":549169,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Samples are encoded as decimal ascii strings separated by whitespace","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549087,"byte_end":549159,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":5035},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":548994,"byte_end":549008,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"SampleEncoding::{Binary, Ascii}","parent":null,"children":[{"krate":0,"index":5036},{"krate":0,"index":5038}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"/ The kind of encoding used to store sample values","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":548887,"byte_end":548939,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5052},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549484,"byte_end":549490,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":5051},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[{"value":"/ Magic numbers P1 and P4","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549452,"byte_end":549479,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5055},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549545,"byte_end":549552,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":5051},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[{"value":"/ Magic numbers P2 and P5","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549513,"byte_end":549540,"line_start":25,"line_end":25,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5058},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549607,"byte_end":549613,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":5051},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[{"value":"/ Magic numbers P3 and P6","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549575,"byte_end":549602,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5061},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549660,"byte_end":549672,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":5051},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[{"value":"/ Magic number P7","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549636,"byte_end":549655,"line_start":31,"line_end":31,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":5051},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549435,"byte_end":549445,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"PNMSubtype::{Bitmap, Graymap, Pixmap, ArbitraryMap}","parent":null,"children":[{"krate":0,"index":5052},{"krate":0,"index":5055},{"krate":0,"index":5058},{"krate":0,"index":5061}],"decl_id":null,"docs":" Denotes the category of the magic number","sig":null,"attributes":[{"value":"/ Denotes the category of the magic number","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549174,"byte_end":549218,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549219,"byte_end":549222,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: The name of this enum will be changed to [`PnmSubtype`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549223,"byte_end":549295,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549296,"byte_end":549299,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ TODO: rename to [`PnmSubtype`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549300,"byte_end":549335,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549336,"byte_end":549339,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`PnmSubtype`]: type.PnmSubtype.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549340,"byte_end":549380,"line_start":19,"line_end":19,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":2327},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549856,"byte_end":549866,"line_start":43,"line_end":43,"column_start":10,"column_end":20},"name":"PnmSubtype","qualname":"::pnm::header::PnmSubtype","value":"PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" PNM Subtype","sig":null,"attributes":[{"value":"/ PNM Subtype","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549677,"byte_end":549692,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549693,"byte_end":549696,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PNMSubtype`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549697,"byte_end":549728,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549729,"byte_end":549732,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ TODO: remove when [`DXTVariant`] is renamed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549733,"byte_end":549781,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549782,"byte_end":549785,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`PNMSubtype`]: enum.PNMSubtype.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549786,"byte_end":549826,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549827,"byte_end":549846,"line_start":42,"line_end":42,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2328},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550269,"byte_end":550278,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"PnmHeader","qualname":"::pnm::header::PnmHeader","value":"PnmHeader {  }","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[{"value":"/ Stores the complete header data of a file.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549882,"byte_end":549928,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549929,"byte_end":549932,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":549933,"byte_end":550031,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ it is possible to recover the header and construct an encoder. Using the encoder on the just","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550032,"byte_end":550128,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/ loaded image should result in a byte copy of the original file (for single image pnms without","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550129,"byte_end":550226,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"/ additional trailing data).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550227,"byte_end":550257,"line_start":50,"line_end":50,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2331},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550556,"byte_end":550565,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PnmHeader","parent":null,"children":[],"decl_id":null,"docs":" PNM Header","sig":null,"attributes":[{"value":"/ PNM Header","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550363,"byte_end":550377,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550378,"byte_end":550381,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PnmHeader`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550382,"byte_end":550412,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550413,"byte_end":550416,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550417,"byte_end":550433,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550434,"byte_end":550437,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`PnmHeader`]: struct.PnmHeader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550438,"byte_end":550478,"line_start":62,"line_end":62,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550479,"byte_end":550498,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PnmHeader` instead\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550499,"byte_end":550546,"line_start":64,"line_end":64,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5075},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550824,"byte_end":550836,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":5076},{"krate":0,"index":5077},{"krate":0,"index":5078}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pbm` file (\"Portable Bit Map\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550726,"byte_end":550782,"line_start":74,"line_end":74,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":5076},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550884,"byte_end":550892,"line_start":78,"line_end":78,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":5075},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550843,"byte_end":550875,"line_start":77,"line_end":77,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5077},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550952,"byte_end":550958,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":5075},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550915,"byte_end":550943,"line_start":80,"line_end":80,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5078},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551006,"byte_end":551011,"line_start":84,"line_end":84,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":5075},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":550970,"byte_end":550997,"line_start":83,"line_end":83,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5084},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551120,"byte_end":551133,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":5085},{"krate":0,"index":5086},{"krate":0,"index":5087},{"krate":0,"index":5088}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pgm` file (\"Portable Gray Map\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551021,"byte_end":551078,"line_start":87,"line_end":87,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":5085},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551181,"byte_end":551189,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551140,"byte_end":551172,"line_start":90,"line_end":90,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5086},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551249,"byte_end":551255,"line_start":94,"line_end":94,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551212,"byte_end":551240,"line_start":93,"line_end":93,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5087},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551303,"byte_end":551308,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551267,"byte_end":551294,"line_start":96,"line_end":96,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5088},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551370,"byte_end":551378,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":5084},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551320,"byte_end":551361,"line_start":99,"line_end":99,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5094},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551488,"byte_end":551500,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":5095},{"krate":0,"index":5096},{"krate":0,"index":5097},{"krate":0,"index":5098}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `ppm` file (\"Portable Pixel Map\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551388,"byte_end":551446,"line_start":103,"line_end":103,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":5095},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551548,"byte_end":551556,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":5094},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551507,"byte_end":551539,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5096},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551616,"byte_end":551622,"line_start":110,"line_end":110,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":5094},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551579,"byte_end":551607,"line_start":109,"line_end":109,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5097},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551670,"byte_end":551675,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":5094},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551634,"byte_end":551661,"line_start":112,"line_end":112,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5098},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551737,"byte_end":551743,"line_start":116,"line_end":116,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":5094},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551687,"byte_end":551728,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5104},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551851,"byte_end":551866,"line_start":121,"line_end":121,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":5105},{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5109}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pam` file (\"Portable Arbitrary Map\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551753,"byte_end":551815,"line_start":119,"line_end":119,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":5105},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551910,"byte_end":551916,"line_start":123,"line_end":123,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551873,"byte_end":551901,"line_start":122,"line_end":122,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5106},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551964,"byte_end":551969,"line_start":126,"line_end":126,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551928,"byte_end":551955,"line_start":125,"line_end":125,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5107},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552018,"byte_end":552023,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[{"value":"/ Number of color channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":551981,"byte_end":552009,"line_start":128,"line_end":128,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5108},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552085,"byte_end":552091,"line_start":132,"line_end":132,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552035,"byte_end":552076,"line_start":131,"line_end":131,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":5109},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552152,"byte_end":552160,"line_start":135,"line_end":135,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[{"value":"/ Color interpretation of image pixels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552103,"byte_end":552143,"line_start":134,"line_end":134,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5115},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552363,"byte_end":552376,"line_start":142,"line_end":142,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552314,"byte_end":552358,"line_start":141,"line_end":141,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5117},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552459,"byte_end":552477,"line_start":145,"line_end":145,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1) and a second alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552383,"byte_end":552454,"line_start":144,"line_end":144,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5119},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552529,"byte_end":552538,"line_start":148,"line_end":148,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[{"value":"/ Pixels represent the amount of white","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552484,"byte_end":552524,"line_start":147,"line_end":147,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5121},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552596,"byte_end":552610,"line_start":151,"line_end":151,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[{"value":"/ Grayscale with an additional alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552545,"byte_end":552591,"line_start":150,"line_end":150,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5123},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552658,"byte_end":552661,"line_start":154,"line_end":154,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[{"value":"/ Three channels: Red, Green, Blue","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552617,"byte_end":552653,"line_start":153,"line_end":153,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5125},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552715,"byte_end":552723,"line_start":157,"line_end":157,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[{"value":"/ Four channels: Red, Green, Blue, Alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552668,"byte_end":552710,"line_start":156,"line_end":156,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5127},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552780,"byte_end":552786,"line_start":160,"line_end":160,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":5114},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[{"value":"/ An image format which is not standardized","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552730,"byte_end":552775,"line_start":159,"line_end":159,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5114},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552290,"byte_end":552307,"line_start":140,"line_end":140,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"ArbitraryTuplType::{BlackAndWhite, BlackAndWhiteAlpha, Grayscale, GrayscaleAlpha, RGB, RGBAlpha, Custom}","parent":null,"children":[{"krate":0,"index":5115},{"krate":0,"index":5117},{"krate":0,"index":5119},{"krate":0,"index":5121},{"krate":0,"index":5123},{"krate":0,"index":5125},{"krate":0,"index":5127}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[{"value":"/ Standardized tuple type specifiers in the header of a `pam`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552192,"byte_end":552256,"line_start":138,"line_end":138,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":553436,"byte_end":553450,"line_start":179,"line_end":179,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"fn (Self) -> &'static [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[{"value":"/ Get the two magic constant bytes corresponding to this format subtype.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":553350,"byte_end":553424,"line_start":178,"line_end":178,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554029,"byte_end":554044,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"fn (Self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[{"value":"/ Whether samples are stored as binary or as decimal ascii","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":553957,"byte_end":554017,"line_start":191,"line_end":191,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554407,"byte_end":554414,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmHeader>::subtype","value":"fn (&Self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[{"value":"/ Retrieve the format subtype from which the header was created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554329,"byte_end":554395,"line_start":203,"line_end":203,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554929,"byte_end":554934,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"width","qualname":"<PnmHeader>::width","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The width of the image this header is for.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554871,"byte_end":554917,"line_start":213,"line_end":213,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":555352,"byte_end":555358,"line_start":224,"line_end":224,"column_start":12,"column_end":18},"name":"height","qualname":"<PnmHeader>::height","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The height of the image this header is for.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":555293,"byte_end":555340,"line_start":223,"line_end":223,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":555816,"byte_end":555830,"line_start":234,"line_end":234,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PnmHeader>::maximal_sample","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[{"value":"/ The biggest value a sample can have. In other words, the colour resolution.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":555725,"byte_end":555804,"line_start":233,"line_end":233,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556248,"byte_end":556257,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PnmHeader>::as_bitmap","value":"fn (&Self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying bitmap header if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556188,"byte_end":556236,"line_start":243,"line_end":243,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556488,"byte_end":556498,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PnmHeader>::as_graymap","value":"fn (&Self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying graymap header if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556427,"byte_end":556476,"line_start":251,"line_end":251,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556732,"byte_end":556741,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PnmHeader>::as_pixmap","value":"fn (&Self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying pixmap header if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556672,"byte_end":556720,"line_start":259,"line_end":259,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2359},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556974,"byte_end":556986,"line_start":268,"line_end":268,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PnmHeader>::as_arbitrary","value":"fn (&Self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying arbitrary header if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":556911,"byte_end":556962,"line_start":267,"line_end":267,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":557226,"byte_end":557231,"line_start":276,"line_end":276,"column_start":12,"column_end":17},"name":"write","qualname":"<PnmHeader>::write","value":"fn (&Self, &mut io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[{"value":"/ Write the header back into a binary stream","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":557168,"byte_end":557214,"line_start":275,"line_end":275,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":2376},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2459},{"krate":0,"index":2490}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9106,"byte_end":9129,"line_start":230,"line_end":230,"column_start":1,"column_end":24}},{"value":"! Decoding of TGA Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":560397,"byte_end":560423,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":560424,"byte_end":560427,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":560428,"byte_end":560447,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"! <http://googlesites.inequation.org/tgautilities>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/mod.rs","byte_start":560448,"byte_end":560500,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2412},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":562024,"byte_end":562034,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"TgaDecoder","qualname":"::tga::decoder::TgaDecoder","value":"TgaDecoder {  }","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":561973,"byte_end":562012,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":562460,"byte_end":562463,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaDecoder<R>>::new","value":"fn (R) -> ImageResult<TgaDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":562391,"byte_end":562448,"line_start":67,"line_end":67,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2451},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":574946,"byte_end":574955,"line_start":420,"line_end":420,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":2453},{"krate":0,"index":2454}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2478},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576294,"byte_end":576304,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"TgaEncoder","qualname":"::tga::encoder::TgaEncoder","value":"TgaEncoder {  }","parent":null,"children":[{"krate":0,"index":2480}],"decl_id":null,"docs":" TGA encoder.\n","sig":null,"attributes":[{"value":"/ TGA encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576266,"byte_end":576282,"line_start":34,"line_end":34,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576441,"byte_end":576444,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaEncoder<W>>::new","value":"fn (W) -> TgaEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576370,"byte_end":576429,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576774,"byte_end":576780,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"encode","qualname":"<TgaEncoder<W>>::encode","value":"fn (Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```buf``` that has dimensions ```width```\n and ```height``` and ```ColorType``` ```color_type```.","sig":null,"attributes":[{"value":"/ Encodes the image ```buf``` that has dimensions ```width```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576514,"byte_end":576577,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/ and ```height``` and ```ColorType``` ```color_type```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576582,"byte_end":576640,"line_start":46,"line_end":46,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576645,"byte_end":576648,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The dimensions of the image must be between 0 and 65535 (inclusive) or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576653,"byte_end":576727,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ an error will be returned.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576732,"byte_end":576762,"line_start":49,"line_end":49,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":2541},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2550},{"krate":0,"index":7444},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2576},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2583},{"krate":0,"index":2588},{"krate":0,"index":2592},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2605},{"krate":0,"index":2609}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9143,"byte_end":9167,"line_start":232,"line_end":232,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of TIFF Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588078,"byte_end":588118,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588119,"byte_end":588122,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588123,"byte_end":588200,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"! lossless and lossy compression.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588201,"byte_end":588236,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588237,"byte_end":588240,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588241,"byte_end":588260,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588261,"byte_end":588352,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2571},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588854,"byte_end":588865,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"TiffDecoder","qualname":"::tiff::TiffDecoder","value":"TiffDecoder {  }","parent":null,"children":[{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[{"value":"/ Decoder for TIFF images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":588814,"byte_end":588842,"line_start":24,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":589087,"byte_end":589090,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffDecoder<R>>::new","value":"fn (R) -> Result<TiffDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TiffDecoder.\n","sig":null,"attributes":[{"value":"/ Create a new TiffDecoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":589046,"byte_end":589075,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2583},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":592380,"byte_end":592390,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":592323,"byte_end":592368,"line_start":113,"line_end":113,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2600},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":594472,"byte_end":594483,"line_start":180,"line_end":180,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":2602}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[{"value":"/ Encoder for tiff images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":594433,"byte_end":594460,"line_start":179,"line_end":179,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595209,"byte_end":595212,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"fn (W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595143,"byte_end":595197,"line_start":199,"line_end":199,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595444,"byte_end":595450,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"fn (Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595276,"byte_end":595367,"line_start":204,"line_end":204,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595372,"byte_end":595375,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ 16-bit types assume the buffer is native endian.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595380,"byte_end":595432,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2612},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/mod.rs","parent":null,"children":[{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2685},{"krate":0,"index":2691}],"decl_id":null,"docs":" Decoding of WebP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9182,"byte_end":9206,"line_start":234,"line_end":234,"column_start":1,"column_end":25}},{"value":"! Decoding of WebP Images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/mod.rs","byte_start":597039,"byte_end":597066,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2652},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598955,"byte_end":598966,"line_start":53,"line_end":53,"column_start":12,"column_end":23},"name":"WebPDecoder","qualname":"::webp::decoder::WebPDecoder","value":"WebPDecoder {  }","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656}],"decl_id":null,"docs":" WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[{"value":"/ WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598818,"byte_end":598912,"line_start":51,"line_end":51,"column_start":1,"column_end":95}},{"value":"/ images will be grayscale).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598913,"byte_end":598943,"line_start":52,"line_end":52,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":599178,"byte_end":599181,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<WebPDecoder<R>>::new","value":"fn (R) -> ImageResult<WebPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebPDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebPDecoder from the Reader ```r```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":599060,"byte_end":599113,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":599118,"byte_end":599166,"line_start":61,"line_end":61,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2668},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":601858,"byte_end":601868,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":601801,"byte_end":601846,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2691},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":7528},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2703},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":5197},{"krate":0,"index":5222},{"krate":0,"index":5221},{"krate":0,"index":5219},{"krate":0,"index":5216},{"krate":0,"index":5217},{"krate":0,"index":5213},{"krate":0,"index":5214},{"krate":0,"index":5224},{"krate":0,"index":5246},{"krate":0,"index":5245},{"krate":0,"index":5243},{"krate":0,"index":5240},{"krate":0,"index":5241},{"krate":0,"index":5237},{"krate":0,"index":5238},{"krate":0,"index":5248},{"krate":0,"index":5288},{"krate":0,"index":5287},{"krate":0,"index":5285},{"krate":0,"index":5282},{"krate":0,"index":5283},{"krate":0,"index":5279},{"krate":0,"index":5280},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":2734},{"krate":0,"index":2736},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2765},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":5290},{"krate":0,"index":5292},{"krate":0,"index":2772},{"krate":0,"index":5294},{"krate":0,"index":5317},{"krate":0,"index":5314},{"krate":0,"index":5313},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2785},{"krate":0,"index":5319},{"krate":0,"index":5332},{"krate":0,"index":5328},{"krate":0,"index":5327},{"krate":0,"index":5334},{"krate":0,"index":5349},{"krate":0,"index":5347},{"krate":0,"index":5345},{"krate":0,"index":5351},{"krate":0,"index":5364},{"krate":0,"index":5363},{"krate":0,"index":5361},{"krate":0,"index":2793},{"krate":0,"index":2816},{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2856},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2865},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"! An implementation of the VP8 Video Codec","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605463,"byte_end":605507,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605508,"byte_end":605511,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains a partial implementation of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605512,"byte_end":605568,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"! VP8 video format as defined in RFC-6386.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605569,"byte_end":605613,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605614,"byte_end":605617,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It decodes Keyframes only sans Loop Filtering.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605618,"byte_end":605668,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"! VP8 is the underpinning of the WebP image format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605669,"byte_end":605721,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605722,"byte_end":605725,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605726,"byte_end":605745,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"! * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605746,"byte_end":605839,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"! * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605840,"byte_end":605962,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"! of the VP8 format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605963,"byte_end":605984,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":605985,"byte_end":605988,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5334},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636194,"byte_end":636199,"line_start":839,"line_end":839,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":5335},{"krate":0,"index":5336},{"krate":0,"index":5337},{"krate":0,"index":5338},{"krate":0,"index":5339},{"krate":0,"index":5340},{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343},{"krate":0,"index":5344}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636097,"byte_end":636149,"line_start":837,"line_end":837,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":5335},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636246,"byte_end":636251,"line_start":841,"line_end":841,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":5334},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636206,"byte_end":636237,"line_start":840,"line_end":840,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5336},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636304,"byte_end":636310,"line_start":844,"line_end":844,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":5334},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636263,"byte_end":636295,"line_start":843,"line_end":843,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5337},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636362,"byte_end":636366,"line_start":847,"line_end":847,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":5334},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636322,"byte_end":636353,"line_start":846,"line_end":846,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5338},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636437,"byte_end":636445,"line_start":850,"line_end":850,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":5334},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636382,"byte_end":636428,"line_start":849,"line_end":849,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5340},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636541,"byte_end":636552,"line_start":855,"line_end":855,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":5334},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636476,"byte_end":636532,"line_start":854,"line_end":854,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5341},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636683,"byte_end":636693,"line_start":860,"line_end":860,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":5334},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636584,"byte_end":636641,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":636646,"byte_end":636674,"line_start":859,"line_end":859,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2793},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637069,"byte_end":637079,"line_start":888,"line_end":888,"column_start":12,"column_end":22},"name":"Vp8Decoder","qualname":"::webp::vp8::Vp8Decoder","value":"Vp8Decoder {  }","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2815}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637011,"byte_end":637026,"line_start":885,"line_end":885,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637027,"byte_end":637030,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637031,"byte_end":637057,"line_start":887,"line_end":887,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637743,"byte_end":637746,"line_start":923,"line_end":923,"column_start":12,"column_end":15},"name":"new","qualname":"<Vp8Decoder<R>>::new","value":"fn (R) -> Vp8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637639,"byte_end":637664,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637669,"byte_end":637731,"line_start":922,"line_end":922,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":657904,"byte_end":657916,"line_start":1543,"line_end":1543,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<Vp8Decoder<R>>::decode_frame","value":"fn (&mut Self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[{"value":"/ Decodes the current frame and returns a reference to it","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":657833,"byte_end":657892,"line_start":1542,"line_end":1542,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":2884},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"farbfeld","qualname":"::farbfeld","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","parent":null,"children":[{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2904},{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2907},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2920},{"krate":0,"index":2929},{"krate":0,"index":2932},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2957},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":2974}],"decl_id":null,"docs":" Decoding of farbfeld images","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9221,"byte_end":9249,"line_start":236,"line_end":236,"column_start":1,"column_end":29}},{"value":"! Decoding of farbfeld images","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682693,"byte_end":682724,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682725,"byte_end":682728,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! farbfeld is a lossless image format which is easy to parse, pipe and compress.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682729,"byte_end":682811,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682812,"byte_end":682815,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! It has the following format:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682816,"byte_end":682848,"line_start":5,"line_end":5,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682849,"byte_end":682852,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! | Bytes  | Description                                             |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682853,"byte_end":682925,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! |--------|---------------------------------------------------------|","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682926,"byte_end":682998,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"! | 8      | \"farbfeld\" magic value                                  |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":682999,"byte_end":683071,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! | 4      | 32-Bit BE unsigned integer (width)                      |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683072,"byte_end":683144,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"! | 4      | 32-Bit BE unsigned integer (height)                     |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683145,"byte_end":683217,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"! | [2222] | 4⋅16-Bit BE unsigned integers [RGBA] / pixel, row-major |","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683218,"byte_end":683292,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683293,"byte_end":683296,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! The RGB-data should be sRGB for best interoperability and not alpha-premultiplied.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683297,"byte_end":683383,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683384,"byte_end":683387,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683388,"byte_end":683407,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"! * <https://tools.suckless.org/farbfeld/> - the farbfeld specification","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683408,"byte_end":683481,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2913},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683906,"byte_end":683920,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"FarbfeldReader","qualname":"::farbfeld::FarbfeldReader","value":"FarbfeldReader {  }","parent":null,"children":[{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2919}],"decl_id":null,"docs":" farbfeld Reader\n","sig":null,"attributes":[{"value":"/ farbfeld Reader","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":683875,"byte_end":683894,"line_start":29,"line_end":29,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2943},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688628,"byte_end":688643,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"FarbfeldDecoder","qualname":"::farbfeld::FarbfeldDecoder","value":"FarbfeldDecoder {  }","parent":null,"children":[{"krate":0,"index":2945}],"decl_id":null,"docs":" farbfeld decoder\n","sig":null,"attributes":[{"value":"/ farbfeld decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688596,"byte_end":688616,"line_start":162,"line_end":162,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2948},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688802,"byte_end":688805,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldDecoder<R>>::new","value":"fn (R) -> ImageResult<FarbfeldDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688728,"byte_end":688790,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2965},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690148,"byte_end":690163,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"FarbfeldEncoder","qualname":"::farbfeld::FarbfeldEncoder","value":"FarbfeldEncoder {  }","parent":null,"children":[{"krate":0,"index":2967}],"decl_id":null,"docs":" farbfeld encoder\n","sig":null,"attributes":[{"value":"/ farbfeld encoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690116,"byte_end":690136,"line_start":215,"line_end":215,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2970},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690310,"byte_end":690313,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldEncoder<W>>::new","value":"fn (W) -> FarbfeldEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690240,"byte_end":690298,"line_start":221,"line_end":221,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2971},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690521,"byte_end":690527,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"encode","qualname":"<FarbfeldEncoder<W>>::encode","value":"fn (Self, &[u8], u32, u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data``` (native endian)\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data``` (native endian)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690404,"byte_end":690452,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690457,"byte_end":690509,"line_start":227,"line_end":227,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2983},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":694984,"byte_end":694990,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2985}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":694899,"byte_end":694972,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695170,"byte_end":695173,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn (Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695090,"byte_end":695158,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695565,"byte_end":695579,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn (Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695284,"byte_end":695378,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695383,"byte_end":695395,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695400,"byte_end":695462,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695467,"byte_end":695470,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695475,"byte_end":695553,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":5366},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695868,"byte_end":695873,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":5367},{"krate":0,"index":5368},{"krate":0,"index":5369},{"krate":0,"index":5370}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695811,"byte_end":695839,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5373},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696155,"byte_end":696160,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":5374}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696032,"byte_end":696086,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696262,"byte_end":696265,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn (RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696206,"byte_end":696250,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696493,"byte_end":696503,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn (RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696456,"byte_end":696481,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696715,"byte_end":696720,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn (&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696680,"byte_end":696703,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696809,"byte_end":696815,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn (&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696769,"byte_end":696797,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696911,"byte_end":696922,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn (Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696871,"byte_end":696899,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697011,"byte_end":697015,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696975,"byte_end":696999,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697097,"byte_end":697100,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697061,"byte_end":697085,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697365,"byte_end":697384,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"fn (u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697160,"byte_end":697208,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697213,"byte_end":697216,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697221,"byte_end":697235,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697240,"byte_end":697243,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697248,"byte_end":697255,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697260,"byte_end":697281,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697286,"byte_end":697341,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697346,"byte_end":697353,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":698027,"byte_end":698051,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"fn (Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697504,"byte_end":697586,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697591,"byte_end":697594,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697599,"byte_end":697693,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697698,"byte_end":697776,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697781,"byte_end":697784,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697789,"byte_end":697803,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697808,"byte_end":697811,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697816,"byte_end":697823,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697828,"byte_end":697856,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697861,"byte_end":697882,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697887,"byte_end":697890,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697895,"byte_end":697940,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697945,"byte_end":698003,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":698008,"byte_end":698015,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":699227,"byte_end":699241,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"fn (Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":699001,"byte_end":699064,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":699069,"byte_end":699072,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":699077,"byte_end":699172,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":699177,"byte_end":699215,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":3055},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":706521,"byte_end":706527,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3058}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":706481,"byte_end":706509,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":3080},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707688,"byte_end":707697,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":3083}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707640,"byte_end":707676,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":3102},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708953,"byte_end":708957,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":3105}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708747,"byte_end":708780,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708781,"byte_end":708784,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708785,"byte_end":708871,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708872,"byte_end":708875,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708876,"byte_end":708941,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3129},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711507,"byte_end":711514,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":3132}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711281,"byte_end":711322,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711323,"byte_end":711326,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711327,"byte_end":711417,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711418,"byte_end":711421,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711422,"byte_end":711495,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3153},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713830,"byte_end":713845,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3159}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713781,"byte_end":713818,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3176},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":715152,"byte_end":715165,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3181}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":715105,"byte_end":715140,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3198},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716540,"byte_end":716558,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":3201},{"krate":0,"index":3202},{"krate":0,"index":3203},{"krate":0,"index":3204}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716491,"byte_end":716528,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3218},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717702,"byte_end":717718,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":3221},{"krate":0,"index":3222},{"krate":0,"index":3223}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717655,"byte_end":717690,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5393},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721268,"byte_end":721279,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":5396},{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718890,"byte_end":718914,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718915,"byte_end":718918,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718919,"byte_end":719013,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719014,"byte_end":719103,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719104,"byte_end":719199,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719200,"byte_end":719295,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719296,"byte_end":719334,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719335,"byte_end":719338,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719339,"byte_end":719438,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719439,"byte_end":719474,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719475,"byte_end":719478,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719479,"byte_end":719524,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719525,"byte_end":719578,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719579,"byte_end":719615,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719616,"byte_end":719654,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719655,"byte_end":719658,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719659,"byte_end":719735,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719736,"byte_end":719739,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719740,"byte_end":719827,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719828,"byte_end":719926,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":719927,"byte_end":720002,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720003,"byte_end":720006,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720007,"byte_end":720051,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720052,"byte_end":720100,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720101,"byte_end":720157,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720158,"byte_end":720161,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720162,"byte_end":720177,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720178,"byte_end":720181,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720182,"byte_end":720233,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720234,"byte_end":720237,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720238,"byte_end":720245,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720246,"byte_end":720277,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720278,"byte_end":720281,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720282,"byte_end":720322,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720323,"byte_end":720326,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720327,"byte_end":720349,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720350,"byte_end":720374,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720375,"byte_end":720425,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720426,"byte_end":720476,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720477,"byte_end":720486,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720487,"byte_end":720492,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720493,"byte_end":720500,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720501,"byte_end":720504,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720505,"byte_end":720564,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720565,"byte_end":720568,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720569,"byte_end":720582,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720583,"byte_end":720650,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720651,"byte_end":720654,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720655,"byte_end":720717,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720718,"byte_end":720775,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720776,"byte_end":720805,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720806,"byte_end":720839,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720840,"byte_end":720856,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720857,"byte_end":720896,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720897,"byte_end":720906,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720907,"byte_end":720914,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720915,"byte_end":720918,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720919,"byte_end":720977,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720978,"byte_end":720985,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720986,"byte_end":720989,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":720990,"byte_end":721030,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721031,"byte_end":721034,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721035,"byte_end":721048,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721049,"byte_end":721085,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721086,"byte_end":721089,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721090,"byte_end":721151,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721152,"byte_end":721210,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721211,"byte_end":721218,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722037,"byte_end":722045,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn (u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721752,"byte_end":721799,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721804,"byte_end":721840,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721845,"byte_end":721848,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721853,"byte_end":721943,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721948,"byte_end":722025,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722451,"byte_end":722459,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn (Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722402,"byte_end":722439,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722561,"byte_end":722571,"line_start":650,"line_end":650,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn (&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722510,"byte_end":722549,"line_start":649,"line_end":649,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722680,"byte_end":722685,"line_start":655,"line_end":655,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722640,"byte_end":722668,"line_start":654,"line_end":654,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3244},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722773,"byte_end":722779,"line_start":660,"line_end":660,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn (&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":722732,"byte_end":722761,"line_start":659,"line_end":659,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3246},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723164,"byte_end":723170,"line_start":672,"line_end":672,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn (&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723031,"byte_end":723085,"line_start":670,"line_end":670,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723090,"byte_end":723152,"line_start":671,"line_end":671,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3247},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723670,"byte_end":723674,"line_start":683,"line_end":683,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn (&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723323,"byte_end":723375,"line_start":678,"line_end":678,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723380,"byte_end":723383,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723388,"byte_end":723479,"line_start":680,"line_end":680,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723484,"byte_end":723577,"line_start":681,"line_end":681,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723582,"byte_end":723658,"line_start":682,"line_end":682,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723989,"byte_end":724005,"line_start":691,"line_end":691,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn (&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723768,"byte_end":723812,"line_start":687,"line_end":687,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723817,"byte_end":723870,"line_start":688,"line_end":688,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723875,"byte_end":723910,"line_start":689,"line_end":689,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":723915,"byte_end":723977,"line_start":690,"line_end":690,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724337,"byte_end":724351,"line_start":703,"line_end":703,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn (&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724186,"byte_end":724228,"line_start":700,"line_end":700,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724233,"byte_end":724285,"line_start":701,"line_end":701,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724290,"byte_end":724325,"line_start":702,"line_end":702,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3250},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724672,"byte_end":724681,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn (&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724506,"byte_end":724560,"line_start":711,"line_end":711,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724565,"byte_end":724568,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724573,"byte_end":724585,"line_start":713,"line_end":713,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724590,"byte_end":724593,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":724598,"byte_end":724660,"line_start":715,"line_end":715,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3258},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726407,"byte_end":726420,"line_start":757,"line_end":757,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn (&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726327,"byte_end":726395,"line_start":756,"line_end":756,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3259},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727034,"byte_end":727051,"line_start":768,"line_end":768,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn (Self) -> FlatSamples<Container>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726623,"byte_end":726697,"line_start":762,"line_end":762,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726702,"byte_end":726705,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726710,"byte_end":726798,"line_start":764,"line_end":764,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726803,"byte_end":726896,"line_start":765,"line_end":765,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":726901,"byte_end":726995,"line_start":766,"line_end":766,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727000,"byte_end":727022,"line_start":767,"line_end":767,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3260},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727534,"byte_end":727549,"line_start":783,"line_end":783,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn (&Self) -> FlatSamples<&[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727392,"byte_end":727435,"line_start":780,"line_end":780,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727440,"byte_end":727443,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727448,"byte_end":727522,"line_start":782,"line_end":782,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727982,"byte_end":728001,"line_start":797,"line_end":797,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"fn (&mut Self) -> FlatSamples<&mut [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727832,"byte_end":727883,"line_start":794,"line_end":794,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727888,"byte_end":727891,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":727896,"byte_end":727970,"line_start":796,"line_end":796,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":728748,"byte_end":728758,"line_start":822,"line_end":822,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn (&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":728674,"byte_end":728736,"line_start":821,"line_end":821,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729284,"byte_end":729292,"line_start":833,"line_end":833,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn (&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":728929,"byte_end":728989,"line_start":828,"line_end":828,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":728994,"byte_end":728997,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729002,"byte_end":729093,"line_start":830,"line_end":830,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729098,"byte_end":729191,"line_start":831,"line_end":831,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729196,"byte_end":729272,"line_start":832,"line_end":832,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3268},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729562,"byte_end":729582,"line_start":840,"line_end":840,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn (&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729400,"byte_end":729444,"line_start":837,"line_end":837,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729449,"byte_end":729502,"line_start":838,"line_end":838,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729507,"byte_end":729550,"line_start":839,"line_end":839,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3269},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729956,"byte_end":729974,"line_start":853,"line_end":853,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn (&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729797,"byte_end":729839,"line_start":850,"line_end":850,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729844,"byte_end":729896,"line_start":851,"line_end":851,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":729901,"byte_end":729944,"line_start":852,"line_end":852,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3270},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730337,"byte_end":730350,"line_start":867,"line_end":867,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn (&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730163,"byte_end":730225,"line_start":862,"line_end":862,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730230,"byte_end":730233,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730238,"byte_end":730250,"line_start":864,"line_end":864,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730255,"byte_end":730258,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730263,"byte_end":730325,"line_start":866,"line_end":866,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730799,"byte_end":730808,"line_start":879,"line_end":879,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn (&mut Self, u32, u32, P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730650,"byte_end":730687,"line_start":874,"line_end":874,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730692,"byte_end":730695,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730700,"byte_end":730712,"line_start":876,"line_end":876,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730717,"byte_end":730720,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730725,"byte_end":730787,"line_start":878,"line_end":878,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3275},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731253,"byte_end":731257,"line_start":894,"line_end":894,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn <Q> (&Self, Q) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731062,"byte_end":731115,"line_start":890,"line_end":890,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731120,"byte_end":731123,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731128,"byte_end":731184,"line_start":892,"line_end":892,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731189,"byte_end":731241,"line_start":893,"line_end":893,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3280},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731932,"byte_end":731948,"line_start":920,"line_end":920,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn <Q> (&Self, Q, ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731725,"byte_end":731780,"line_start":915,"line_end":915,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731785,"byte_end":731810,"line_start":916,"line_end":916,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731815,"byte_end":731818,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731823,"byte_end":731895,"line_start":918,"line_end":918,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731900,"byte_end":731920,"line_start":919,"line_end":919,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3328},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738503,"byte_end":738506,"line_start":1133,"line_end":1133,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"fn (u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738313,"byte_end":738374,"line_start":1128,"line_end":1128,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738379,"byte_end":738382,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738387,"byte_end":738399,"line_start":1130,"line_end":1130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738404,"byte_end":738407,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738412,"byte_end":738491,"line_start":1132,"line_end":1132,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739044,"byte_end":739054,"line_start":1149,"line_end":1149,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"fn (u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738864,"byte_end":738915,"line_start":1144,"line_end":1144,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738920,"byte_end":738923,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738928,"byte_end":738940,"line_start":1146,"line_end":1146,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738945,"byte_end":738948,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738953,"byte_end":739032,"line_start":1148,"line_end":1148,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3330},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739569,"byte_end":739576,"line_start":1164,"line_end":1164,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"fn <F> (u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739275,"byte_end":739357,"line_start":1157,"line_end":1157,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739362,"byte_end":739365,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739370,"byte_end":739440,"line_start":1159,"line_end":1159,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739445,"byte_end":739448,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739453,"byte_end":739465,"line_start":1161,"line_end":1161,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739470,"byte_end":739473,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739478,"byte_end":739557,"line_start":1163,"line_end":1163,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3332},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739987,"byte_end":739995,"line_start":1177,"line_end":1177,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"fn (u32, u32, Vec<P::Subpixel>) -> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739867,"byte_end":739921,"line_start":1175,"line_end":1175,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":739926,"byte_end":739975,"line_start":1176,"line_end":1176,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740282,"byte_end":740290,"line_start":1187,"line_end":1187,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"fn (Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740182,"byte_end":740243,"line_start":1185,"line_end":1185,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740248,"byte_end":740270,"line_start":1186,"line_end":1186,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":3334},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740418,"byte_end":740431,"line_start":1193,"line_end":1193,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":3336}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740352,"byte_end":740407,"line_start":1192,"line_end":1192,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740618,"byte_end":740625,"line_start":1198,"line_end":1198,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"fn (&Self) -> T","parent":{"krate":0,"index":3334},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740441,"byte_end":740482,"line_start":1194,"line_end":1194,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740487,"byte_end":740490,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740495,"byte_end":740581,"line_start":1196,"line_end":1196,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740586,"byte_end":740610,"line_start":1197,"line_end":1197,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3338},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740893,"byte_end":740907,"line_start":1206,"line_end":1206,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn (Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740703,"byte_end":740763,"line_start":1203,"line_end":1203,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740768,"byte_end":740836,"line_start":1204,"line_end":1204,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740841,"byte_end":740881,"line_start":1205,"line_end":1205,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":3347},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742651,"byte_end":742659,"line_start":1258,"line_end":1258,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742612,"byte_end":742641,"line_start":1257,"line_end":1257,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3348},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742748,"byte_end":742757,"line_start":1260,"line_end":1260,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742693,"byte_end":742738,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":3349},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742837,"byte_end":742846,"line_start":1262,"line_end":1262,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742792,"byte_end":742827,"line_start":1261,"line_end":1261,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":3350},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742942,"byte_end":742956,"line_start":1264,"line_end":1264,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742881,"byte_end":742932,"line_start":1263,"line_end":1263,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5425},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751569,"byte_end":751571,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751536,"byte_end":751564,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5427},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751632,"byte_end":751635,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751577,"byte_end":751627,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5429},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751690,"byte_end":751694,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751641,"byte_end":751685,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5431},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751749,"byte_end":751754,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751700,"byte_end":751744,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5433},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751795,"byte_end":751798,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751761,"byte_end":751790,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5435},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751860,"byte_end":751864,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751804,"byte_end":751855,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5437},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751898,"byte_end":751903,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751870,"byte_end":751893,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5439},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751938,"byte_end":751944,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751909,"byte_end":751933,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5441},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752000,"byte_end":752004,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751951,"byte_end":751995,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5443},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752059,"byte_end":752064,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752010,"byte_end":752054,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5445},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752090,"byte_end":752105,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5424},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751520,"byte_end":751529,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"ColorType::{L8, La8, Rgb8, Rgba8, L16, La16, Rgb16, Rgba16, Bgr8, Bgra8, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5425},{"krate":0,"index":5427},{"krate":0,"index":5429},{"krate":0,"index":5431},{"krate":0,"index":5433},{"krate":0,"index":5435},{"krate":0,"index":5437},{"krate":0,"index":5439},{"krate":0,"index":5441},{"krate":0,"index":5443},{"krate":0,"index":5445}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":751399,"byte_end":751459,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3369},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752253,"byte_end":752268,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"fn (Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752166,"byte_end":752241,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3370},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752731,"byte_end":752740,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"fn (Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752678,"byte_end":752719,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3372},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753079,"byte_end":753088,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"fn (Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753000,"byte_end":753067,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753482,"byte_end":753496,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"fn (Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753348,"byte_end":753444,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753449,"byte_end":753470,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753659,"byte_end":753672,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"fn (Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753583,"byte_end":753647,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5464},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754334,"byte_end":754336,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754301,"byte_end":754329,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5466},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754397,"byte_end":754400,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754342,"byte_end":754392,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5468},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754455,"byte_end":754459,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754406,"byte_end":754450,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5470},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754514,"byte_end":754519,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754465,"byte_end":754509,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5472},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754558,"byte_end":754560,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754525,"byte_end":754553,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5474},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754621,"byte_end":754624,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754566,"byte_end":754616,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5476},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754679,"byte_end":754683,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754630,"byte_end":754674,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5478},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754738,"byte_end":754743,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754689,"byte_end":754733,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5480},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754782,"byte_end":754784,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754749,"byte_end":754777,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5482},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754845,"byte_end":754848,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754790,"byte_end":754840,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5484},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754903,"byte_end":754907,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754854,"byte_end":754898,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5486},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754962,"byte_end":754967,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754913,"byte_end":754957,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5488},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755006,"byte_end":755008,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754973,"byte_end":755001,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5490},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755069,"byte_end":755072,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755014,"byte_end":755064,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5492},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755127,"byte_end":755131,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755078,"byte_end":755122,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5494},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755186,"byte_end":755191,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755137,"byte_end":755181,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5496},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755231,"byte_end":755234,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755197,"byte_end":755226,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5498},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755296,"byte_end":755300,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755240,"byte_end":755291,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5500},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755356,"byte_end":755361,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755306,"byte_end":755351,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5502},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755417,"byte_end":755423,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755367,"byte_end":755412,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5504},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755478,"byte_end":755482,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755429,"byte_end":755473,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5506},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755537,"byte_end":755542,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755488,"byte_end":755532,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5508},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755771,"byte_end":755778,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755549,"byte_end":755643,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755648,"byte_end":755740,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755745,"byte_end":755766,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5511},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755808,"byte_end":755823,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5463},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5463},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754277,"byte_end":754294,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"ExtendedColorType::{L1, La1, Rgb1, Rgba1, L2, La2, Rgb2, Rgba2, L4, La4, Rgb4, Rgba4, L8, La8, Rgb8, Rgba8, L16, La16, Rgb16, Rgba16, Bgr8, Bgra8, Unknown, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5464},{"krate":0,"index":5466},{"krate":0,"index":5468},{"krate":0,"index":5470},{"krate":0,"index":5472},{"krate":0,"index":5474},{"krate":0,"index":5476},{"krate":0,"index":5478},{"krate":0,"index":5480},{"krate":0,"index":5482},{"krate":0,"index":5484},{"krate":0,"index":5486},{"krate":0,"index":5488},{"krate":0,"index":5490},{"krate":0,"index":5492},{"krate":0,"index":5494},{"krate":0,"index":5496},{"krate":0,"index":5498},{"krate":0,"index":5500},{"krate":0,"index":5502},{"krate":0,"index":5504},{"krate":0,"index":5506},{"krate":0,"index":5508},{"krate":0,"index":5511}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753770,"byte_end":753833,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753834,"byte_end":753837,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753838,"byte_end":753935,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":753936,"byte_end":754033,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754034,"byte_end":754063,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754064,"byte_end":754067,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754068,"byte_end":754160,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":754161,"byte_end":754216,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3377},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":756106,"byte_end":756119,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"fn (Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755892,"byte_end":755947,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755952,"byte_end":755955,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755960,"byte_end":756054,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":756059,"byte_end":756094,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5829},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":762483,"byte_end":762486,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758233,"byte_end":758243,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758244,"byte_end":758266,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5858},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":762563,"byte_end":762566,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758233,"byte_end":758243,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758244,"byte_end":758266,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5887},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":762642,"byte_end":762646,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758233,"byte_end":758243,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758244,"byte_end":758266,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5916},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":762723,"byte_end":762727,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758233,"byte_end":758243,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758244,"byte_end":758266,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5945},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":762823,"byte_end":762827,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758233,"byte_end":758243,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758244,"byte_end":758266,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5974},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":762922,"byte_end":762927,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758233,"byte_end":758243,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":758244,"byte_end":758266,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":3381},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763094,"byte_end":763103,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":3383}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763022,"byte_end":763083,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3383},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763193,"byte_end":763203,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn (&mut Self, &Other) -> ()","parent":{"krate":0,"index":3381},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763117,"byte_end":763185,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6055},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791122,"byte_end":791132,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791075,"byte_end":791117,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6058},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791208,"byte_end":791219,"line_start":45,"line_end":45,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791150,"byte_end":791203,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6061},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791288,"byte_end":791297,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791242,"byte_end":791283,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6064},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791371,"byte_end":791381,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791314,"byte_end":791366,"line_start":50,"line_end":50,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6067},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791445,"byte_end":791454,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791399,"byte_end":791440,"line_start":53,"line_end":53,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6070},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791528,"byte_end":791538,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791471,"byte_end":791523,"line_start":56,"line_end":56,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6073},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791604,"byte_end":791615,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791556,"byte_end":791599,"line_start":59,"line_end":59,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6076},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791694,"byte_end":791706,"line_start":63,"line_end":63,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791635,"byte_end":791689,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6079},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791778,"byte_end":791788,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791731,"byte_end":791773,"line_start":65,"line_end":65,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6082},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791865,"byte_end":791876,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":6054},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791807,"byte_end":791860,"line_start":68,"line_end":68,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":6054},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791056,"byte_end":791068,"line_start":40,"line_end":40,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"DynamicImage::{ImageLuma8, ImageLumaA8, ImageRgb8, ImageRgba8, ImageBgr8, ImageBgra8, ImageLuma16, ImageLumaA16, ImageRgb16, ImageRgba16}","parent":null,"children":[{"krate":0,"index":6055},{"krate":0,"index":6058},{"krate":0,"index":6061},{"krate":0,"index":6064},{"krate":0,"index":6067},{"krate":0,"index":6070},{"krate":0,"index":6073},{"krate":0,"index":6076},{"krate":0,"index":6079},{"krate":0,"index":6082}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":791010,"byte_end":791029,"line_start":38,"line_end":38,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3606},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796091,"byte_end":796100,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796017,"byte_end":796079,"line_start":135,"line_end":135,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3607},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796303,"byte_end":796314,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796203,"byte_end":796257,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796262,"byte_end":796291,"line_start":141,"line_end":141,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3608},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796491,"byte_end":796499,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796418,"byte_end":796479,"line_start":146,"line_end":146,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3609},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796675,"byte_end":796684,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796601,"byte_end":796663,"line_start":151,"line_end":151,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3610},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796861,"byte_end":796870,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796787,"byte_end":796849,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3611},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797046,"byte_end":797054,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":796973,"byte_end":797034,"line_start":161,"line_end":161,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3612},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797230,"byte_end":797240,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797156,"byte_end":797218,"line_start":166,"line_end":166,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3613},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797444,"byte_end":797456,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797344,"byte_end":797398,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797403,"byte_end":797432,"line_start":172,"line_end":172,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3614},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797634,"byte_end":797643,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797561,"byte_end":797622,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3615},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797820,"byte_end":797830,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"fn (u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797746,"byte_end":797808,"line_start":182,"line_end":182,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3616},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797996,"byte_end":798008,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"fn <'a, impl ImageDecoder<'a>> (impl ImageDecoder<'a>) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":797934,"byte_end":797984,"line_start":187,"line_end":187,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3619},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798186,"byte_end":798192,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"fn (&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798125,"byte_end":798174,"line_start":194,"line_end":194,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3620},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798361,"byte_end":798368,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"fn (&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798299,"byte_end":798349,"line_start":201,"line_end":201,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3621},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798537,"byte_end":798543,"line_start":209,"line_end":209,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"fn (&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798476,"byte_end":798525,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798712,"byte_end":798719,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"fn (&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798650,"byte_end":798700,"line_start":215,"line_end":215,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3623},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798888,"byte_end":798895,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"fn (&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":798827,"byte_end":798876,"line_start":222,"line_end":222,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3624},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799065,"byte_end":799078,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"fn (&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799003,"byte_end":799053,"line_start":229,"line_end":229,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3625},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799370,"byte_end":799378,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"fn (Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799191,"byte_end":799237,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799242,"byte_end":799245,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799250,"byte_end":799320,"line_start":238,"line_end":238,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799325,"byte_end":799358,"line_start":239,"line_end":239,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3626},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799695,"byte_end":799704,"line_start":251,"line_end":251,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"fn (Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799515,"byte_end":799562,"line_start":247,"line_end":247,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799567,"byte_end":799570,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799575,"byte_end":799645,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799650,"byte_end":799683,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3627},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800023,"byte_end":800031,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"fn (Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799844,"byte_end":799890,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799895,"byte_end":799898,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799903,"byte_end":799973,"line_start":260,"line_end":260,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":799978,"byte_end":800011,"line_start":261,"line_end":261,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800348,"byte_end":800357,"line_start":273,"line_end":273,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"fn (Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800168,"byte_end":800215,"line_start":269,"line_end":269,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800220,"byte_end":800223,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800228,"byte_end":800298,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800303,"byte_end":800336,"line_start":272,"line_end":272,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3629},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800677,"byte_end":800686,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"fn (Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800497,"byte_end":800544,"line_start":280,"line_end":280,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800549,"byte_end":800552,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800557,"byte_end":800627,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800632,"byte_end":800665,"line_start":283,"line_end":283,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3630},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801007,"byte_end":801022,"line_start":295,"line_end":295,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"fn (Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800826,"byte_end":800874,"line_start":291,"line_end":291,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800879,"byte_end":800882,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800887,"byte_end":800957,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":800962,"byte_end":800995,"line_start":294,"line_end":294,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801404,"byte_end":801408,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn (&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801174,"byte_end":801245,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801250,"byte_end":801253,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801258,"byte_end":801309,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801314,"byte_end":801392,"line_start":305,"line_end":305,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3632},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801665,"byte_end":801673,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"fn (&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801582,"byte_end":801653,"line_start":310,"line_end":310,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3633},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801898,"byte_end":801905,"line_start":316,"line_end":316,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn (&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":801843,"byte_end":801886,"line_start":315,"line_end":315,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802120,"byte_end":802131,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn (&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802057,"byte_end":802108,"line_start":323,"line_end":323,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3635},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802350,"byte_end":802357,"line_start":332,"line_end":332,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"fn (&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802295,"byte_end":802338,"line_start":331,"line_end":331,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802572,"byte_end":802583,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"fn (&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802509,"byte_end":802560,"line_start":339,"line_end":339,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3637},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802803,"byte_end":802811,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn (&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802747,"byte_end":802791,"line_start":347,"line_end":347,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3638},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803029,"byte_end":803041,"line_start":356,"line_end":356,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn (&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":802965,"byte_end":803017,"line_start":355,"line_end":355,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803263,"byte_end":803271,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"fn (&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803207,"byte_end":803251,"line_start":363,"line_end":363,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803489,"byte_end":803501,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"fn (&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803425,"byte_end":803477,"line_start":371,"line_end":371,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3641},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803728,"byte_end":803736,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn (&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803667,"byte_end":803716,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3642},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803959,"byte_end":803971,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn (&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":803890,"byte_end":803947,"line_start":387,"line_end":387,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3643},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804220,"byte_end":804234,"line_start":396,"line_end":396,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn (&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804137,"byte_end":804208,"line_start":395,"line_end":395,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3644},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804485,"byte_end":804503,"line_start":404,"line_end":404,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn (&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804394,"byte_end":804473,"line_start":403,"line_end":403,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3645},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804731,"byte_end":804739,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"fn (&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804675,"byte_end":804719,"line_start":411,"line_end":411,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804958,"byte_end":804970,"line_start":420,"line_end":420,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"fn (&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":804894,"byte_end":804946,"line_start":419,"line_end":419,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3647},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805194,"byte_end":805203,"line_start":428,"line_end":428,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"fn (&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805137,"byte_end":805182,"line_start":427,"line_end":427,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3648},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805425,"byte_end":805438,"line_start":436,"line_end":436,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"fn (&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805360,"byte_end":805413,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3649},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805669,"byte_end":805678,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"fn (&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805607,"byte_end":805657,"line_start":443,"line_end":443,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3650},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805905,"byte_end":805918,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"fn (&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":805835,"byte_end":805893,"line_start":451,"line_end":451,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3651},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":806171,"byte_end":806186,"line_start":460,"line_end":460,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"fn (&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":806087,"byte_end":806159,"line_start":459,"line_end":459,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":806441,"byte_end":806460,"line_start":468,"line_end":468,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"fn (&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":806349,"byte_end":806429,"line_start":467,"line_end":467,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3653},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":806719,"byte_end":806737,"line_start":476,"line_end":476,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"fn (&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":806635,"byte_end":806707,"line_start":475,"line_end":475,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3654},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":807371,"byte_end":807390,"line_start":489,"line_end":489,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"fn (&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":807286,"byte_end":807359,"line_start":488,"line_end":488,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3655},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":807857,"byte_end":807865,"line_start":500,"line_end":500,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"fn (&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":807797,"byte_end":807845,"line_start":499,"line_end":499,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3656},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":807973,"byte_end":807978,"line_start":505,"line_end":505,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn (&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":807926,"byte_end":807961,"line_start":504,"line_end":504,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3657},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":808782,"byte_end":808791,"line_start":521,"line_end":521,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn (&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":808725,"byte_end":808770,"line_start":520,"line_end":520,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":809897,"byte_end":809903,"line_start":538,"line_end":538,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn (&mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":809811,"byte_end":809847,"line_start":536,"line_end":536,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":809852,"byte_end":809885,"line_start":537,"line_end":537,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3659},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810267,"byte_end":810273,"line_start":546,"line_end":546,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn (&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":809990,"byte_end":810049,"line_start":542,"line_end":542,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810054,"byte_end":810117,"line_start":543,"line_end":543,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810122,"byte_end":810184,"line_start":544,"line_end":544,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810189,"byte_end":810255,"line_start":545,"line_end":545,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810737,"byte_end":810749,"line_start":556,"line_end":556,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn (&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810535,"byte_end":810594,"line_start":553,"line_end":553,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810599,"byte_end":810655,"line_start":554,"line_end":554,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810660,"byte_end":810725,"line_start":555,"line_end":555,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3661},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811440,"byte_end":811449,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn (&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":810965,"byte_end":811021,"line_start":565,"line_end":565,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811026,"byte_end":811089,"line_start":566,"line_end":566,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811094,"byte_end":811156,"line_start":567,"line_end":567,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811161,"byte_end":811227,"line_start":568,"line_end":568,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811232,"byte_end":811235,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811240,"byte_end":811303,"line_start":570,"line_end":570,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811308,"byte_end":811358,"line_start":571,"line_end":571,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811363,"byte_end":811428,"line_start":572,"line_end":572,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812057,"byte_end":812072,"line_start":585,"line_end":585,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn (&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811675,"byte_end":811720,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811725,"byte_end":811781,"line_start":580,"line_end":580,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811786,"byte_end":811852,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811857,"byte_end":811920,"line_start":582,"line_end":582,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811925,"byte_end":811975,"line_start":583,"line_end":583,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":811980,"byte_end":812045,"line_start":584,"line_end":584,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812592,"byte_end":812606,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn (&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812214,"byte_end":812273,"line_start":589,"line_end":589,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812278,"byte_end":812341,"line_start":590,"line_end":590,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812346,"byte_end":812408,"line_start":591,"line_end":591,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812413,"byte_end":812475,"line_start":592,"line_end":592,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812480,"byte_end":812544,"line_start":593,"line_end":593,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":812549,"byte_end":812580,"line_start":594,"line_end":594,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3664},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813426,"byte_end":813430,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn (&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813314,"byte_end":813357,"line_start":616,"line_end":616,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813362,"byte_end":813414,"line_start":617,"line_end":617,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3665},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813808,"byte_end":813817,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn (&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813542,"byte_end":813587,"line_start":622,"line_end":622,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813592,"byte_end":813643,"line_start":623,"line_end":623,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813648,"byte_end":813704,"line_start":624,"line_end":624,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813709,"byte_end":813712,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813717,"byte_end":813796,"line_start":626,"line_end":626,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3666},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814026,"byte_end":814035,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn (&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":813961,"byte_end":814014,"line_start":631,"line_end":631,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3667},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814445,"byte_end":814460,"line_start":643,"line_end":643,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn (&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814242,"byte_end":814280,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814285,"byte_end":814344,"line_start":641,"line_end":641,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814349,"byte_end":814433,"line_start":642,"line_end":642,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814760,"byte_end":814768,"line_start":650,"line_end":650,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn (&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814568,"byte_end":814606,"line_start":647,"line_end":647,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814611,"byte_end":814667,"line_start":648,"line_end":648,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814672,"byte_end":814748,"line_start":649,"line_end":649,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815116,"byte_end":815125,"line_start":658,"line_end":658,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn (&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814884,"byte_end":814918,"line_start":654,"line_end":654,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814923,"byte_end":814974,"line_start":655,"line_end":655,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":814979,"byte_end":815048,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815053,"byte_end":815104,"line_start":657,"line_end":657,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815284,"byte_end":815289,"line_start":663,"line_end":663,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn (&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815242,"byte_end":815272,"line_start":662,"line_end":662,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3671},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815435,"byte_end":815440,"line_start":668,"line_end":668,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn (&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815391,"byte_end":815423,"line_start":667,"line_end":667,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3672},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815599,"byte_end":815607,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn (&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815544,"byte_end":815587,"line_start":672,"line_end":672,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815760,"byte_end":815769,"line_start":678,"line_end":678,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn (&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815704,"byte_end":815748,"line_start":677,"line_end":677,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3674},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815923,"byte_end":815932,"line_start":683,"line_end":683,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn (&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":815867,"byte_end":815911,"line_start":682,"line_end":682,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3675},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":816087,"byte_end":816095,"line_start":688,"line_end":688,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn <W, F> (&Self, &mut W, F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":816030,"byte_end":816075,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3678},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820007,"byte_end":820011,"line_start":792,"line_end":792,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn <Q> (&Self, Q) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":819873,"byte_end":819926,"line_start":789,"line_end":789,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":819931,"byte_end":819934,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":819939,"byte_end":819995,"line_start":791,"line_end":791,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3680},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820383,"byte_end":820399,"line_start":806,"line_end":806,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn <Q> (&Self, Q, ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820176,"byte_end":820231,"line_start":801,"line_end":801,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820236,"byte_end":820261,"line_start":802,"line_end":802,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820266,"byte_end":820269,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820274,"byte_end":820346,"line_start":804,"line_end":804,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820351,"byte_end":820371,"line_start":805,"line_end":805,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3700},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827261,"byte_end":827265,"line_start":984,"line_end":984,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn <P> (P) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":826959,"byte_end":827008,"line_start":977,"line_end":977,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827009,"byte_end":827077,"line_start":978,"line_end":978,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827078,"byte_end":827081,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827082,"byte_end":827178,"line_start":980,"line_end":980,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827179,"byte_end":827207,"line_start":981,"line_end":981,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827208,"byte_end":827211,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827212,"byte_end":827253,"line_start":983,"line_end":983,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3702},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827820,"byte_end":827836,"line_start":999,"line_end":999,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn <P> (P) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827455,"byte_end":827522,"line_start":992,"line_end":992,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827523,"byte_end":827603,"line_start":993,"line_end":993,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827604,"byte_end":827607,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827608,"byte_end":827704,"line_start":995,"line_end":995,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827705,"byte_end":827766,"line_start":996,"line_end":996,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827767,"byte_end":827770,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":827771,"byte_end":827812,"line_start":998,"line_end":998,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3704},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828411,"byte_end":828422,"line_start":1014,"line_end":1014,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn <P> (P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828036,"byte_end":828098,"line_start":1007,"line_end":1007,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828099,"byte_end":828102,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828103,"byte_end":828189,"line_start":1009,"line_end":1009,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828190,"byte_end":828251,"line_start":1010,"line_end":1010,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828253,"byte_end":828344,"line_start":1012,"line_end":1012,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828345,"byte_end":828403,"line_start":1013,"line_end":1013,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":3706},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829076,"byte_end":829099,"line_start":1036,"line_end":1036,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn <P> (P, &[u8], u32, u32, color::ColorType, ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828728,"byte_end":828789,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828790,"byte_end":828818,"line_start":1029,"line_end":1029,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828819,"byte_end":828822,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828823,"byte_end":828885,"line_start":1031,"line_end":1031,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828886,"byte_end":828918,"line_start":1032,"line_end":1032,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828919,"byte_end":828979,"line_start":1033,"line_end":1033,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":828980,"byte_end":829038,"line_start":1034,"line_end":1034,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829039,"byte_end":829068,"line_start":1035,"line_end":1035,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":3708},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829662,"byte_end":829678,"line_start":1059,"line_end":1059,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn (&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829418,"byte_end":829458,"line_start":1051,"line_end":1051,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829459,"byte_end":829462,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829463,"byte_end":829514,"line_start":1053,"line_end":1053,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829515,"byte_end":829557,"line_start":1054,"line_end":1054,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829558,"byte_end":829561,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829562,"byte_end":829608,"line_start":1056,"line_end":1056,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829609,"byte_end":829612,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829613,"byte_end":829654,"line_start":1058,"line_end":1058,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3709},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830160,"byte_end":830188,"line_start":1074,"line_end":1074,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn (&[u8], ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829833,"byte_end":829873,"line_start":1064,"line_end":1064,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829874,"byte_end":829877,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829878,"byte_end":829975,"line_start":1066,"line_end":1066,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":829976,"byte_end":830010,"line_start":1067,"line_end":1067,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830011,"byte_end":830014,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830015,"byte_end":830061,"line_start":1069,"line_end":1069,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830062,"byte_end":830065,"line_start":1070,"line_end":1070,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830066,"byte_end":830092,"line_start":1071,"line_end":1071,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830093,"byte_end":830134,"line_start":1072,"line_end":1072,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":830135,"byte_end":830152,"line_start":1073,"line_end":1073,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6088},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834911,"byte_end":834914,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834880,"byte_end":834906,"line_start":24,"line_end":24,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6090},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834953,"byte_end":834957,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834921,"byte_end":834948,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6092},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834995,"byte_end":834998,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834964,"byte_end":834990,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6094},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835037,"byte_end":835041,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835005,"byte_end":835032,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6096},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835087,"byte_end":835090,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835048,"byte_end":835082,"line_start":36,"line_end":36,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6098},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835129,"byte_end":835133,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835097,"byte_end":835124,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6100},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835171,"byte_end":835174,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835140,"byte_end":835166,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6102},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835212,"byte_end":835215,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835181,"byte_end":835207,"line_start":45,"line_end":45,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6104},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835253,"byte_end":835256,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835222,"byte_end":835248,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6106},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835294,"byte_end":835297,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835263,"byte_end":835289,"line_start":51,"line_end":51,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6108},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835344,"byte_end":835347,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835304,"byte_end":835339,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6110},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835390,"byte_end":835398,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835354,"byte_end":835385,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6112},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835424,"byte_end":835439,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":6087},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6087},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834862,"byte_end":834873,"line_start":23,"line_end":23,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"ImageFormat::{Png, Jpeg, Gif, WebP, Pnm, Tiff, Tga, Dds, Bmp, Ico, Hdr, Farbfeld, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":6088},{"krate":0,"index":6090},{"krate":0,"index":6092},{"krate":0,"index":6094},{"krate":0,"index":6096},{"krate":0,"index":6098},{"krate":0,"index":6100},{"krate":0,"index":6102},{"krate":0,"index":6104},{"krate":0,"index":6106},{"krate":0,"index":6108},{"krate":0,"index":6110},{"krate":0,"index":6112}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834699,"byte_end":834745,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":834746,"byte_end":834801,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3736},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835581,"byte_end":835590,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"fn <P> (P) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835502,"byte_end":835569,"line_start":65,"line_end":65,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3738},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836441,"byte_end":836455,"line_start":81,"line_end":81,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"fn (Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835851,"byte_end":835910,"line_start":72,"line_end":72,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835915,"byte_end":835918,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835923,"byte_end":836010,"line_start":74,"line_end":74,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836015,"byte_end":836109,"line_start":75,"line_end":75,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836114,"byte_end":836209,"line_start":76,"line_end":76,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836214,"byte_end":836225,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836230,"byte_end":836233,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836238,"byte_end":836332,"line_start":79,"line_end":79,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":836337,"byte_end":836429,"line_start":80,"line_end":80,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6131},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837349,"byte_end":837352,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837290,"byte_end":837313,"line_start":103,"line_end":103,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837318,"byte_end":837344,"line_start":104,"line_end":104,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6133},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837443,"byte_end":837447,"line_start":109,"line_end":109,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837359,"byte_end":837383,"line_start":107,"line_end":107,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837388,"byte_end":837438,"line_start":108,"line_end":108,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6136},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837529,"byte_end":837532,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageOutputFormat::Pnm","value":"ImageOutputFormat::Pnm(PNMSubtype)","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837458,"byte_end":837481,"line_start":111,"line_end":111,"column_start":5,"column_end":28}},{"value":"/ An Image in one of the PNM Formats","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837486,"byte_end":837524,"line_start":112,"line_end":112,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6139},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837610,"byte_end":837613,"line_start":117,"line_end":117,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageOutputFormat::Gif","value":"ImageOutputFormat::Gif","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837551,"byte_end":837574,"line_start":115,"line_end":115,"column_start":5,"column_end":28}},{"value":"/ An Image in GIF Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837579,"byte_end":837605,"line_start":116,"line_end":116,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6141},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837679,"byte_end":837682,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageOutputFormat::Ico","value":"ImageOutputFormat::Ico","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837620,"byte_end":837643,"line_start":119,"line_end":119,"column_start":5,"column_end":28}},{"value":"/ An Image in ICO Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837648,"byte_end":837674,"line_start":120,"line_end":120,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6143},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837748,"byte_end":837751,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837689,"byte_end":837712,"line_start":123,"line_end":123,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837717,"byte_end":837743,"line_start":124,"line_end":124,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6145},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837827,"byte_end":837835,"line_start":129,"line_end":129,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageOutputFormat::Farbfeld","value":"ImageOutputFormat::Farbfeld","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837758,"byte_end":837786,"line_start":127,"line_end":127,"column_start":5,"column_end":33}},{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837791,"byte_end":837822,"line_start":128,"line_end":128,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6147},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837901,"byte_end":837904,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageOutputFormat::Tga","value":"ImageOutputFormat::Tga","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837842,"byte_end":837865,"line_start":131,"line_end":131,"column_start":5,"column_end":28}},{"value":"/ An Image in TGA Format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837870,"byte_end":837896,"line_start":132,"line_end":132,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6149},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":838156,"byte_end":838167,"line_start":138,"line_end":138,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837911,"byte_end":837983,"line_start":135,"line_end":135,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6152},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":838201,"byte_end":838216,"line_start":141,"line_end":141,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":6130},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6130},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837266,"byte_end":837283,"line_start":102,"line_end":102,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"ImageOutputFormat::{Png, Jpeg, Pnm, Gif, Ico, Bmp, Farbfeld, Tga, Unsupported, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":6131},{"krate":0,"index":6133},{"krate":0,"index":6136},{"krate":0,"index":6139},{"krate":0,"index":6141},{"krate":0,"index":6143},{"krate":0,"index":6145},{"krate":0,"index":6147},{"krate":0,"index":6149},{"krate":0,"index":6152}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":837158,"byte_end":837217,"line_start":100,"line_end":100,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6166},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847432,"byte_end":847440,"line_start":360,"line_end":360,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":6167},{"krate":0,"index":6168}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847028,"byte_end":847078,"line_start":354,"line_end":354,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847079,"byte_end":847082,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847083,"byte_end":847180,"line_start":356,"line_end":356,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847181,"byte_end":847275,"line_start":357,"line_end":357,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847276,"byte_end":847375,"line_start":358,"line_end":358,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3764},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847548,"byte_end":847555,"line_start":367,"line_end":367,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"fn (Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847500,"byte_end":847536,"line_start":366,"line_end":366,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847728,"byte_end":847733,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"fn (Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847603,"byte_end":847648,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847653,"byte_end":847656,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847661,"byte_end":847716,"line_start":373,"line_end":373,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3766},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847843,"byte_end":847852,"line_start":379,"line_end":379,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"fn (Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847779,"byte_end":847831,"line_start":378,"line_end":378,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":3767},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847981,"byte_end":847993,"line_start":385,"line_end":385,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":3769},{"krate":0,"index":3770},{"krate":0,"index":3771},{"krate":0,"index":3772},{"krate":0,"index":3773},{"krate":0,"index":3774},{"krate":0,"index":3775},{"krate":0,"index":3776},{"krate":0,"index":3778}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847929,"byte_end":847970,"line_start":384,"line_end":384,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3769},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848070,"byte_end":848076,"line_start":387,"line_end":387,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848011,"byte_end":848060,"line_start":386,"line_end":386,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3770},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848166,"byte_end":848176,"line_start":390,"line_end":390,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn (&Self) -> (u32, u32)","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848094,"byte_end":848158,"line_start":389,"line_end":389,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848281,"byte_end":848291,"line_start":393,"line_end":393,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"fn (&Self) -> ColorType","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848204,"byte_end":848273,"line_start":392,"line_end":392,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3772},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848385,"byte_end":848404,"line_start":396,"line_end":396,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"fn (&Self) -> ExtendedColorType","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848318,"byte_end":848377,"line_start":395,"line_end":395,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3773},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848745,"byte_end":848756,"line_start":403,"line_end":403,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn (Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848479,"byte_end":848563,"line_start":400,"line_end":400,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848568,"byte_end":848664,"line_start":401,"line_end":401,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848669,"byte_end":848737,"line_start":402,"line_end":402,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3774},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849143,"byte_end":849154,"line_start":411,"line_end":411,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn (&Self) -> u64","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848798,"byte_end":848857,"line_start":405,"line_end":405,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848862,"byte_end":848865,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848870,"byte_end":848943,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":848948,"byte_end":849024,"line_start":408,"line_end":408,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849029,"byte_end":849121,"line_start":409,"line_end":409,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849126,"byte_end":849135,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3775},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849491,"byte_end":849505,"line_start":418,"line_end":418,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn (&Self) -> u64","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849333,"byte_end":849429,"line_start":416,"line_end":416,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849434,"byte_end":849483,"line_start":417,"line_end":417,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3776},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850394,"byte_end":850404,"line_start":442,"line_end":442,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn (Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849560,"byte_end":849599,"line_start":422,"line_end":422,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849604,"byte_end":849607,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849612,"byte_end":849700,"line_start":424,"line_end":424,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849705,"byte_end":849798,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849803,"byte_end":849901,"line_start":426,"line_end":426,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849906,"byte_end":849976,"line_start":427,"line_end":427,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849981,"byte_end":849984,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":849989,"byte_end":850001,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850006,"byte_end":850009,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850014,"byte_end":850074,"line_start":431,"line_end":431,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850079,"byte_end":850082,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850087,"byte_end":850101,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850106,"byte_end":850109,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850114,"byte_end":850129,"line_start":435,"line_end":435,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850134,"byte_end":850173,"line_start":436,"line_end":436,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850178,"byte_end":850242,"line_start":437,"line_end":437,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850247,"byte_end":850312,"line_start":438,"line_end":438,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850317,"byte_end":850360,"line_start":439,"line_end":439,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850365,"byte_end":850376,"line_start":440,"line_end":440,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850381,"byte_end":850386,"line_start":441,"line_end":441,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":3778},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850632,"byte_end":850656,"line_start":448,"line_end":448,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn <F> (Self, &mut [u8], F) -> ImageResult<()>","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850510,"byte_end":850606,"line_start":446,"line_end":446,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":850611,"byte_end":850624,"line_start":447,"line_end":447,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3780},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":851679,"byte_end":851694,"line_start":482,"line_end":482,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":3782},{"krate":0,"index":3784}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":851606,"byte_end":851668,"line_start":481,"line_end":481,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3782},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":851849,"byte_end":851858,"line_start":484,"line_end":484,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"fn (&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3780},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":851731,"byte_end":851841,"line_start":483,"line_end":483,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852800,"byte_end":852823,"line_start":507,"line_end":507,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"fn <F> (&mut Self, u32, u32, u32, u32, &mut [u8], F) -> ImageResult<()>","parent":{"krate":0,"index":3780},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852084,"byte_end":852163,"line_start":495,"line_end":495,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852168,"byte_end":852171,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852176,"byte_end":852237,"line_start":497,"line_end":497,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852242,"byte_end":852316,"line_start":498,"line_end":498,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852321,"byte_end":852380,"line_start":499,"line_end":499,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852385,"byte_end":852388,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852393,"byte_end":852485,"line_start":501,"line_end":501,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852490,"byte_end":852549,"line_start":502,"line_end":502,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852554,"byte_end":852614,"line_start":503,"line_end":503,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852619,"byte_end":852622,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852627,"byte_end":852691,"line_start":505,"line_end":505,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":852696,"byte_end":852792,"line_start":506,"line_end":506,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":3786},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853054,"byte_end":853070,"line_start":519,"line_end":519,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":3788}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853017,"byte_end":853043,"line_start":518,"line_end":518,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3788},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853142,"byte_end":853153,"line_start":521,"line_end":521,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn (Self) -> Frames","parent":{"krate":0,"index":3786},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853081,"byte_end":853134,"line_start":520,"line_end":520,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":3789},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853225,"byte_end":853237,"line_start":525,"line_end":525,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":3790}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853178,"byte_end":853214,"line_start":524,"line_end":524,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3790},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853786,"byte_end":853797,"line_start":536,"line_end":536,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"fn (Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3789},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853244,"byte_end":853296,"line_start":526,"line_end":526,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853301,"byte_end":853304,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853309,"byte_end":853380,"line_start":528,"line_end":528,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853385,"byte_end":853461,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853466,"byte_end":853541,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853546,"byte_end":853620,"line_start":531,"line_end":531,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853625,"byte_end":853673,"line_start":532,"line_end":532,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853678,"byte_end":853681,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853686,"byte_end":853755,"line_start":534,"line_end":534,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853760,"byte_end":853778,"line_start":535,"line_end":535,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6181},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853991,"byte_end":853997,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":6184},{"krate":0,"index":6185},{"krate":0,"index":6186},{"krate":0,"index":6187},{"krate":0,"index":6188}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":853934,"byte_end":853962,"line_start":545,"line_end":545,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":3799},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854738,"byte_end":854754,"line_start":584,"line_end":584,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":3800},{"krate":0,"index":3801},{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3806},{"krate":0,"index":3807},{"krate":0,"index":3808},{"krate":0,"index":3809},{"krate":0,"index":3810},{"krate":0,"index":3811}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854697,"byte_end":854727,"line_start":583,"line_end":583,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":3800},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854793,"byte_end":854798,"line_start":586,"line_end":586,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854761,"byte_end":854783,"line_start":585,"line_end":585,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":3801},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855032,"byte_end":855046,"line_start":591,"line_end":591,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854812,"byte_end":854883,"line_start":588,"line_end":588,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854888,"byte_end":854959,"line_start":589,"line_end":589,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854964,"byte_end":855022,"line_start":590,"line_end":590,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3802},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855139,"byte_end":855149,"line_start":594,"line_end":594,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn (&Self) -> (u32, u32)","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855092,"byte_end":855131,"line_start":593,"line_end":593,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3803},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855213,"byte_end":855218,"line_start":597,"line_end":597,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn (&Self) -> u32","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855177,"byte_end":855205,"line_start":596,"line_end":596,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855333,"byte_end":855339,"line_start":603,"line_end":603,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn (&Self) -> u32","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855296,"byte_end":855325,"line_start":602,"line_end":602,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3805},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855466,"byte_end":855472,"line_start":609,"line_end":609,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn (&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855417,"byte_end":855458,"line_start":608,"line_end":608,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855589,"byte_end":855598,"line_start":612,"line_end":612,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn (&Self, u32, u32) -> bool","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855510,"byte_end":855581,"line_start":611,"line_end":611,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3807},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855921,"byte_end":855930,"line_start":624,"line_end":624,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn (&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855746,"byte_end":855785,"line_start":617,"line_end":617,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855790,"byte_end":855793,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855798,"byte_end":855810,"line_start":619,"line_end":619,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855815,"byte_end":855818,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855823,"byte_end":855863,"line_start":621,"line_end":621,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855868,"byte_end":855871,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855876,"byte_end":855913,"line_start":623,"line_end":623,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3808},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856251,"byte_end":856267,"line_start":634,"line_end":634,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"fn (&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":855975,"byte_end":856014,"line_start":626,"line_end":626,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856019,"byte_end":856022,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856027,"byte_end":856102,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856107,"byte_end":856119,"line_start":629,"line_end":629,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856124,"byte_end":856127,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856132,"byte_end":856187,"line_start":631,"line_end":631,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856192,"byte_end":856195,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856200,"byte_end":856236,"line_start":633,"line_end":633,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3809},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856499,"byte_end":856505,"line_start":641,"line_end":641,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn (&Self) -> Pixels<, Self>","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856348,"byte_end":856402,"line_start":638,"line_end":638,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856407,"byte_end":856460,"line_start":639,"line_end":639,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856465,"byte_end":856491,"line_start":640,"line_end":640,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856775,"byte_end":856780,"line_start":654,"line_end":654,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"fn (&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856719,"byte_end":856767,"line_start":653,"line_end":653,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3811},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856977,"byte_end":856981,"line_start":658,"line_end":658,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn (&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":3799},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856819,"byte_end":856885,"line_start":656,"line_end":656,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":856890,"byte_end":856969,"line_start":657,"line_end":657,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":3812},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857180,"byte_end":857192,"line_start":664,"line_end":664,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3816},{"krate":0,"index":3817},{"krate":0,"index":3818},{"krate":0,"index":3820},{"krate":0,"index":3822},{"krate":0,"index":3823}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857133,"byte_end":857169,"line_start":663,"line_end":663,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":3813},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857437,"byte_end":857447,"line_start":668,"line_end":668,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857217,"byte_end":857288,"line_start":665,"line_end":665,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857293,"byte_end":857364,"line_start":666,"line_end":666,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857369,"byte_end":857427,"line_start":667,"line_end":667,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3814},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857637,"byte_end":857650,"line_start":675,"line_end":675,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn (&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857489,"byte_end":857551,"line_start":670,"line_end":670,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857556,"byte_end":857559,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857564,"byte_end":857576,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857581,"byte_end":857584,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857589,"byte_end":857629,"line_start":674,"line_end":674,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3815},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857824,"byte_end":857833,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn (&mut Self, u32, u32, Self::Pixel) -> ()","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857704,"byte_end":857738,"line_start":677,"line_end":677,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857743,"byte_end":857746,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857751,"byte_end":857763,"line_start":679,"line_end":679,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857768,"byte_end":857771,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857776,"byte_end":857816,"line_start":681,"line_end":681,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858187,"byte_end":858203,"line_start":692,"line_end":692,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"fn (&mut Self, u32, u32, Self::Pixel) -> ()","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857887,"byte_end":857922,"line_start":684,"line_end":684,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857927,"byte_end":857930,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857935,"byte_end":858010,"line_start":686,"line_end":686,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858015,"byte_end":858027,"line_start":687,"line_end":687,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858032,"byte_end":858035,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858040,"byte_end":858095,"line_start":689,"line_end":689,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858100,"byte_end":858103,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858108,"byte_end":858172,"line_start":691,"line_end":691,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858470,"byte_end":858481,"line_start":699,"line_end":699,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn (&mut Self, u32, u32, Self::Pixel) -> ()","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858301,"byte_end":858371,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858376,"byte_end":858379,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858384,"byte_end":858462,"line_start":698,"line_end":698,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3818},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":859243,"byte_end":859252,"line_start":716,"line_end":716,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn <O> (&mut Self, &O, u32, u32) -> ImageResult<()>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858535,"byte_end":858599,"line_start":701,"line_end":701,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858604,"byte_end":858607,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858612,"byte_end":858673,"line_start":703,"line_end":703,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858678,"byte_end":858711,"line_start":704,"line_end":704,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858716,"byte_end":858719,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858724,"byte_end":858809,"line_start":706,"line_end":706,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858814,"byte_end":858817,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858822,"byte_end":858914,"line_start":708,"line_end":708,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858919,"byte_end":858985,"line_start":709,"line_end":709,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858990,"byte_end":858993,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":858998,"byte_end":859011,"line_start":711,"line_end":711,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":859016,"byte_end":859097,"line_start":712,"line_end":712,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":859102,"byte_end":859105,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":859110,"byte_end":859181,"line_start":714,"line_end":714,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":859186,"byte_end":859235,"line_start":715,"line_end":715,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3820},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860299,"byte_end":860310,"line_start":744,"line_end":744,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"fn (&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":859951,"byte_end":860038,"line_start":737,"line_end":737,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860043,"byte_end":860046,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860051,"byte_end":860148,"line_start":739,"line_end":739,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860153,"byte_end":860156,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860161,"byte_end":860174,"line_start":741,"line_end":741,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860179,"byte_end":860248,"line_start":742,"line_end":742,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":860253,"byte_end":860291,"line_start":743,"line_end":743,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":861968,"byte_end":861977,"line_start":780,"line_end":780,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"fn (&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":861904,"byte_end":861960,"line_start":779,"line_end":779,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3823},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862172,"byte_end":862181,"line_start":784,"line_end":784,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn (&mut Self, u32, u32, u32, u32) -> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":3812},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862020,"byte_end":862082,"line_start":782,"line_end":782,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862087,"byte_end":862164,"line_start":783,"line_end":783,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":3824},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862672,"byte_end":862680,"line_start":801,"line_end":801,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3828},{"krate":0,"index":3829},{"krate":0,"index":3830}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862388,"byte_end":862417,"line_start":795,"line_end":795,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862418,"byte_end":862421,"line_start":796,"line_end":796,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862422,"byte_end":862472,"line_start":797,"line_end":797,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862473,"byte_end":862534,"line_start":798,"line_end":798,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862535,"byte_end":862598,"line_start":799,"line_end":799,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":862599,"byte_end":862660,"line_start":800,"line_end":800,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3837},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863068,"byte_end":863071,"line_start":817,"line_end":817,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn (I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863028,"byte_end":863056,"line_start":816,"line_end":816,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3838},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863360,"byte_end":863373,"line_start":828,"line_end":828,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn (&mut Self, u32, u32, u32, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863304,"byte_end":863348,"line_start":827,"line_end":827,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3839},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863607,"byte_end":863615,"line_start":836,"line_end":836,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn (&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863552,"byte_end":863595,"line_start":835,"line_end":835,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3872},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":876995,"byte_end":877010,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":3873}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":876882,"byte_end":876960,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":876961,"byte_end":876984,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3873},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877081,"byte_end":877089,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"fn (&Self) -> &[u8]","parent":{"krate":0,"index":3872},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877041,"byte_end":877073,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":3878},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877377,"byte_end":877386,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877331,"byte_end":877366,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":3891},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877908,"byte_end":877919,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3892},{"krate":0,"index":3893}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877765,"byte_end":877826,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877827,"byte_end":877897,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":3892},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877958,"byte_end":877964,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":3891},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3893},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878007,"byte_end":878017,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn (Self::Larger) -> Self","parent":{"krate":0,"index":3891},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3900},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878489,"byte_end":878493,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3901},{"krate":0,"index":3902}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878418,"byte_end":878478,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3901},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878524,"byte_end":878529,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":3900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3902},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878550,"byte_end":878554,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"fn (Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":3900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3909},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879280,"byte_end":879285,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3929},{"krate":0,"index":3931},{"krate":0,"index":3933},{"krate":0,"index":3936},{"krate":0,"index":3939},{"krate":0,"index":3942},{"krate":0,"index":3945},{"krate":0,"index":3947},{"krate":0,"index":3949},{"krate":0,"index":3950}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879155,"byte_end":879179,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879180,"byte_end":879183,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879184,"byte_end":879269,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":3910},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879349,"byte_end":879357,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879306,"byte_end":879339,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":3911},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879432,"byte_end":879445,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879375,"byte_end":879421,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3912},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879588,"byte_end":879601,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"fn () -> u8","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879455,"byte_end":879509,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879514,"byte_end":879580,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3913},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879697,"byte_end":879705,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"fn (&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879651,"byte_end":879689,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879793,"byte_end":879805,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"fn (&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879740,"byte_end":879785,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":3915},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879971,"byte_end":879982,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879848,"byte_end":879912,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879917,"byte_end":879960,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3916},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880199,"byte_end":880210,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"fn () -> &'static str","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880002,"byte_end":880074,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880079,"byte_end":880122,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880127,"byte_end":880191,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":3917},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880314,"byte_end":880324,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880268,"byte_end":880303,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3918},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880464,"byte_end":880474,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"fn () -> ColorType","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880341,"byte_end":880388,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880393,"byte_end":880456,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880712,"byte_end":880721,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"fn (&Self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880528,"byte_end":880593,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880598,"byte_end":880673,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880678,"byte_end":880681,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880686,"byte_end":880704,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881024,"byte_end":881037,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"fn (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel) -> Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880857,"byte_end":880913,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880918,"byte_end":880985,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880990,"byte_end":880993,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":880998,"byte_end":881016,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3921},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881391,"byte_end":881401,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"fn (&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881167,"byte_end":881199,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881204,"byte_end":881207,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881212,"byte_end":881296,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881301,"byte_end":881383,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3922},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881681,"byte_end":881695,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"fn (&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881443,"byte_end":881489,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881494,"byte_end":881497,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881502,"byte_end":881586,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881591,"byte_end":881673,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3923},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881782,"byte_end":881788,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"fn (&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881745,"byte_end":881774,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3924},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881884,"byte_end":881891,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"fn (&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881825,"byte_end":881876,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3925},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881967,"byte_end":881974,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"fn (&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":881929,"byte_end":881959,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882072,"byte_end":882085,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"fn (&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882012,"byte_end":882064,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882161,"byte_end":882167,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"fn (&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882124,"byte_end":882153,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3928},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882263,"byte_end":882270,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"fn (&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882204,"byte_end":882255,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3929},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882377,"byte_end":882380,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"fn <F> (&Self, F) -> Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882308,"byte_end":882369,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3931},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882541,"byte_end":882546,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"fn <F> (&mut Self, F) -> ()","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882472,"byte_end":882533,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3933},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882771,"byte_end":882785,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"fn <F, G> (&Self, F, G) -> Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882634,"byte_end":882706,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882711,"byte_end":882763,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3936},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883091,"byte_end":883107,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"fn <F, G> (&mut Self, F, G) -> ()","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":882938,"byte_end":883010,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883015,"byte_end":883083,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3939},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883336,"byte_end":883353,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"fn <F> (&Self, F) -> Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883256,"byte_end":883328,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3942},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883645,"byte_end":883664,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"fn <F> (&mut Self, F) -> ()","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883541,"byte_end":883613,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883618,"byte_end":883637,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3945},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883907,"byte_end":883911,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"fn <F> (&Self, &Self, F) -> Self","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883805,"byte_end":883869,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":883874,"byte_end":883899,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3947},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884151,"byte_end":884157,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"fn <F> (&mut Self, &Self, F) -> ()","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884033,"byte_end":884097,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884102,"byte_end":884143,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3949},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884304,"byte_end":884310,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"fn (&mut Self) -> ()","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884275,"byte_end":884296,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884421,"byte_end":884426,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"fn (&mut Self, &Self) -> ()","parent":{"krate":0,"index":3909},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884328,"byte_end":884413,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":3952},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":884535,"byte_end":884550,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6193},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888560,"byte_end":888579,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":6194}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":887837,"byte_end":887883,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":887884,"byte_end":887887,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":887888,"byte_end":887985,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":887986,"byte_end":888084,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888085,"byte_end":888145,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888146,"byte_end":888149,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888150,"byte_end":888245,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888246,"byte_end":888344,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888345,"byte_end":888436,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":888437,"byte_end":888480,"line_start":106,"line_end":106,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17347,"byte_end":17363,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18061,"byte_end":18074,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18850,"byte_end":18863,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19640,"byte_end":19654,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20033,"byte_end":20043,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20400,"byte_end":20410,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20526,"byte_end":20541,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20670,"byte_end":20685,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20935,"byte_end":20951,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21254,"byte_end":21264,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21725,"byte_end":21735,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":22188,"byte_end":22204,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23826,"byte_end":23842,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23870,"byte_end":23884,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":24919,"byte_end":24933,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25138,"byte_end":25151,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25612,"byte_end":25625,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25830,"byte_end":25843,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26290,"byte_end":26303,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26508,"byte_end":26518,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26901,"byte_end":26911,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26939,"byte_end":26954,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32049,"byte_end":32057,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76123,"byte_end":76130,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76888,"byte_end":76896,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92116,"byte_end":92128,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111014,"byte_end":111020,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112402,"byte_end":112408,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113194,"byte_end":113200,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":128199,"byte_end":128209,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133212,"byte_end":133224,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145819,"byte_end":145822,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146080,"byte_end":146091,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163246,"byte_end":163257,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169109,"byte_end":169113,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174698,"byte_end":174705,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179081,"byte_end":179092,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179701,"byte_end":179712,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":180316,"byte_end":180320,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":181567,"byte_end":181574,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":182841,"byte_end":182848,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183743,"byte_end":183753,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183905,"byte_end":183928,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184136,"byte_end":184159,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184733,"byte_end":184738,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185673,"byte_end":185678,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185703,"byte_end":185713,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":194607,"byte_end":194618,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":196541,"byte_end":196553,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198624,"byte_end":198634,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198790,"byte_end":198802,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":199149,"byte_end":199166,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":207823,"byte_end":207831,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209217,"byte_end":209226,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":210491,"byte_end":210506,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212362,"byte_end":212372,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244276,"byte_end":244285,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244705,"byte_end":244715,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":245390,"byte_end":245400,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247159,"byte_end":247169,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":254284,"byte_end":254294,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":259478,"byte_end":259490,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":260130,"byte_end":260140,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":260296,"byte_end":260308,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":260777,"byte_end":260788,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":261512,"byte_end":261518,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":263194,"byte_end":263204,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":264696,"byte_end":264706,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266886,"byte_end":266896,"line_start":49,"line_end":49,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267853,"byte_end":267863,"line_start":85,"line_end":85,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":269889,"byte_end":269899,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":270796,"byte_end":270806,"line_start":168,"line_end":168,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272004,"byte_end":272013,"line_start":210,"line_end":210,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272503,"byte_end":272513,"line_start":233,"line_end":233,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296454,"byte_end":296464,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296916,"byte_end":296925,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":297338,"byte_end":297348,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":300291,"byte_end":300307,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":300919,"byte_end":300935,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305641,"byte_end":305651,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306144,"byte_end":306154,"line_start":309,"line_end":309,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":310247,"byte_end":310257,"line_start":420,"line_end":420,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":312546,"byte_end":312558,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":314208,"byte_end":314218,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":314374,"byte_end":314386,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":314888,"byte_end":314896,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315720,"byte_end":315730,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":317101,"byte_end":317110,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":317526,"byte_end":317536,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318044,"byte_end":318054,"line_start":211,"line_end":211,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319372,"byte_end":319382,"line_start":265,"line_end":265,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321688,"byte_end":321698,"line_start":330,"line_end":330,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1367},{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327378,"byte_end":327388,"line_start":483,"line_end":483,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328626,"byte_end":328649,"line_start":522,"line_end":522,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328942,"byte_end":328965,"line_start":535,"line_end":535,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":330773,"byte_end":330796,"line_start":586,"line_end":586,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337478,"byte_end":337489,"line_start":773,"line_end":773,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347652,"byte_end":347662,"line_start":23,"line_end":23,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":350224,"byte_end":350235,"line_start":100,"line_end":100,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":350361,"byte_end":350372,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1475},{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":351073,"byte_end":351093,"line_start":135,"line_end":135,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":351352,"byte_end":351372,"line_start":145,"line_end":145,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":365093,"byte_end":365105,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366232,"byte_end":366242,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366398,"byte_end":366410,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366651,"byte_end":366670,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1539}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366910,"byte_end":366929,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":367568,"byte_end":367578,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":369875,"byte_end":369883,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":371196,"byte_end":371205,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":371625,"byte_end":371635,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376988,"byte_end":376998,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377992,"byte_end":378002,"line_start":66,"line_end":66,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":380795,"byte_end":380806,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":381515,"byte_end":381525,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":381938,"byte_end":381949,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":383695,"byte_end":383704,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":383962,"byte_end":383972,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":410244,"byte_end":410253,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413762,"byte_end":413774,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1759}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414112,"byte_end":414124,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414945,"byte_end":414956,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1788},{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":426355,"byte_end":426366,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1803}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446910,"byte_end":446919,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":447677,"byte_end":447686,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1899},{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":448941,"byte_end":448951,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":453565,"byte_end":453575,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455636,"byte_end":455647,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":461195,"byte_end":461206,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1942}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":461344,"byte_end":461357,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1949},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463966,"byte_end":463976,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":467811,"byte_end":467821,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":469056,"byte_end":469066,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":470083,"byte_end":470098,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":470184,"byte_end":470194,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1979}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/autobreak.rs","byte_start":478146,"byte_end":478155,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/autobreak.rs","byte_start":479416,"byte_end":479425,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/autobreak.rs","byte_start":480051,"byte_end":480060,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":483910,"byte_end":483922,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2067}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":486751,"byte_end":486761,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2069}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":486917,"byte_end":486929,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":487405,"byte_end":487418,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2073}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":488010,"byte_end":488025,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":489177,"byte_end":489187,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":499881,"byte_end":499890,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":500019,"byte_end":500028,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":500441,"byte_end":500451,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":502158,"byte_end":502168,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":504595,"byte_end":504597,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":505262,"byte_end":505265,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":506537,"byte_end":506543,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":508165,"byte_end":508170,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509020,"byte_end":509032,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509157,"byte_end":509170,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509486,"byte_end":509498,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2182}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509808,"byte_end":509823,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527451,"byte_end":527461,"line_start":92,"line_end":92,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":535238,"byte_end":535248,"line_start":295,"line_end":295,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2278}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":535481,"byte_end":535499,"line_start":307,"line_end":307,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":536369,"byte_end":536384,"line_start":335,"line_end":335,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2285}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":536945,"byte_end":536962,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2288}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":540982,"byte_end":541000,"line_start":450,"line_end":450,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2291}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":543565,"byte_end":543578,"line_start":517,"line_end":517,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":543889,"byte_end":543901,"line_start":530,"line_end":530,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2304}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":545318,"byte_end":545329,"line_start":575,"line_end":575,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":547040,"byte_end":547051,"line_start":629,"line_end":629,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":547170,"byte_end":547181,"line_start":635,"line_end":635,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2318}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":547282,"byte_end":547295,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552804,"byte_end":552821,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":553333,"byte_end":553343,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554313,"byte_end":554322,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":558996,"byte_end":559010,"line_start":324,"line_end":324,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":559609,"byte_end":559618,"line_start":343,"line_end":343,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":559811,"byte_end":559820,"line_start":352,"line_end":352,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2371}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":560014,"byte_end":560023,"line_start":361,"line_end":361,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":560218,"byte_end":560227,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2375}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":561246,"byte_end":561254,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":562371,"byte_end":562381,"line_start":66,"line_end":66,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2435},{"krate":0,"index":2436},{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440},{"krate":0,"index":2441}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":573341,"byte_end":573351,"line_start":368,"line_end":368,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":575050,"byte_end":575059,"line_start":424,"line_end":424,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2457}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":575704,"byte_end":575716,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576083,"byte_end":576093,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576249,"byte_end":576261,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576350,"byte_end":576360,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2483},{"krate":0,"index":2484}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":577809,"byte_end":577819,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2489}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/header.rs","byte_start":583191,"byte_end":583200,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2533},{"krate":0,"index":2534},{"krate":0,"index":2535},{"krate":0,"index":2536}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/header.rs","byte_start":585246,"byte_end":585252,"line_start":87,"line_end":87,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":589000,"byte_end":589011,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2578}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":590680,"byte_end":590690,"line_start":75,"line_end":75,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2581},{"krate":0,"index":2582}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":592445,"byte_end":592455,"line_start":115,"line_end":115,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":592875,"byte_end":592886,"line_start":129,"line_end":129,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595122,"byte_end":595133,"line_start":198,"line_end":198,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2607},{"krate":0,"index":2608}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":596808,"byte_end":596819,"line_start":232,"line_end":232,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2611}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":597883,"byte_end":597895,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598032,"byte_end":598047,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2648}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598634,"byte_end":598644,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598801,"byte_end":598813,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":599039,"byte_end":599050,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2666},{"krate":0,"index":2667}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":601923,"byte_end":601933,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2675},{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":602346,"byte_end":602357,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":631945,"byte_end":631957,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2775}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":632976,"byte_end":632986,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2777}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":633143,"byte_end":633155,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":633276,"byte_end":633286,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637619,"byte_end":637629,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2818},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2841}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":658968,"byte_end":658976,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":659593,"byte_end":659601,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2847}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":659666,"byte_end":659676,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2849}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":659965,"byte_end":659975,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":660042,"byte_end":660051,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":660588,"byte_end":660597,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":684109,"byte_end":684123,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":685290,"byte_end":685304,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2931}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":686083,"byte_end":686097,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2934}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688703,"byte_end":688718,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2948}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688966,"byte_end":688981,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":689392,"byte_end":689407,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2960}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690215,"byte_end":690230,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":691218,"byte_end":691233,"line_start":252,"line_end":252,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2976}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695073,"byte_end":695079,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2988},{"krate":0,"index":2989}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695669,"byte_end":695675,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2992},{"krate":0,"index":2993}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696194,"byte_end":696199,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2995},{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697148,"byte_end":697153,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":703189,"byte_end":703197,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3016}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":706658,"byte_end":706664,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3062},{"krate":0,"index":3063}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":706908,"byte_end":706914,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707063,"byte_end":707069,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707278,"byte_end":707284,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707410,"byte_end":707416,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3079}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707831,"byte_end":707840,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3087},{"krate":0,"index":3088}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708096,"byte_end":708105,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3093}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708254,"byte_end":708263,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3097}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708511,"byte_end":708520,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3101}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":709086,"byte_end":709090,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":709989,"byte_end":709993,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3113},{"krate":0,"index":3114}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":710403,"byte_end":710407,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3118}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":710556,"byte_end":710560,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":710927,"byte_end":710931,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3125}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711055,"byte_end":711059,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3128}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711646,"byte_end":711653,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3136}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":712574,"byte_end":712581,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3140},{"krate":0,"index":3141}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713004,"byte_end":713011,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713160,"byte_end":713167,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3149}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713549,"byte_end":713556,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3152}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714012,"byte_end":714027,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3163},{"krate":0,"index":3164}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714430,"byte_end":714445,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3169}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714571,"byte_end":714586,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3172}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714762,"byte_end":714777,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3175}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":715316,"byte_end":715329,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3185},{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":715867,"byte_end":715880,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3191}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716004,"byte_end":716017,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3194}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716187,"byte_end":716200,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3197}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716728,"byte_end":716746,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3208},{"krate":0,"index":3209}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717157,"byte_end":717175,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3214}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717306,"byte_end":717324,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3217}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717872,"byte_end":717888,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3227},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718435,"byte_end":718451,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3233}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718580,"byte_end":718596,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3236}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721618,"byte_end":721629,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3240},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3248},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3257},{"krate":0,"index":3258},{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":728309,"byte_end":728320,"line_start":809,"line_end":809,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730918,"byte_end":730929,"line_start":884,"line_end":884,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3275}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731581,"byte_end":731592,"line_start":909,"line_end":909,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3280}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":732335,"byte_end":732346,"line_start":936,"line_end":936,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3286}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":732610,"byte_end":732621,"line_start":949,"line_end":949,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3290}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":732887,"byte_end":732898,"line_start":960,"line_end":960,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3294},{"krate":0,"index":3295}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":733169,"byte_end":733180,"line_start":973,"line_end":973,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3299}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":733441,"byte_end":733452,"line_start":984,"line_end":984,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3303}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":733811,"byte_end":733822,"line_start":999,"line_end":999,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3313}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":734646,"byte_end":734657,"line_start":1032,"line_end":1032,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738242,"byte_end":738253,"line_start":1124,"line_end":1124,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3328},{"krate":0,"index":3329},{"krate":0,"index":3330},{"krate":0,"index":3332},{"krate":0,"index":3333}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740687,"byte_end":740696,"line_start":1202,"line_end":1202,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3338}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742094,"byte_end":742105,"line_start":1240,"line_end":1240,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":3346}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752150,"byte_end":752159,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3372},{"krate":0,"index":3374},{"krate":0,"index":3375}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755868,"byte_end":755885,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3377}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":757173,"byte_end":757190,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3379}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763286,"byte_end":763287,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3386}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763725,"byte_end":763726,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3393}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":764982,"byte_end":764986,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3404}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765215,"byte_end":765219,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3407}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765447,"byte_end":765451,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3410}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765676,"byte_end":765680,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3413}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765907,"byte_end":765911,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3416}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766059,"byte_end":766063,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3418}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766307,"byte_end":766311,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3420}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766555,"byte_end":766559,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3422}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766745,"byte_end":766749,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3424}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766935,"byte_end":766939,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3426}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767176,"byte_end":767181,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3429}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767443,"byte_end":767448,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3432}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767709,"byte_end":767714,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3435}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767979,"byte_end":767984,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3438}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":768250,"byte_end":768255,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3441}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":768468,"byte_end":768473,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3443}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":768773,"byte_end":768778,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3445}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":769121,"byte_end":769125,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3448}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":769426,"byte_end":769430,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3451}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":769732,"byte_end":769736,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770037,"byte_end":770041,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3457}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770342,"byte_end":770346,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3460}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770623,"byte_end":770627,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3462}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770989,"byte_end":770993,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3464}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":771390,"byte_end":771394,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3467}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":771695,"byte_end":771699,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3470}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772001,"byte_end":772005,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3473}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772306,"byte_end":772310,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3476}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772611,"byte_end":772615,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3479}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772939,"byte_end":772942,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3482}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":773211,"byte_end":773214,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3485}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":773482,"byte_end":773485,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3488}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":773750,"byte_end":773753,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3491}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774017,"byte_end":774020,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774258,"byte_end":774261,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3496}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774486,"byte_end":774489,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3498}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774762,"byte_end":774765,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3501}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775033,"byte_end":775036,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3504}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775301,"byte_end":775304,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3507}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775574,"byte_end":775577,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3510}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775841,"byte_end":775844,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3513}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":777510,"byte_end":777515,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3519}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":778520,"byte_end":778524,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3522}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":778634,"byte_end":778638,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3525}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":780846,"byte_end":780850,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3528}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783056,"byte_end":783059,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3531}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783168,"byte_end":783171,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3534}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783390,"byte_end":783395,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3539}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783568,"byte_end":783572,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3542}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783760,"byte_end":783764,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3545}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783977,"byte_end":783981,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3548}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":784194,"byte_end":784197,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3551}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":784459,"byte_end":784462,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3554}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":795998,"byte_end":796010,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":3619},{"krate":0,"index":3620},{"krate":0,"index":3621},{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3626},{"krate":0,"index":3627},{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3630},{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3638},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3641},{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3648},{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3651},{"krate":0,"index":3652},{"krate":0,"index":3653},{"krate":0,"index":3654},{"krate":0,"index":3655},{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3664},{"krate":0,"index":3665},{"krate":0,"index":3666},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3670},{"krate":0,"index":3671},{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3678},{"krate":0,"index":3680}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820650,"byte_end":820662,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":821195,"byte_end":821207,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3693},{"krate":0,"index":3694}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835484,"byte_end":835495,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3736},{"krate":0,"index":3738}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":838283,"byte_end":838300,"line_start":144,"line_end":144,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3740}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":839600,"byte_end":839615,"line_start":181,"line_end":181,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3748},{"krate":0,"index":3749}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847485,"byte_end":847493,"line_start":365,"line_end":365,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854141,"byte_end":854147,"line_start":555,"line_end":555,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3794},{"krate":0,"index":3795}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854615,"byte_end":854621,"line_start":577,"line_end":577,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3798}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863010,"byte_end":863018,"line_start":815,"line_end":815,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3839}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":864155,"byte_end":864163,"line_start":856,"line_end":856,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3842},{"krate":0,"index":3843},{"krate":0,"index":3844},{"krate":0,"index":3845},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3848}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":864984,"byte_end":864992,"line_start":888,"line_end":888,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3851},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3856}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8223,"byte_end":8228,"line_start":181,"line_end":181,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8621,"byte_end":8625,"line_start":200,"line_end":200,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27888,"byte_end":27890,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27900,"byte_end":27905,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8666,"byte_end":8674,"line_start":203,"line_end":203,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":175}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45825,"byte_end":45833,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8700,"byte_end":8702,"line_start":206,"line_end":206,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8748,"byte_end":8752,"line_start":209,"line_end":209,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":551}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8803,"byte_end":8806,"line_start":213,"line_end":213,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":730}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8840,"byte_end":8843,"line_start":215,"line_end":215,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":985}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8877,"byte_end":8880,"line_start":217,"line_end":217,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1038}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8914,"byte_end":8917,"line_start":219,"line_end":219,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1160}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8951,"byte_end":8954,"line_start":221,"line_end":221,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1264}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8988,"byte_end":8991,"line_start":223,"line_end":223,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1496}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9026,"byte_end":9030,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1624}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9064,"byte_end":9067,"line_start":227,"line_end":227,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1845}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9101,"byte_end":9104,"line_start":229,"line_end":229,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1980}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9138,"byte_end":9141,"line_start":231,"line_end":231,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2376}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9176,"byte_end":9180,"line_start":233,"line_end":233,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2541}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9215,"byte_end":9219,"line_start":235,"line_end":235,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2612}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/mod.rs","byte_start":597142,"byte_end":597145,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2691}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9258,"byte_end":9266,"line_start":237,"line_end":237,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2884}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17347,"byte_end":17363,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3990},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18061,"byte_end":18074,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":4053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18850,"byte_end":18863,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19640,"byte_end":19654,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20033,"byte_end":20043,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20400,"byte_end":20410,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20526,"byte_end":20541,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4084},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20670,"byte_end":20685,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4084},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20935,"byte_end":20951,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3990},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21254,"byte_end":21264,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21725,"byte_end":21735,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3969},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":22188,"byte_end":22204,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3990},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23826,"byte_end":23842,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3990},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23870,"byte_end":23884,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4024},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":24919,"byte_end":24933,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4024},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25138,"byte_end":25151,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4019},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25612,"byte_end":25625,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4019},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25830,"byte_end":25843,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4053},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26290,"byte_end":26303,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4053},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26508,"byte_end":26518,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4058},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26901,"byte_end":26911,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4058},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26939,"byte_end":26954,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4084},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32049,"byte_end":32057,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76123,"byte_end":76130,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":4141},"to":{"krate":0,"index":304}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76888,"byte_end":76896,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":304}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92116,"byte_end":92128,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111014,"byte_end":111020,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112402,"byte_end":112408,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113194,"byte_end":113200,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":128199,"byte_end":128209,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133212,"byte_end":133224,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":4176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145819,"byte_end":145822,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146080,"byte_end":146091,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163246,"byte_end":163257,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169109,"byte_end":169113,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174698,"byte_end":174705,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":4239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179081,"byte_end":179092,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":4165},"to":{"krate":2,"index":2157}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179701,"byte_end":179712,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":4165},"to":{"krate":2,"index":2161}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":180316,"byte_end":180320,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":4226},"to":{"krate":0,"index":3799}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":181567,"byte_end":181574,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":4239},"to":{"krate":0,"index":3799}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":182841,"byte_end":182848,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":4239},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183743,"byte_end":183753,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183905,"byte_end":183928,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4301},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184136,"byte_end":184159,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4301},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184733,"byte_end":184738,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4252},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185673,"byte_end":185678,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4252},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185703,"byte_end":185713,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":4276},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":194607,"byte_end":194618,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":801},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":196541,"byte_end":196553,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":4359},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198624,"byte_end":198634,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198790,"byte_end":198802,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":4359},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":199149,"byte_end":199166,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":4436},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":207823,"byte_end":207831,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209217,"byte_end":209226,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":210491,"byte_end":210506,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212362,"byte_end":212372,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":841},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244276,"byte_end":244285,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":919},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244705,"byte_end":244715,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":841},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":245390,"byte_end":245400,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":841},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247159,"byte_end":247169,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":254284,"byte_end":254294,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":259478,"byte_end":259490,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4489},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":260130,"byte_end":260140,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":260296,"byte_end":260308,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4489},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":260777,"byte_end":260788,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":261512,"byte_end":261518,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":263194,"byte_end":263204,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dds.rs","byte_start":264696,"byte_end":264706,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1022},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":266886,"byte_end":266896,"line_start":49,"line_end":49,"column_start":6,"column_end":16},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":267853,"byte_end":267863,"line_start":85,"line_end":85,"column_start":15,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1063},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":269889,"byte_end":269899,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1063},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":270796,"byte_end":270806,"line_start":168,"line_end":168,"column_start":55,"column_end":65},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1063},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272004,"byte_end":272013,"line_start":210,"line_end":210,"column_start":24,"column_end":33},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1091},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dxt.rs","byte_start":272503,"byte_end":272513,"line_start":233,"line_end":233,"column_start":16,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296454,"byte_end":296464,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":296916,"byte_end":296925,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1202},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":297338,"byte_end":297348,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1196},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":300291,"byte_end":300307,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":300919,"byte_end":300935,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1221},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":305641,"byte_end":305651,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1196},"to":{"krate":0,"index":3786}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":306144,"byte_end":306154,"line_start":309,"line_end":309,"column_start":16,"column_end":26},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/gif.rs","byte_start":310247,"byte_end":310257,"line_start":420,"line_end":420,"column_start":6,"column_end":16},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":312546,"byte_end":312558,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4565},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":314208,"byte_end":314218,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":314374,"byte_end":314386,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4565},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":314888,"byte_end":314896,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4609},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":315720,"byte_end":315730,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":317101,"byte_end":317110,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1319},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":317526,"byte_end":317536,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4638},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":318044,"byte_end":318054,"line_start":211,"line_end":211,"column_start":58,"column_end":68},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4638},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":319372,"byte_end":319382,"line_start":265,"line_end":265,"column_start":6,"column_end":16},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":321688,"byte_end":321698,"line_start":330,"line_end":330,"column_start":18,"column_end":28},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4645},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":327378,"byte_end":327388,"line_start":483,"line_end":483,"column_start":35,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4645},"to":{"krate":2,"index":4877}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328626,"byte_end":328649,"line_start":522,"line_end":522,"column_start":18,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":328942,"byte_end":328965,"line_start":535,"line_end":535,"column_start":31,"column_end":54},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1376},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":330773,"byte_end":330796,"line_start":586,"line_end":586,"column_start":40,"column_end":63},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1376},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/decoder.rs","byte_start":337478,"byte_end":337489,"line_start":773,"line_end":773,"column_start":6,"column_end":17},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":347652,"byte_end":347662,"line_start":23,"line_end":23,"column_start":16,"column_end":26},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":350224,"byte_end":350235,"line_start":100,"line_end":100,"column_start":10,"column_end":21},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":350361,"byte_end":350372,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":351073,"byte_end":351093,"line_start":135,"line_end":135,"column_start":10,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/hdr/encoder.rs","byte_start":351352,"byte_end":351372,"line_start":145,"line_end":145,"column_start":23,"column_end":43},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1478},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":365093,"byte_end":365105,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4704},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366232,"byte_end":366242,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366398,"byte_end":366410,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4704},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366651,"byte_end":366670,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4752},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":366910,"byte_end":366929,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4752},"to":{"krate":2,"index":1820}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":367568,"byte_end":367578,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":369875,"byte_end":369883,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":371196,"byte_end":371205,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/decoder.rs","byte_start":371625,"byte_end":371635,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1542},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":376988,"byte_end":376998,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/ico/encoder.rs","byte_start":377992,"byte_end":378002,"line_start":66,"line_end":66,"column_start":33,"column_end":43},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1606},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":380795,"byte_end":380806,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":381515,"byte_end":381525,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1656},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":381938,"byte_end":381949,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1649},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":383695,"byte_end":383704,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":5424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":383962,"byte_end":383972,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":410244,"byte_end":410253,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":413762,"byte_end":413774,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":4824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414112,"byte_end":414124,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":4824},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":414945,"byte_end":414956,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":426355,"byte_end":426366,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1762},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":446910,"byte_end":446919,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":447677,"byte_end":447686,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":448941,"byte_end":448951,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":453565,"byte_end":453575,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1901},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":455636,"byte_end":455647,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":461195,"byte_end":461206,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1925},"to":{"krate":0,"index":3786}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":461344,"byte_end":461357,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1943},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":463966,"byte_end":463976,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":467811,"byte_end":467821,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1951},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":469056,"byte_end":469066,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":470083,"byte_end":470098,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4839},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":470184,"byte_end":470194,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4865},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/autobreak.rs","byte_start":478146,"byte_end":478155,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/autobreak.rs","byte_start":479416,"byte_end":479425,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2001},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/autobreak.rs","byte_start":480051,"byte_end":480060,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2001},"to":{"krate":2,"index":2100}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":483910,"byte_end":483922,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4891},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":486751,"byte_end":486761,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":486917,"byte_end":486929,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4891},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":487405,"byte_end":487418,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4948},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":488010,"byte_end":488025,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4975},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":489177,"byte_end":489187,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":492352,"byte_end":492359,"line_start":317,"line_end":317,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3015},"to":{"krate":0,"index":2103}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":499881,"byte_end":499890,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"kind":{"Impl":{"id":144}},"from":{"krate":1,"index":2356},"to":{"krate":0,"index":2103}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":500019,"byte_end":500028,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2125},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":500441,"byte_end":500451,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2090},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":502158,"byte_end":502168,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":504595,"byte_end":504597,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2080},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":505262,"byte_end":505265,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2082},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":506537,"byte_end":506543,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2084},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":508165,"byte_end":508170,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2086},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509020,"byte_end":509032,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5075},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509157,"byte_end":509170,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5084},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509486,"byte_end":509498,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5094},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/decoder.rs","byte_start":509808,"byte_end":509823,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5104},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":527451,"byte_end":527461,"line_start":92,"line_end":92,"column_start":16,"column_end":26},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":535238,"byte_end":535248,"line_start":295,"line_end":295,"column_start":33,"column_end":43},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2226},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":535481,"byte_end":535499,"line_start":307,"line_end":307,"column_start":10,"column_end":28},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":536369,"byte_end":536384,"line_start":335,"line_end":335,"column_start":10,"column_end":25},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":536945,"byte_end":536962,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":540982,"byte_end":541000,"line_start":450,"line_end":450,"column_start":10,"column_end":28},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":543565,"byte_end":543578,"line_start":517,"line_end":517,"column_start":10,"column_end":23},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":543889,"byte_end":543901,"line_start":530,"line_end":530,"column_start":10,"column_end":22},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":545318,"byte_end":545329,"line_start":575,"line_end":575,"column_start":10,"column_end":21},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":547040,"byte_end":547051,"line_start":629,"line_end":629,"column_start":29,"column_end":40},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5022},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":547170,"byte_end":547181,"line_start":635,"line_end":635,"column_start":30,"column_end":41},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5022},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/encoder.rs","byte_start":547282,"byte_end":547295,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":552804,"byte_end":552821,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":553333,"byte_end":553343,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":554313,"byte_end":554322,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":558996,"byte_end":559010,"line_start":324,"line_end":324,"column_start":43,"column_end":57},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2361},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":559609,"byte_end":559618,"line_start":343,"line_end":343,"column_start":29,"column_end":38},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":559811,"byte_end":559820,"line_start":352,"line_end":352,"column_start":30,"column_end":39},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":560014,"byte_end":560023,"line_start":361,"line_end":361,"column_start":29,"column_end":38},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/pnm/header.rs","byte_start":560218,"byte_end":560227,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":561246,"byte_end":561254,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":562371,"byte_end":562381,"line_start":66,"line_end":66,"column_start":22,"column_end":32},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":573341,"byte_end":573351,"line_start":368,"line_end":368,"column_start":52,"column_end":62},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2412},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/decoder.rs","byte_start":575050,"byte_end":575059,"line_start":424,"line_end":424,"column_start":31,"column_end":40},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2451},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":575704,"byte_end":575716,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5134},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576083,"byte_end":576093,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576249,"byte_end":576261,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5134},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":576350,"byte_end":576360,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/encoder.rs","byte_start":577809,"byte_end":577819,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2478},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/header.rs","byte_start":583191,"byte_end":583200,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tga/header.rs","byte_start":585246,"byte_end":585252,"line_start":87,"line_end":87,"column_start":6,"column_end":12},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":589000,"byte_end":589011,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":590680,"byte_end":590690,"line_start":75,"line_end":75,"column_start":6,"column_end":16},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":592445,"byte_end":592455,"line_start":115,"line_end":115,"column_start":18,"column_end":28},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2583},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":592875,"byte_end":592886,"line_start":129,"line_end":129,"column_start":52,"column_end":63},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2571},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":595122,"byte_end":595133,"line_start":198,"line_end":198,"column_start":23,"column_end":34},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/tiff.rs","byte_start":596808,"byte_end":596819,"line_start":232,"line_end":232,"column_start":40,"column_end":51},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2600},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":597883,"byte_end":597895,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5181},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598032,"byte_end":598047,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2643},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598634,"byte_end":598644,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":598801,"byte_end":598813,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":5181},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":599039,"byte_end":599050,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":601923,"byte_end":601933,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2668},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/decoder.rs","byte_start":602346,"byte_end":602357,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2652},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":631945,"byte_end":631957,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":5294},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":632976,"byte_end":632986,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3969},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":633143,"byte_end":633155,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":5294},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":633276,"byte_end":633286,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":637619,"byte_end":637629,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2793},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":658968,"byte_end":658976,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":5197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":659593,"byte_end":659601,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":5197},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":659666,"byte_end":659676,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":5224},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":659965,"byte_end":659975,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":5224},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":660042,"byte_end":660051,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":5248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/webp/vp8.rs","byte_start":660588,"byte_end":660597,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":5248},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":684109,"byte_end":684123,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":685290,"byte_end":685304,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2913},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":686083,"byte_end":686097,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2913},"to":{"krate":1,"index":3009}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688703,"byte_end":688718,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":688966,"byte_end":688981,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2943},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":689392,"byte_end":689407,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2943},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":690215,"byte_end":690230,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/farbfeld.rs","byte_start":691218,"byte_end":691233,"line_start":252,"line_end":252,"column_start":33,"column_end":48},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2965},"to":{"krate":0,"index":3789}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695073,"byte_end":695079,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":695669,"byte_end":695675,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2983},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":696194,"byte_end":696199,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":697148,"byte_end":697153,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":5373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":703189,"byte_end":703197,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":223}},"from":{"krate":2,"index":32311},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":706658,"byte_end":706664,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":706908,"byte_end":706914,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707063,"byte_end":707069,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":4899}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707278,"byte_end":707284,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707410,"byte_end":707416,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":707831,"byte_end":707840,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708096,"byte_end":708105,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708254,"byte_end":708263,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":4899}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":708511,"byte_end":708520,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":709086,"byte_end":709090,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":3102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":709989,"byte_end":709993,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":710403,"byte_end":710407,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":710556,"byte_end":710560,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":4899}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":710927,"byte_end":710931,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711055,"byte_end":711059,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":711646,"byte_end":711653,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":3129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":712574,"byte_end":712581,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713004,"byte_end":713011,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713160,"byte_end":713167,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":4899}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":713549,"byte_end":713556,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714012,"byte_end":714027,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714430,"byte_end":714445,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714571,"byte_end":714586,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":714762,"byte_end":714777,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":715316,"byte_end":715329,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":715867,"byte_end":715880,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716004,"byte_end":716017,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716187,"byte_end":716200,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":716728,"byte_end":716746,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717157,"byte_end":717175,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717306,"byte_end":717324,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":717872,"byte_end":717888,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718435,"byte_end":718451,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":4922}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":718580,"byte_end":718596,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":6178}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":721618,"byte_end":721629,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":5393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":728309,"byte_end":728320,"line_start":809,"line_end":809,"column_start":20,"column_end":31},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":5393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":730918,"byte_end":730929,"line_start":884,"line_end":884,"column_start":20,"column_end":31},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":5393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":731581,"byte_end":731592,"line_start":909,"line_end":909,"column_start":20,"column_end":31},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":732335,"byte_end":732346,"line_start":936,"line_end":936,"column_start":30,"column_end":41},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5393},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":732610,"byte_end":732621,"line_start":949,"line_end":949,"column_start":33,"column_end":44},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":5393},"to":{"krate":2,"index":2089}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":732887,"byte_end":732898,"line_start":960,"line_end":960,"column_start":42,"column_end":53},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":5393},"to":{"krate":2,"index":2157}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":733169,"byte_end":733180,"line_start":973,"line_end":973,"column_start":45,"column_end":56},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":5393},"to":{"krate":2,"index":2161}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":733441,"byte_end":733452,"line_start":984,"line_end":984,"column_start":30,"column_end":41},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":5393},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":733811,"byte_end":733822,"line_start":999,"line_end":999,"column_start":41,"column_end":52},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":5393},"to":{"krate":0,"index":3799}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":734646,"byte_end":734657,"line_start":1032,"line_end":1032,"column_start":37,"column_end":48},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":5393},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":738242,"byte_end":738253,"line_start":1124,"line_end":1124,"column_start":26,"column_end":37},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":5393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":740687,"byte_end":740696,"line_start":1202,"line_end":1202,"column_start":6,"column_end":15},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":742094,"byte_end":742105,"line_start":1240,"line_end":1240,"column_start":67,"column_end":78},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":5393},"to":{"krate":0,"index":3334}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":752150,"byte_end":752159,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":5424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":755868,"byte_end":755885,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":5463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":757173,"byte_end":757190,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":5463},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763286,"byte_end":763287,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":3385},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":763725,"byte_end":763726,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":3392},"to":{"krate":0,"index":3387}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":764982,"byte_end":764986,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765215,"byte_end":765219,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765447,"byte_end":765451,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765676,"byte_end":765680,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":765907,"byte_end":765911,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766059,"byte_end":766063,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766307,"byte_end":766311,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766555,"byte_end":766559,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766745,"byte_end":766749,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":766935,"byte_end":766939,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767176,"byte_end":767181,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767443,"byte_end":767448,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767709,"byte_end":767714,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":767979,"byte_end":767984,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":768250,"byte_end":768255,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":768468,"byte_end":768473,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":768773,"byte_end":768778,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":769121,"byte_end":769125,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":769426,"byte_end":769430,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":769732,"byte_end":769736,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770037,"byte_end":770041,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770342,"byte_end":770346,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770623,"byte_end":770627,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":770989,"byte_end":770993,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":771390,"byte_end":771394,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":771695,"byte_end":771699,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772001,"byte_end":772005,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772306,"byte_end":772310,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772611,"byte_end":772615,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":772939,"byte_end":772942,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":773211,"byte_end":773214,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":773482,"byte_end":773485,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":773750,"byte_end":773753,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774017,"byte_end":774020,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774258,"byte_end":774261,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774486,"byte_end":774489,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":774762,"byte_end":774765,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775033,"byte_end":775036,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775301,"byte_end":775304,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775574,"byte_end":775577,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":775841,"byte_end":775844,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3381}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":777510,"byte_end":777515,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3515}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":778520,"byte_end":778524,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3515}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":778634,"byte_end":778638,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3515}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":780846,"byte_end":780850,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3515}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783056,"byte_end":783059,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3515}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783168,"byte_end":783171,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3515}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783390,"byte_end":783395,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":5974},"to":{"krate":0,"index":3535}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783568,"byte_end":783572,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":5887},"to":{"krate":0,"index":3535}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783760,"byte_end":783764,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3535}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":783977,"byte_end":783981,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":5945},"to":{"krate":0,"index":3535}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":784194,"byte_end":784197,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":3535}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":784459,"byte_end":784462,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":5858},"to":{"krate":0,"index":3535}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":795998,"byte_end":796010,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":6054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":820650,"byte_end":820662,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":6054},"to":{"krate":0,"index":3799}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":821195,"byte_end":821207,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":6054},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":835484,"byte_end":835495,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":6087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":838283,"byte_end":838300,"line_start":144,"line_end":144,"column_start":28,"column_end":45},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":6130},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":839600,"byte_end":839615,"line_start":181,"line_end":181,"column_start":6,"column_end":21},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":3741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847485,"byte_end":847493,"line_start":365,"line_end":365,"column_start":6,"column_end":14},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":6166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":847999,"byte_end":848004,"line_start":385,"line_end":385,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1910},"to":{"krate":0,"index":3767}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":851700,"byte_end":851712,"line_start":482,"line_end":482,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":3767},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":851719,"byte_end":851724,"line_start":482,"line_end":482,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1910},"to":{"krate":0,"index":3780}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854141,"byte_end":854147,"line_start":555,"line_end":555,"column_start":44,"column_end":50},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":6181},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":854615,"byte_end":854621,"line_start":577,"line_end":577,"column_start":27,"column_end":33},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":6181},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":857194,"byte_end":857210,"line_start":664,"line_end":664,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3799},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":863010,"byte_end":863018,"line_start":815,"line_end":815,"column_start":9,"column_end":17},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":3824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":864155,"byte_end":864163,"line_start":856,"line_end":856,"column_start":30,"column_end":38},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3824},"to":{"krate":0,"index":3799}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":864984,"byte_end":864992,"line_start":888,"line_end":888,"column_start":26,"column_end":34},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3824},"to":{"krate":0,"index":3812}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877019,"byte_end":877034,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":3952},"to":{"krate":0,"index":3872}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877388,"byte_end":877392,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1915},"to":{"krate":0,"index":3878}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877395,"byte_end":877402,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":176},"to":{"krate":0,"index":3878}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877405,"byte_end":877408,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":20,"index":589},"to":{"krate":0,"index":3878}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877411,"byte_end":877421,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1669},"to":{"krate":0,"index":3878}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877430,"byte_end":877435,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":3878}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877438,"byte_end":877445,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":20,"index":92},"to":{"krate":0,"index":3878}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877921,"byte_end":877926,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1910},"to":{"krate":0,"index":3891}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877929,"byte_end":877936,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":20,"index":92},"to":{"krate":0,"index":3891}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":877939,"byte_end":877946,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":20,"index":176},"to":{"krate":0,"index":3891}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878495,"byte_end":878502,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":20,"index":92},"to":{"krate":0,"index":3900}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":878505,"byte_end":878512,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":20,"index":176},"to":{"krate":0,"index":3900}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879287,"byte_end":879291,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1915},"to":{"krate":0,"index":3909}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":879294,"byte_end":879299,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":3909}}]}