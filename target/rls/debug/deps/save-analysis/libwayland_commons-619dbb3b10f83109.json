{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0","program":"/home/sacha/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","--edition=2018","/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=619dbb3b10f83109","-C","extra-filename=-619dbb3b10f83109","--out-dir","/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps","-L","dependency=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps","--extern","nix=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libnix-c8290a308ca90233.rmeta","--extern","once_cell=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libonce_cell-4d5222fbcae48bf5.rmeta","--extern","smallvec=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libsmallvec-1b3d8bd17478769e.rmeta","--extern","wayland_sys=/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libwayland_sys-a8aa59ae9366fb46.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/sacha/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/run/media/sacha/stocky/isousb/isousb/target/rls/debug/deps/libwayland_commons-619dbb3b10f83109.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[10844934173358155630,2761852935940483294]},"crate_root":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src","external_crates":[{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13178520346727407053,4792203799537005979]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2148882322900320828,10090971091157684155]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9350415023647295219,11539366983612416085]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16918508776218136521,7301222204984185594]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8592614505596521046,3603009779144947114]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[11473471278279687867,9173974428352637418]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6623483043773045031,8238845143598726372]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[16610075776745393193,18271409537166901206]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13539701924899711295,15639608856686263496]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5500391874567785391,134362444564425396]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[16527680682914559102,12860669916872835133]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":15,"id":{"name":"nix","disambiguator":[13118325256917788943,9037768849807445165]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[6196079888791578331,5958756966964124101]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[12920119951859301864,12307716623577920868]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":18,"id":{"name":"void","disambiguator":[3342018372187431448,8415933186030839333]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[5203869634156297331,6526592599972629508]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":20,"id":{"name":"wayland_sys","disambiguator":[14635831075993331947,3940526208331088742]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":21,"id":{"name":"dlib","disambiguator":[17012379919164426464,17135235338460696237]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","num":22,"id":{"name":"libloading","disambiguator":[4557199659877735155,1084402719835645413]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","num":23,"id":{"name":"once_cell","disambiguator":[8831288038950693911,5791168486706483689]}},{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","num":24,"id":{"name":"smallvec","disambiguator":[17039355311582066240,1111842121477969356]}}],"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":0,"byte_end":7273,"line_start":1,"line_end":220,"column_start":1,"column_end":50}},"imports":[{"kind":"Use","ref_id":{"krate":24,"index":38},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":958,"byte_end":966,"line_start":30,"line_end":30,"column_start":19,"column_end":27},"alias_span":null,"name":"smallvec","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":0,"byte_end":7273,"line_start":1,"line_end":220,"column_start":1,"column_end":50},"name":"","qualname":"::","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":39},{"krate":0,"index":79},{"krate":0,"index":145},{"krate":0,"index":238},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":303},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":324},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":342}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"! Common definitions for wayland","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate hosts common type and traits used to represent wayland messages","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":39,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! and routines in the `wayland-client` and `wayland-server` crates.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":118,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This notably includes the `Interface` trait, which can exhaustively describe","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":192,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"! any wayland interface. Its implementations are intended to be generated by the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":273,"byte_end":355,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"! `wayland-scanner` crate.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":356,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":385,"byte_end":388,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! The principal user-facing definition provided by this crate is the `Implementation`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":389,"byte_end":476,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"! trait, which as a user of `wayland-client` or `wayland-server` you will be using","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":477,"byte_end":561,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"! to define objects able to handle the messages your program receives. Note that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":562,"byte_end":644,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"! this trait is auto-implemented for closures with appropriate signature, for","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":645,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! convenience.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":725,"byte_end":741,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":743,"byte_end":765,"line_start":16,"line_end":16,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":21},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34}],"decl_id":null,"docs":" Filter\n","sig":null,"attributes":[{"value":"! Filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7275,"byte_end":7285,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7835,"byte_end":7847,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"DispatchData","qualname":"::filter::DispatchData","value":"DispatchData {  }","parent":null,"children":[{"krate":0,"index":13}],"decl_id":null,"docs":" Holder of global dispatch-related data","sig":null,"attributes":[{"value":"/ Holder of global dispatch-related data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7345,"byte_end":7387,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7388,"byte_end":7391,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct serves as a dynamic container for the dispatch-time","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7392,"byte_end":7459,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/ global data that you gave to the dispatch method, and is given as","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7460,"byte_end":7529,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ input to all your callbacks. It allows you to share global state","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7530,"byte_end":7598,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ between your filters.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7599,"byte_end":7624,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7625,"byte_end":7628,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The main method of interest is the `get` method, which allows you to","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7629,"byte_end":7701,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ access a `&mut _` reference to the global data itself. The other methods","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7702,"byte_end":7778,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ are mostly used internally by the crate.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7779,"byte_end":7823,"line_start":14,"line_end":14,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8078,"byte_end":8081,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"get","qualname":"<DispatchData>::get","value":"fn <T> (&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Access the dispatch data knowing its type","sig":null,"attributes":[{"value":"/ Access the dispatch data knowing its type","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7926,"byte_end":7971,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7976,"byte_end":7979,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the provided type is not the correct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7984,"byte_end":8046,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/ inner type.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8051,"byte_end":8066,"line_start":23,"line_end":23,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8290,"byte_end":8294,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"wrap","qualname":"<DispatchData>::wrap","value":"fn <T> (&'a mut T) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Wrap a mutable reference","sig":null,"attributes":[{"value":"/ Wrap a mutable reference","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8175,"byte_end":8203,"line_start":28,"line_end":28,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8208,"byte_end":8211,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This creates a new `DispatchData` from a mutable reference","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8216,"byte_end":8278,"line_start":30,"line_end":30,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8678,"byte_end":8686,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<DispatchData>::reborrow","value":"fn (&mut Self) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Reborrows this `DispatchData` to create a new one with the same content","sig":null,"attributes":[{"value":"/ Reborrows this `DispatchData` to create a new one with the same content","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8393,"byte_end":8468,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8473,"byte_end":8476,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ This is a quick and cheap way to propagate the `DispatchData` down a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8481,"byte_end":8553,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ callback stack by value. It is basically a noop only there to ease","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8558,"byte_end":8628,"line_start":38,"line_end":38,"column_start":5,"column_end":75}},{"value":"/ work with the borrow checker.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8633,"byte_end":8666,"line_start":39,"line_end":39,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9587,"byte_end":9593,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"Filter","qualname":"::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":30}],"decl_id":null,"docs":" An event filter","sig":null,"attributes":[{"value":"/ An event filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8954,"byte_end":8973,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8974,"byte_end":8977,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Can be used in wayland-client and wayland-server to aggregate","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":8978,"byte_end":9043,"line_start":56,"line_end":56,"column_start":1,"column_end":66}},{"value":"/ messages from different objects into the same closure.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9044,"byte_end":9102,"line_start":57,"line_end":57,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9103,"byte_end":9106,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ You need to provide it a closure of type `FnMut(E, &Filter<E>)`,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9107,"byte_end":9175,"line_start":59,"line_end":59,"column_start":1,"column_end":69}},{"value":"/ which will be called eny time a message is sent to the filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9176,"byte_end":9241,"line_start":60,"line_end":60,"column_start":1,"column_end":66}},{"value":"/ via the `send(..)` method. Your closure also receives a handle","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9242,"byte_end":9308,"line_start":61,"line_end":61,"column_start":1,"column_end":67}},{"value":"/ to the filter as argument, so that you can use it from within","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9309,"byte_end":9374,"line_start":62,"line_end":62,"column_start":1,"column_end":66}},{"value":"/ the callback (to assign new wayland objects to this filter for","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9375,"byte_end":9441,"line_start":63,"line_end":63,"column_start":1,"column_end":67}},{"value":"/ example).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9442,"byte_end":9455,"line_start":64,"line_end":64,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9456,"byte_end":9459,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The `Filter` can be cloned, and all clones send messages to the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9460,"byte_end":9527,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/ same closure. However it is not threadsafe.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9528,"byte_end":9575,"line_start":67,"line_end":67,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9848,"byte_end":9851,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<E>>::new","value":"fn <F> (F) -> Filter<E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new filter from given closure\n","sig":null,"attributes":[{"value":"/ Create a new filter from given closure","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9794,"byte_end":9836,"line_start":81,"line_end":81,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":10153,"byte_end":10157,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"send","qualname":"<Filter<E>>::send","value":"fn (&Self, E, DispatchData) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Send a message to this filter\n","sig":null,"attributes":[{"value":"/ Send a message to this filter","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":10108,"byte_end":10141,"line_start":91,"line_end":91,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":39},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":344},{"krate":0,"index":353},{"krate":0,"index":50},{"krate":0,"index":59},{"krate":0,"index":356},{"krate":0,"index":360},{"krate":0,"index":62},{"krate":0,"index":75},{"krate":0,"index":77}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[{"value":"! Wayland objects map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":10681,"byte_end":10704,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":45},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":10875,"byte_end":10890,"line_start":7,"line_end":7,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[{"value":"/ Limit separating server-created from client-created objects IDs in the namespace","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":10780,"byte_end":10864,"line_start":6,"line_end":6,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11014,"byte_end":11028,"line_start":11,"line_end":11,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":47}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[{"value":"/ A trait representing the metadata a wayland implementation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":10912,"byte_end":10974,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ may attach to an object.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":10975,"byte_end":11003,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11169,"byte_end":11174,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"fn (&Self) -> Self","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[{"value":"/ Create the metadata for a child object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11042,"byte_end":11084,"line_start":12,"line_end":12,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11089,"byte_end":11092,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Mostly needed for client side, to propagate the event queues","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11097,"byte_end":11161,"line_start":14,"line_end":14,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":344},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11321,"byte_end":11327,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[{"value":"/ The representation of a protocol object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11249,"byte_end":11292,"line_start":22,"line_end":22,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":346},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11398,"byte_end":11407,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[{"value":"/ Interface name of this object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11356,"byte_end":11389,"line_start":25,"line_end":25,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":347},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11462,"byte_end":11469,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[{"value":"/ Version of this object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11427,"byte_end":11453,"line_start":27,"line_end":27,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":348},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11535,"byte_end":11543,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[{"value":"/ Description of the requests of this object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11480,"byte_end":11526,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":349},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11639,"byte_end":11645,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[{"value":"/ Description of the events of this object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11586,"byte_end":11630,"line_start":31,"line_end":31,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":350},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11769,"byte_end":11773,"line_start":34,"line_end":34,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[{"value":"/ Metadata associated to this object (ex: its event queue client side)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11688,"byte_end":11760,"line_start":33,"line_end":33,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":351},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11921,"byte_end":11939,"line_start":37,"line_end":37,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11785,"byte_end":11863,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/ object associated with this event if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11868,"byte_end":11912,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":352},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12128,"byte_end":12148,"line_start":40,"line_end":40,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11990,"byte_end":12068,"line_start":38,"line_end":38,"column_start":5,"column_end":83}},{"value":"/ object associated with this request if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12073,"byte_end":12119,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12321,"byte_end":12335,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"fn <I> (u32, Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[{"value":"/ Create an Object corresponding to given interface and version","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12244,"byte_end":12309,"line_start":44,"line_end":44,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12842,"byte_end":12853,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"fn (&Self, u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12717,"byte_end":12798,"line_start":57,"line_end":57,"column_start":5,"column_end":86}},{"value":"/ with given event opcode","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12803,"byte_end":12830,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":13106,"byte_end":13119,"line_start":65,"line_end":65,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"fn (&Self, u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12979,"byte_end":13060,"line_start":63,"line_end":63,"column_start":5,"column_end":86}},{"value":"/ with given request opcode","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":13065,"byte_end":13094,"line_start":64,"line_end":64,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":13310,"byte_end":13322,"line_start":70,"line_end":70,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"fn <I> (&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[{"value":"/ Check whether this object is of given interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":13247,"byte_end":13298,"line_start":69,"line_end":69,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":13545,"byte_end":13556,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"fn (Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[{"value":"/ Create a placeholder object that will be filled-in by the message logic","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":13458,"byte_end":13533,"line_start":75,"line_end":75,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":356},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14243,"byte_end":14252,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[{"value":"/ A holder for the object store of a connection","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14048,"byte_end":14097,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14098,"byte_end":14101,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ Keeps track of which object id is associated to which","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14102,"byte_end":14159,"line_start":99,"line_end":99,"column_start":1,"column_end":58}},{"value":"/ interface object, and which is currently unused.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14160,"byte_end":14212,"line_start":100,"line_end":100,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14468,"byte_end":14471,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"fn () -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[{"value":"/ Create a new empty object map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14423,"byte_end":14456,"line_start":108,"line_end":108,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14659,"byte_end":14663,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"fn (&Self, u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[{"value":"/ Find an object in the store","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14616,"byte_end":14647,"line_start":116,"line_end":116,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15143,"byte_end":15149,"line_start":132,"line_end":132,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"fn (&mut Self, u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[{"value":"/ Remove an object from the store","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15028,"byte_end":15063,"line_start":129,"line_end":129,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15068,"byte_end":15071,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Does nothing if the object didn't previously exists","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15076,"byte_end":15131,"line_start":131,"line_end":131,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15713,"byte_end":15722,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"fn (&mut Self, u32, Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[{"value":"/ Insert given object for given id","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15532,"byte_end":15568,"line_start":144,"line_end":144,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15573,"byte_end":15576,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Can fail if the requested id is not the next free id of this store.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15581,"byte_end":15652,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/ (In which case this is a protocol error)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":15657,"byte_end":15701,"line_start":147,"line_end":147,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":16147,"byte_end":16164,"line_start":159,"line_end":159,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"fn (&mut Self, Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the client namespace","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":16076,"byte_end":16135,"line_start":158,"line_end":158,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":16345,"byte_end":16362,"line_start":164,"line_end":164,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"fn (&mut Self, Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the server namespace","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":16274,"byte_end":16333,"line_start":163,"line_end":163,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":16537,"byte_end":16541,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"fn <T, F> (&mut Self, u32, F) -> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[{"value":"/ Mutably access an object of the map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":16486,"byte_end":16525,"line_start":168,"line_end":168,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":17167,"byte_end":17175,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"fn <F> (&mut Self, F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[{"value":"/ Mutably access all objects of the map in sequence","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":17102,"byte_end":17155,"line_start":186,"line_end":186,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":79},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":117},{"krate":0,"index":130},{"krate":0,"index":135}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[{"value":"! Wayland socket manipulation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":18630,"byte_end":18661,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":95},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":18951,"byte_end":18962,"line_start":13,"line_end":13,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of FD that can be sent in a single socket message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":18872,"byte_end":18940,"line_start":12,"line_end":12,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":96},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19058,"byte_end":19071,"line_start":15,"line_end":15,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes that can be sent in a single socket message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":18976,"byte_end":19047,"line_start":14,"line_end":14,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19138,"byte_end":19144,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[{"value":"/ A wayland socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19106,"byte_end":19126,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19512,"byte_end":19520,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"fn (&Self, &[u8], &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[{"value":"/ Send a single message to the socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19183,"byte_end":19222,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19227,"byte_end":19230,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19235,"byte_end":19299,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19304,"byte_end":19307,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ The `fds` slice should not be longer than `MAX_FDS_OUT`, and the `bytes`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19312,"byte_end":19388,"line_start":31,"line_end":31,"column_start":5,"column_end":81}},{"value":"/ slice should not be longer than `MAX_BYTES_OUT` otherwise the receiving","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19393,"byte_end":19468,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ end may lose some data.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19473,"byte_end":19500,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20430,"byte_end":20437,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"fn (&Self, &mut [u8], &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[{"value":"/ Receive a single message from the socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19955,"byte_end":19999,"line_start":45,"line_end":45,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20004,"byte_end":20007,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Return the number of bytes received and the number of Fds received.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20012,"byte_end":20083,"line_start":47,"line_end":47,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20088,"byte_end":20091,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Errors with `WouldBlock` is no message is available.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20096,"byte_end":20152,"line_start":49,"line_end":49,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20157,"byte_end":20160,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20165,"byte_end":20230,"line_start":51,"line_end":51,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20235,"byte_end":20238,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The `buffer` slice should be at least `MAX_BYTES_OUT` long and the `fds`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20243,"byte_end":20319,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ slice `MAX_FDS_OUT` long, otherwise some data of the received message may","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20324,"byte_end":20401,"line_start":54,"line_end":54,"column_start":5,"column_end":82}},{"value":"/ be lost.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":20406,"byte_end":20418,"line_start":55,"line_end":55,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21635,"byte_end":21649,"line_start":105,"line_end":105,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[{"value":"/ An adapter around a raw Socket that directly handles buffering and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21513,"byte_end":21583,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ conversion from/to wayland messages","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21584,"byte_end":21623,"line_start":104,"line_end":104,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21861,"byte_end":21864,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"fn (Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[{"value":"/ Wrap a Socket into a Buffered Socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21809,"byte_end":21849,"line_start":114,"line_end":114,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22333,"byte_end":22343,"line_start":126,"line_end":126,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"fn (&mut Self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[{"value":"/ Get direct access to the underlying socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22275,"byte_end":22321,"line_start":125,"line_end":125,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22541,"byte_end":22552,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"fn (Self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[{"value":"/ Retrieve ownership of the underlying Socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22408,"byte_end":22455,"line_start":130,"line_end":130,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22460,"byte_end":22463,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Any leftover content in the internal buffers will be lost","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22468,"byte_end":22529,"line_start":132,"line_end":132,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22675,"byte_end":22680,"line_start":138,"line_end":138,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"fn (&mut Self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[{"value":"/ Flush the contents of the outgoing buffer into the socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":22602,"byte_end":22663,"line_start":137,"line_end":137,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24261,"byte_end":24274,"line_start":182,"line_end":182,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"fn (&mut Self, &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[{"value":"/ Write a message to the outgoing buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":23999,"byte_end":24041,"line_start":176,"line_end":176,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24046,"byte_end":24049,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This method may flush the internal buffer if necessary (if it is full).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24054,"byte_end":24129,"line_start":178,"line_end":178,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24134,"byte_end":24137,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ If the message is too big to fit in the buffer, the error `Error::Sys(E2BIG)`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24142,"byte_end":24223,"line_start":180,"line_end":180,"column_start":5,"column_end":86}},{"value":"/ will be returned.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24228,"byte_end":24249,"line_start":181,"line_end":181,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24905,"byte_end":24926,"line_start":198,"line_end":198,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"fn (&mut Self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[{"value":"/ Try to fill the incoming buffers of this socket, to prepare","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24798,"byte_end":24861,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/ a new round of parsing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":24866,"byte_end":24893,"line_start":197,"line_end":197,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26800,"byte_end":26816,"line_start":240,"line_end":240,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"fn <F> (&mut Self, F) -> Result<Message, MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[{"value":"/ Read and deserialize a single message from the incoming buffers socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":25898,"byte_end":25972,"line_start":225,"line_end":225,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":25977,"byte_end":25980,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This method requires one closure that given an object id and an opcode,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":25985,"byte_end":26060,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ must provide the signature of the associated request/event, in the form of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26065,"byte_end":26143,"line_start":228,"line_end":228,"column_start":5,"column_end":83}},{"value":"/ a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26148,"byte_end":26215,"line_start":229,"line_end":229,"column_start":5,"column_end":72}},{"value":"/ the couple object/opcode does not exist, an error will be returned.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26220,"byte_end":26291,"line_start":230,"line_end":230,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26296,"byte_end":26299,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26304,"byte_end":26350,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26355,"byte_end":26358,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(msg))`: no error occurred, this is the message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26363,"byte_end":26422,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ - `Ok(Err(e))`: either a malformed message was encountered or we need more data,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26427,"byte_end":26511,"line_start":235,"line_end":235,"column_start":5,"column_end":89}},{"value":"/    in the latter case you need to try calling `fill_incoming_buffers()`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26516,"byte_end":26592,"line_start":236,"line_end":236,"column_start":5,"column_end":81}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26597,"byte_end":26678,"line_start":237,"line_end":237,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26683,"byte_end":26769,"line_start":238,"line_end":238,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":26774,"byte_end":26788,"line_start":239,"line_end":239,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":29359,"byte_end":29372,"line_start":297,"line_end":297,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"fn <F1, F2> (&mut Self, F1, F2) -> NixResult<Result<usize, MessageParseError>>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[{"value":"/ Read and deserialize messages from the socket","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28002,"byte_end":28051,"line_start":272,"line_end":272,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28056,"byte_end":28059,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This method requires two closures:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28064,"byte_end":28102,"line_start":274,"line_end":274,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28107,"byte_end":28110,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ - The first one, given an object id and an opcode, must provide","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28115,"byte_end":28182,"line_start":276,"line_end":276,"column_start":5,"column_end":72}},{"value":"/   the signature of the associated request/event, in the form of","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28187,"byte_end":28254,"line_start":277,"line_end":277,"column_start":5,"column_end":72}},{"value":"/   a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28259,"byte_end":28328,"line_start":278,"line_end":278,"column_start":5,"column_end":74}},{"value":"/   the couple object/opcode does not exist, the parsing will be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28333,"byte_end":28399,"line_start":279,"line_end":279,"column_start":5,"column_end":71}},{"value":"/   prematurely interrupted and this method will return a","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28404,"byte_end":28463,"line_start":280,"line_end":280,"column_start":5,"column_end":64}},{"value":"/   `MessageParseError::Malformed` error.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28468,"byte_end":28511,"line_start":281,"line_end":281,"column_start":5,"column_end":48}},{"value":"/ - The second closure is charged to process the parsed message. If it","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28516,"byte_end":28588,"line_start":282,"line_end":282,"column_start":5,"column_end":77}},{"value":"/   returns `false`, the iteration will be prematurely stopped.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28593,"byte_end":28658,"line_start":283,"line_end":283,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28663,"byte_end":28666,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ In both cases of early stopping, the remaining unused data will be left","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28671,"byte_end":28746,"line_start":285,"line_end":285,"column_start":5,"column_end":80}},{"value":"/ in the buffers, and will start to be processed at the next call of this","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28751,"byte_end":28826,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ method.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28831,"byte_end":28842,"line_start":287,"line_end":287,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28847,"byte_end":28850,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28855,"byte_end":28901,"line_start":289,"line_end":289,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28906,"byte_end":28909,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(n))`: no error occurred, `n` messages where processed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28914,"byte_end":28980,"line_start":291,"line_end":291,"column_start":5,"column_end":71}},{"value":"/ - `Ok(Err(MessageParseError::Malformed))`: a malformed message was encountered","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":28985,"byte_end":29067,"line_start":292,"line_end":292,"column_start":5,"column_end":87}},{"value":"/   (this is a protocol error and is supposed to be fatal to the connection).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":29072,"byte_end":29151,"line_start":293,"line_end":293,"column_start":5,"column_end":84}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":29156,"byte_end":29237,"line_start":294,"line_end":294,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":29242,"byte_end":29328,"line_start":295,"line_end":295,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":29333,"byte_end":29347,"line_start":296,"line_end":296,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":145},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"user_data","qualname":"::user_data","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":191},{"krate":0,"index":193}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[{"value":"! Various utilities used for other implementations","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":40681,"byte_end":40733,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":153},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":40997,"byte_end":41005,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"UserData","qualname":"::user_data::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":154}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[{"value":"/ A wrapper for user data, able to store any type, and correctly","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":40879,"byte_end":40945,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ handling access from a wrong thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":40946,"byte_end":40985,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41463,"byte_end":41466,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"new","qualname":"<UserData>::new","value":"fn () -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new UserData instance\n","sig":null,"attributes":[{"value":"/ Create a new UserData instance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41411,"byte_end":41445,"line_start":28,"line_end":28,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41737,"byte_end":41740,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"set","qualname":"<UserData>::set","value":"fn <T, F> (&Self, F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41559,"byte_end":41597,"line_start":35,"line_end":35,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41602,"byte_end":41605,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41610,"byte_end":41666,"line_start":37,"line_end":37,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41671,"byte_end":41725,"line_start":38,"line_end":38,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42139,"byte_end":42153,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"set_threadsafe","qualname":"<UserData>::set_threadsafe","value":"fn <T, F> (&Self, F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given threadsafe value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given threadsafe value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41950,"byte_end":41999,"line_start":45,"line_end":45,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42004,"byte_end":42007,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42012,"byte_end":42068,"line_start":47,"line_end":47,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42073,"byte_end":42127,"line_start":48,"line_end":48,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42670,"byte_end":42673,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"fn <T> (&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42320,"byte_end":42363,"line_start":54,"line_end":54,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42368,"byte_end":42371,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42376,"byte_end":42409,"line_start":56,"line_end":56,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42414,"byte_end":42417,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42422,"byte_end":42496,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42501,"byte_end":42583,"line_start":59,"line_end":59,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":42588,"byte_end":42658,"line_start":60,"line_end":60,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":179},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43755,"byte_end":43766,"line_start":92,"line_end":92,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::user_data::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":180}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[{"value":"/ A storage able to store several values of `UserData`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43626,"byte_end":43682,"line_start":90,"line_end":90,"column_start":1,"column_end":57}},{"value":"/ of different types. It behaves similarly to a `TypeMap`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43683,"byte_end":43743,"line_start":91,"line_end":91,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43859,"byte_end":43862,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"fn () -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[{"value":"/ Create a new map","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43827,"byte_end":43847,"line_start":97,"line_end":97,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44164,"byte_end":44167,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"fn <T> (&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data of a given type","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43962,"byte_end":44021,"line_start":104,"line_end":104,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44026,"byte_end":44029,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44034,"byte_end":44112,"line_start":106,"line_end":106,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44117,"byte_end":44152,"line_start":107,"line_end":107,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44880,"byte_end":44897,"line_start":126,"line_end":126,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"fn <T, F> (&Self, F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44377,"byte_end":44433,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44438,"byte_end":44441,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This is the non-threadsafe variant, the type you insert don't have to be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44446,"byte_end":44522,"line_start":119,"line_end":119,"column_start":5,"column_end":81}},{"value":"/ threadsafe, but they will not be visible from other threads (even if they are","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44527,"byte_end":44608,"line_start":120,"line_end":120,"column_start":5,"column_end":86}},{"value":"/ actually threadsafe).","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44613,"byte_end":44638,"line_start":121,"line_end":121,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44643,"byte_end":44646,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44651,"byte_end":44731,"line_start":123,"line_end":123,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44736,"byte_end":44817,"line_start":124,"line_end":124,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":44822,"byte_end":44868,"line_start":125,"line_end":125,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45576,"byte_end":45604,"line_start":144,"line_end":144,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"fn <T, F> (&Self, F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45145,"byte_end":45201,"line_start":136,"line_end":136,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45206,"byte_end":45209,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This is the threadsafe variant, the type you insert must be threadsafe and will","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45214,"byte_end":45297,"line_start":138,"line_end":138,"column_start":5,"column_end":88}},{"value":"/ be visible from all threads.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45302,"byte_end":45334,"line_start":139,"line_end":139,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45339,"byte_end":45342,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45347,"byte_end":45427,"line_start":141,"line_end":141,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45432,"byte_end":45513,"line_start":142,"line_end":142,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45518,"byte_end":45564,"line_start":143,"line_end":143,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":375},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":46516,"byte_end":46526,"line_start":182,"line_end":182,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::user_data::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":47122,"byte_end":47125,"line_start":203,"line_end":203,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":47201,"byte_end":47207,"line_start":207,"line_end":207,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"fn (&Self, T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":47924,"byte_end":47935,"line_start":230,"line_end":230,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"fn (&Self, AppendList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":48121,"byte_end":48125,"line_start":236,"line_end":236,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"fn (&Self) -> AppendListIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":48226,"byte_end":48234,"line_start":240,"line_end":240,"column_start":16,"column_end":24},"name":"iter_mut","qualname":"<AppendList<T>>::iter_mut","value":"fn (&mut Self) -> AppendListMutIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":49032,"byte_end":49050,"line_start":270,"line_end":270,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::user_data::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":391},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":49537,"byte_end":49558,"line_start":289,"line_end":289,"column_start":16,"column_end":37},"name":"AppendListMutIterator","qualname":"::user_data::list::AppendListMutIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":238},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":400},{"krate":0,"index":409},{"krate":0,"index":407},{"krate":0,"index":405},{"krate":0,"index":410},{"krate":0,"index":434},{"krate":0,"index":432},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":427},{"krate":0,"index":435},{"krate":0,"index":466},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":460},{"krate":0,"index":250},{"krate":0,"index":468},{"krate":0,"index":479},{"krate":0,"index":477},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":481},{"krate":0,"index":489},{"krate":0,"index":487},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":491},{"krate":0,"index":500},{"krate":0,"index":498},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":285}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[{"value":"! Types and routines used to manipulate arguments from the wire format","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":50374,"byte_end":50446,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51158,"byte_end":51169,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since, destructor }","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[{"value":"/ Wire metadata of a given message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51080,"byte_end":51116,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":401},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51209,"byte_end":51213,"line_start":24,"line_end":24,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[{"value":"/ Name of this message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51176,"byte_end":51200,"line_start":23,"line_end":23,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":402},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51270,"byte_end":51279,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[{"value":"/ Signature of the message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51233,"byte_end":51261,"line_start":25,"line_end":25,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":403},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51364,"byte_end":51369,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[{"value":"/ Minimum required version of the interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51310,"byte_end":51355,"line_start":27,"line_end":27,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":404},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51429,"byte_end":51439,"line_start":30,"line_end":30,"column_start":9,"column_end":19},"name":"destructor","qualname":"::wire::MessageDesc::destructor","value":"bool","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" Whether this message is a destructor\n","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51380,"byte_end":51420,"line_start":29,"line_end":29,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51593,"byte_end":51596,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51581,"byte_end":51588,"line_start":36,"line_end":36,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":413},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51614,"byte_end":51618,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51602,"byte_end":51609,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51661,"byte_end":51666,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51624,"byte_end":51656,"line_start":40,"line_end":40,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":417},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51688,"byte_end":51691,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51672,"byte_end":51683,"line_start":42,"line_end":42,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":419},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51728,"byte_end":51734,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51697,"byte_end":51723,"line_start":44,"line_end":44,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51785,"byte_end":51790,"line_start":47,"line_end":47,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51740,"byte_end":51780,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51812,"byte_end":51817,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51796,"byte_end":51807,"line_start":48,"line_end":48,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":425},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51837,"byte_end":51839,"line_start":51,"line_end":51,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51823,"byte_end":51832,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":410},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51562,"byte_end":51574,"line_start":35,"line_end":35,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"ArgumentType::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[{"value":"/ Enum of possible argument types as recognized by the wire","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51450,"byte_end":51511,"line_start":33,"line_end":33,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":436},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52015,"byte_end":52018,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52003,"byte_end":52010,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":439},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52041,"byte_end":52045,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52029,"byte_end":52036,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52093,"byte_end":52098,"line_start":63,"line_end":63,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52056,"byte_end":52088,"line_start":62,"line_end":62,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":445},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52298,"byte_end":52301,"line_start":68,"line_end":68,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(Box<CString>)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" CString","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52109,"byte_end":52120,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52125,"byte_end":52128,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52133,"byte_end":52209,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `string` arguments are pretty rare in the protocol.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52214,"byte_end":52293,"line_start":67,"line_end":67,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":448},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52352,"byte_end":52358,"line_start":70,"line_end":70,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52321,"byte_end":52347,"line_start":69,"line_end":69,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":451},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52414,"byte_end":52419,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52369,"byte_end":52409,"line_start":71,"line_end":71,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":454},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52618,"byte_end":52623,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Box<Vec<u8>>)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" Vec<u8>","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52430,"byte_end":52441,"line_start":73,"line_end":73,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52446,"byte_end":52449,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52454,"byte_end":52530,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `array` arguments are pretty rare in the protocol.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52535,"byte_end":52613,"line_start":76,"line_end":76,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":457},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52657,"byte_end":52659,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52643,"byte_end":52652,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":435},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51988,"byte_end":51996,"line_start":57,"line_end":57,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"Argument::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[{"value":"/ Enum of possible argument as recognized by the wire, including values","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51844,"byte_end":51917,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"allow(clippy :: box_vec)","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":51953,"byte_end":51978,"line_start":56,"line_end":56,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52753,"byte_end":52761,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"fn (&Self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[{"value":"/ Retrieve the type of a given argument instance","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52691,"byte_end":52741,"line_start":83,"line_end":83,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53319,"byte_end":53326,"line_start":100,"line_end":100,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[{"value":"/ A wire message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53254,"byte_end":53272,"line_start":98,"line_end":98,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":469},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53383,"byte_end":53392,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[{"value":"/ ID of the object sending this message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53333,"byte_end":53374,"line_start":101,"line_end":101,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":470},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53437,"byte_end":53443,"line_start":104,"line_end":104,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[{"value":"/ Opcode of the message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53403,"byte_end":53428,"line_start":103,"line_end":103,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":471},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53491,"byte_end":53495,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"smallvec::SmallVec<[wire::Argument; _]>","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[{"value":"/ Arguments of the message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53454,"byte_end":53482,"line_start":105,"line_end":105,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":482},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53721,"byte_end":53735,"line_start":113,"line_end":113,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[{"value":"/ The buffer is too small to hold the message contents","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53660,"byte_end":53716,"line_start":112,"line_end":112,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":484},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53800,"byte_end":53811,"line_start":115,"line_end":115,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[{"value":"/ The message contains a FD that could not be dup-ed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53741,"byte_end":53795,"line_start":114,"line_end":114,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":481},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53636,"byte_end":53653,"line_start":111,"line_end":111,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"MessageWriteError::{BufferTooSmall, DupFdFailed}","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":484}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to serialize a message into buffers","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53535,"byte_end":53602,"line_start":109,"line_end":109,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":492},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54608,"byte_end":54617,"line_start":139,"line_end":139,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[{"value":"/ The message references a FD but the buffer FD is empty","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54545,"byte_end":54603,"line_start":138,"line_end":138,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":494},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54678,"byte_end":54689,"line_start":141,"line_end":141,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[{"value":"/ More data is needed to deserialize the message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54623,"byte_end":54673,"line_start":140,"line_end":140,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":496},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54749,"byte_end":54758,"line_start":143,"line_end":143,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[{"value":"/ The message is malformed and cannot be parsed","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54695,"byte_end":54744,"line_start":142,"line_end":142,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":491},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54521,"byte_end":54538,"line_start":137,"line_end":137,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"MessageParseError::{MissingFD, MissingData, Malformed}","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to deserialize a message from buffers","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54418,"byte_end":54487,"line_start":135,"line_end":135,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55616,"byte_end":55632,"line_start":168,"line_end":168,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"fn <'a, 'b> (&Self, &'a mut [u32], &'b mut [RawFd]) -> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[{"value":"/ Serialize the contents of this message into provided buffers","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55402,"byte_end":55466,"line_start":163,"line_end":163,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55471,"byte_end":55474,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements written in each buffer","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55479,"byte_end":55536,"line_start":165,"line_end":165,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55541,"byte_end":55544,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Any serialized Fd will be `dup()`-ed in the process","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55549,"byte_end":55604,"line_start":167,"line_end":167,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59435,"byte_end":59443,"line_start":259,"line_end":259,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"fn <'a, 'b> (&'a [u32], &[ArgumentType], &'b [RawFd]) -> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[{"value":"/ Attempts to parse a single wayland message with the given signature.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59067,"byte_end":59139,"line_start":252,"line_end":252,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59144,"byte_end":59147,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ If the buffers contains several messages, only the first one will be parsed,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59152,"byte_end":59232,"line_start":254,"line_end":254,"column_start":5,"column_end":85}},{"value":"/ and the unused tail of the buffers is returned. If a single message was present,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59237,"byte_end":59321,"line_start":255,"line_end":255,"column_start":5,"column_end":89}},{"value":"/ the returned slices should thus be empty.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59326,"byte_end":59371,"line_start":256,"line_end":256,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59376,"byte_end":59379,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Errors if the message is malformed.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":59384,"byte_end":59423,"line_start":258,"line_end":258,"column_start":5,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":275},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":63048,"byte_end":63062,"line_start":349,"line_end":349,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"fn (RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[{"value":"/ Duplicate a `RawFd` and set the CLOEXEC flag on the copy","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":62980,"byte_end":63040,"line_start":348,"line_end":348,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1264,"byte_end":1276,"line_start":39,"line_end":39,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[{"value":"/ A group of messages","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":969,"byte_end":992,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":993,"byte_end":996,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This represents a group of message that can be serialized on the protocol wire.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":997,"byte_end":1080,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/ Typically the set of events or requests of a single interface.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1081,"byte_end":1147,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1148,"byte_end":1151,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1152,"byte_end":1204,"line_start":37,"line_end":37,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1205,"byte_end":1253,"line_start":38,"line_end":38,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":290},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1345,"byte_end":1353,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[{"value":"/ Wire representation of this MessageGroup","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1290,"byte_end":1334,"line_start":40,"line_end":40,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1526,"byte_end":1529,"line_start":44,"line_end":44,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[{"value":"/ The wrapper type for ObjectMap allowing the mapping of Object and","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1389,"byte_end":1458,"line_start":42,"line_end":42,"column_start":5,"column_end":74}},{"value":"/ NewId arguments to the object map during parsing.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1463,"byte_end":1516,"line_start":43,"line_end":43,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1573,"byte_end":1579,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"fn (&Self) -> u16","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[{"value":"/ The opcode of this message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1535,"byte_end":1565,"line_start":45,"line_end":45,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1741,"byte_end":1754,"line_start":50,"line_end":50,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"fn (&Self) -> bool","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1599,"byte_end":1639,"line_start":47,"line_end":47,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1644,"byte_end":1647,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ If it is, once send or receive the associated object cannot be used any more.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1652,"byte_end":1733,"line_start":49,"line_end":49,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1843,"byte_end":1848,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"since","qualname":"::MessageGroup::since","value":"fn (&Self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" The minimal object version for which this message exists\n","sig":null,"attributes":[{"value":"/ The minimal object version for which this message exists","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1775,"byte_end":1835,"line_start":51,"line_end":51,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1943,"byte_end":1948,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"fn <Meta> (u16, u32, &Meta) -> Option<crate::map::Object<Meta>>","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[{"value":"/ Retrieve the child `Object` associated with this message if any","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1868,"byte_end":1935,"line_start":53,"line_end":53,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2153,"byte_end":2161,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"fn (wire::Message, &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[{"value":"/ Construct a message from its raw representation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2094,"byte_end":2145,"line_start":59,"line_end":59,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2285,"byte_end":2293,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"fn (Self, u32) -> wire::Message","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[{"value":"/ Turn this message into its raw representation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2228,"byte_end":2277,"line_start":61,"line_end":61,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2554,"byte_end":2564,"line_start":69,"line_end":69,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"fn (*mut c_void, u32, *const syscom::wl_argument) -> Result<Self, ()>","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation","sig":null,"attributes":[{"value":"/ Construct a message of this group from its C representation","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2336,"byte_end":2399,"line_start":63,"line_end":63,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2404,"byte_end":2407,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2412,"byte_end":2424,"line_start":65,"line_end":65,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2429,"byte_end":2432,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ The pointers provided to this function must all be valid pointers from","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2437,"byte_end":2511,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ `libwayland-client`","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2516,"byte_end":2539,"line_start":68,"line_end":68,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2821,"byte_end":2832,"line_start":75,"line_end":75,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"fn <F, T> (Self, F) -> T","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"/ Build a C representation of this message","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2663,"byte_end":2707,"line_start":71,"line_end":71,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2712,"byte_end":2715,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ It can only be accessed from the provided closure, and this consumes","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2720,"byte_end":2792,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/ the message.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2797,"byte_end":2813,"line_start":74,"line_end":74,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":303},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3085,"byte_end":3094,"line_start":84,"line_end":84,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[{"value":"/ The description of a wayland interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2926,"byte_end":2968,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2969,"byte_end":2972,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":2973,"byte_end":3025,"line_start":82,"line_end":82,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3026,"byte_end":3074,"line_start":83,"line_end":83,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":304},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3236,"byte_end":3243,"line_start":88,"line_end":88,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[{"value":"/ Set of requests associated to this interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3110,"byte_end":3158,"line_start":85,"line_end":85,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3163,"byte_end":3166,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Requests are messages from the client to the server","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3171,"byte_end":3226,"line_start":87,"line_end":87,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":305},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3395,"byte_end":3400,"line_start":92,"line_end":92,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[{"value":"/ Set of events associated to this interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3273,"byte_end":3319,"line_start":89,"line_end":89,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3324,"byte_end":3327,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Events are messages from the server to the client","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3332,"byte_end":3385,"line_start":91,"line_end":91,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":306},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3467,"byte_end":3471,"line_start":94,"line_end":94,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[{"value":"/ Name of this interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3430,"byte_end":3456,"line_start":93,"line_end":93,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":307},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4004,"byte_end":4011,"line_start":104,"line_end":104,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface","sig":null,"attributes":[{"value":"/ Maximum supported version of this interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3491,"byte_end":3538,"line_start":95,"line_end":95,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3543,"byte_end":3546,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ This is the maximum version supported by the protocol specification currently","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3551,"byte_end":3632,"line_start":97,"line_end":97,"column_start":5,"column_end":86}},{"value":"/ used by this library, and should not be used as-is in your code, as a version","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3637,"byte_end":3718,"line_start":98,"line_end":98,"column_start":5,"column_end":86}},{"value":"/ change can subtly change the behavior of some objects.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3723,"byte_end":3781,"line_start":99,"line_end":99,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3786,"byte_end":3789,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Server are supposed to be able to handle all versions from 1 to the one they","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3794,"byte_end":3874,"line_start":101,"line_end":101,"column_start":5,"column_end":85}},{"value":"/ advertise through the registry, and clients can choose any version among the","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3879,"byte_end":3959,"line_start":102,"line_end":102,"column_start":5,"column_end":85}},{"value":"/ ones the server supports.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":3964,"byte_end":3993,"line_start":103,"line_end":103,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4083,"byte_end":4094,"line_start":106,"line_end":106,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"fn () -> *const syscom::wl_interface","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"/ Pointer to the C representation of this interface","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4022,"byte_end":4075,"line_start":105,"line_end":105,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":309},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4204,"byte_end":4213,"line_start":110,"line_end":110,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"NoMessage::{}","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[{"value":"/ An empty enum representing a MessageGroup with no messages","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4132,"byte_end":4194,"line_start":109,"line_end":109,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5355,"byte_end":5366,"line_start":154,"line_end":154,"column_start":12,"column_end":23},"name":"ThreadGuard","qualname":"::ThreadGuard","value":"ThreadGuard {  }","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327}],"decl_id":null,"docs":" Stores a value in a threadafe container that\n only lets you access it from its owning thread","sig":null,"attributes":[{"value":"/ Stores a value in a threadafe container that","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5142,"byte_end":5190,"line_start":149,"line_end":149,"column_start":1,"column_end":49}},{"value":"/ only lets you access it from its owning thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5191,"byte_end":5241,"line_start":150,"line_end":150,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5242,"byte_end":5245,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ If the ThreadGuard is dropped from the wrong thread,","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5246,"byte_end":5302,"line_start":152,"line_end":152,"column_start":1,"column_end":57}},{"value":"/ the underlying value will be leaked.","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5303,"byte_end":5343,"line_start":153,"line_end":153,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5531,"byte_end":5534,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<ThreadGuard<T>>::new","value":"fn (T) -> ThreadGuard<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ThreadGuard wrapper\n","sig":null,"attributes":[{"value":"/ Create a new ThreadGuard wrapper","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5483,"byte_end":5519,"line_start":160,"line_end":160,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5835,"byte_end":5838,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"get","qualname":"<ThreadGuard<T>>::get","value":"fn (&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying value","sig":null,"attributes":[{"value":"/ Access the underlying value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5741,"byte_end":5772,"line_start":170,"line_end":170,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5777,"byte_end":5780,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5785,"byte_end":5823,"line_start":172,"line_end":172,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6079,"byte_end":6086,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ThreadGuard<T>>::get_mut","value":"fn (&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Mutably access the underlying value","sig":null,"attributes":[{"value":"/ Mutably access the underlying value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5977,"byte_end":6016,"line_start":178,"line_end":178,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6021,"byte_end":6024,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6029,"byte_end":6067,"line_start":180,"line_end":180,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6346,"byte_end":6353,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"try_get","qualname":"<ThreadGuard<T>>::try_get","value":"fn (&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Try to access the underlying value","sig":null,"attributes":[{"value":"/ Try to access the underlying value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6237,"byte_end":6275,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6280,"byte_end":6283,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6288,"byte_end":6334,"line_start":188,"line_end":188,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6635,"byte_end":6646,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"try_get_mut","qualname":"<ThreadGuard<T>>::try_get_mut","value":"fn (&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to mutably access the underlying value","sig":null,"attributes":[{"value":"/ Try to mutably access the underlying value","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6518,"byte_end":6564,"line_start":197,"line_end":197,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6569,"byte_end":6572,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6577,"byte_end":6623,"line_start":199,"line_end":199,"column_start":5,"column_end":51}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7903,"byte_end":7915,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9648,"byte_end":9654,"line_start":72,"line_end":72,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9778,"byte_end":9784,"line_start":80,"line_end":80,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12225,"byte_end":12231,"line_start":43,"line_end":43,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14401,"byte_end":14410,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19170,"byte_end":19176,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21119,"byte_end":21125,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21225,"byte_end":21231,"line_start":81,"line_end":81,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21313,"byte_end":21319,"line_start":87,"line_end":87,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21397,"byte_end":21403,"line_start":93,"line_end":93,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21788,"byte_end":21802,"line_start":113,"line_end":113,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":31605,"byte_end":31611,"line_start":373,"line_end":373,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41345,"byte_end":41353,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41378,"byte_end":41386,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41396,"byte_end":41404,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43218,"byte_end":43226,"line_start":77,"line_end":77,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43809,"byte_end":43820,"line_start":96,"line_end":96,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45892,"byte_end":45903,"line_start":155,"line_end":155,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":46564,"byte_end":46574,"line_start":184,"line_end":184,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":48841,"byte_end":48851,"line_start":263,"line_end":263,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":49121,"byte_end":49139,"line_start":272,"line_end":272,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":49633,"byte_end":49654,"line_start":291,"line_end":291,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52676,"byte_end":52684,"line_start":82,"line_end":82,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53859,"byte_end":53876,"line_start":118,"line_end":118,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54245,"byte_end":54262,"line_start":129,"line_end":129,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54792,"byte_end":54809,"line_start":146,"line_end":146,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55210,"byte_end":55227,"line_start":156,"line_end":156,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55388,"byte_end":55395,"line_start":162,"line_end":162,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":64248,"byte_end":64255,"line_start":386,"line_end":386,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":64470,"byte_end":64477,"line_start":398,"line_end":398,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4269,"byte_end":4278,"line_start":113,"line_end":113,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5462,"byte_end":5473,"line_start":159,"line_end":159,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5720,"byte_end":5731,"line_start":169,"line_end":169,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6846,"byte_end":6857,"line_start":209,"line_end":209,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":7206,"byte_end":7217,"line_start":219,"line_end":219,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":7256,"byte_end":7267,"line_start":220,"line_end":220,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":869,"byte_end":875,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":885,"byte_end":888,"line_start":25,"line_end":25,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":39}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":898,"byte_end":904,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":79}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":914,"byte_end":923,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":145}},{"kind":"Mod","span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":933,"byte_end":937,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":238}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":7903,"byte_end":7915,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9648,"byte_end":9654,"line_start":72,"line_end":72,"column_start":19,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/filter.rs","byte_start":9778,"byte_end":9784,"line_start":80,"line_end":80,"column_start":9,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":11030,"byte_end":11035,"line_start":11,"line_end":11,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":12225,"byte_end":12231,"line_start":43,"line_end":43,"column_start":28,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/map.rs","byte_start":14401,"byte_end":14410,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":19170,"byte_end":19176,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21119,"byte_end":21125,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":97},"to":{"krate":1,"index":8297}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21225,"byte_end":21231,"line_start":81,"line_end":81,"column_start":18,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":97},"to":{"krate":1,"index":8295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21313,"byte_end":21319,"line_start":87,"line_end":87,"column_start":20,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":97},"to":{"krate":1,"index":8299}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21397,"byte_end":21403,"line_start":93,"line_end":93,"column_start":15,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":2100}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":21788,"byte_end":21802,"line_start":113,"line_end":113,"column_start":6,"column_end":20},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/socket.rs","byte_start":31605,"byte_end":31611,"line_start":373,"line_end":373,"column_start":25,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41345,"byte_end":41353,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":1905}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41378,"byte_end":41386,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":1917}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":41396,"byte_end":41404,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43218,"byte_end":43226,"line_start":77,"line_end":77,"column_start":15,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":2100}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":43809,"byte_end":43820,"line_start":96,"line_end":96,"column_start":6,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":179},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":45892,"byte_end":45903,"line_start":155,"line_end":155,"column_start":18,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":46564,"byte_end":46574,"line_start":184,"line_end":184,"column_start":13,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":48841,"byte_end":48851,"line_start":263,"line_end":263,"column_start":22,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":375},"to":{"krate":2,"index":2100}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":49121,"byte_end":49139,"line_start":272,"line_end":272,"column_start":34,"column_end":52},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/user_data.rs","byte_start":49633,"byte_end":49654,"line_start":291,"line_end":291,"column_start":34,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":4967}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":52676,"byte_end":52684,"line_start":82,"line_end":82,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":53859,"byte_end":53876,"line_start":118,"line_end":118,"column_start":30,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":481},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54245,"byte_end":54262,"line_start":129,"line_end":129,"column_start":30,"column_end":47},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":481},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":54792,"byte_end":54809,"line_start":146,"line_end":146,"column_start":30,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55210,"byte_end":55227,"line_start":156,"line_end":156,"column_start":30,"column_end":47},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":491},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":55388,"byte_end":55395,"line_start":162,"line_end":162,"column_start":6,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":64248,"byte_end":64255,"line_start":386,"line_end":386,"column_start":6,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/wire.rs","byte_start":64470,"byte_end":64477,"line_start":398,"line_end":398,"column_start":15,"column_end":22},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":279},"to":{"krate":2,"index":2100}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":1278,"byte_end":1283,"line_start":39,"line_end":39,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1910},"to":{"krate":0,"index":289}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":4269,"byte_end":4278,"line_start":113,"line_end":113,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":309},"to":{"krate":0,"index":289}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5462,"byte_end":5473,"line_start":159,"line_end":159,"column_start":9,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":5720,"byte_end":5731,"line_start":169,"line_end":169,"column_start":17,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":6846,"byte_end":6857,"line_start":209,"line_end":209,"column_start":26,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":2100}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":7206,"byte_end":7217,"line_start":219,"line_end":219,"column_start":33,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":1905}},{"span":{"file_name":"/home/sacha/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.25.0/src/lib.rs","byte_start":7256,"byte_end":7267,"line_start":220,"line_end":220,"column_start":33,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":1917}}]}